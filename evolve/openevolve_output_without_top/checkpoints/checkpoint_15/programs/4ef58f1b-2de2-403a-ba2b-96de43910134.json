{"id": "4ef58f1b-2de2-403a-ba2b-96de43910134", "code": "* heat_map_train.py *:\n@@@\nimport pathlib\n\nBASE_DIR = pathlib.Path(__file__).parent\n\n# torch & related imports\nimport numpy as np\nimport torch\n\n\n# You can train graph neural networks here (actually you can edit the whole file).\n# Save them in str(BASE_DIR / \"pretrained\") directory and use them in `heat_map_inference.py`.\n# But mind the training time, it should not exceed 5 minutes (python3.11, ubuntu 22.04, nvidia A100 40 GB GPU).\n\n# In the original UTSP paper the heat map matrix is used, but upon the closer look on the authors code, they did not use it (they used simple K nearest neighbours as candidates).\n# So, the SOTA metrics were achieved without a heat map matrix, but maybe GNN approach is not wrong by its nature, maybe if trained properly it can help 2'opt and k'opt algorithms to find the best solution faster.\n# Maybe it is better to just improve the c++ code and not try the heat map approach.\n\n# Possible GNN step (just in case, implement if you like, you can skip this if think it is not effective): hamiltonian cycle constraint, loss on exact 2 degree for each node, etc.\n\n\nif __name__ == \"__main__\":\n    print(\"Sample output to log\")\n@@@\n\n* heat_map_inference.py *:\n@@@\nimport os\nimport sys\nimport pathlib\nimport argparse\nimport numpy as np\n\nBASE_DIR = pathlib.Path(__file__).parent\nsys.path.append(str(BASE_DIR))\n\n# other imports\nfrom heat_map_train import *\n\n\ndef calc_heat_map(cities: np.ndarray) -> np.ndarray:\n    cities_number = cities.shape[0]\n\n    # You can call the pretrained model here (that was trained in `heat_map_train.py` and saved in str(BASE_DIR) / \"pretrained\")\n    # If you want to run some algorithm that is not trainable, then maybe it is better to implement it in TSP.cpp (just because it is faster in c++).\n\n    return np.zeros((cities_number, cities_number), dtype=float)\n\n\nif __name__ == \"__main__\":\n    p = argparse.ArgumentParser()\n    p.add_argument(\"--out\", required=True, help=\"Path to .npy to write the heat map.\")\n    args = p.parse_args()\n\n    # reading cities from stdin (mind the input format if you want to change this part, as your solution will be tested in an environment)\n    first_stdin_line = sys.stdin.readline().strip()\n    cities_number = int(first_stdin_line)\n    cities = np.loadtxt(sys.stdin, max_rows=cities_number)  # of shape (cities_number, 2)\n\n    # calculating heat map\n    heat_map = calc_heat_map(cities).astype(np.float32, copy=False)\n    print(\"Sample output to log\")\n\n    # writing heat map atomically to out .npy file (mind the output format if you want to change this part, as your solution will be tested in an environment)\n    tmp_path = args.out + \".tmp\"\n\n    with open(tmp_path, \"wb\") as output_temp_file:\n        np.save(output_temp_file, heat_map, allow_pickle=False)  # no auto \u201c.npy\u201d added\n        output_temp_file.flush()\n        os.fsync(output_temp_file.fileno())\n    \n    os.replace(tmp_path, args.out)\n@@@\n\n* include/utils.hpp *:\n@@@\n#pragma once\n\n// standart imports\n#include <queue>\n#include <cmath>\n#include <numeric>\n#include <algorithm>\n\n\nconstexpr double BHH_CONSTANT_2D = 0.7120;  // Beardwood\u2013Halton\u2013Hammersley (BHH) constant\n\n\nlong long int64_sqrt(long long value) {\n    if (value <= 0) return 0LL;  // clamp negatives to 0\n    if (value < 2) return value;\n\n    constexpr long long MAX_SQRT_LL = 3037000499LL;\n\n    long long left = 1;\n    long long right = std::min<long long>(value, MAX_SQRT_LL);\n    long long floor_root = 1;\n\n    while (left <= right) {\n        long long candidate = left + (right - left) / 2;\n\n        if (candidate <= value / candidate) {\n            floor_root = candidate;\n            left = candidate + 1;\n        } else {\n            right = candidate - 1;\n        }\n    }\n    return floor_root;\n}\n\n\ndouble calc_distance_double(Context& context, int i, int j) {\n    if (i == j) { return inf_double; }\n    double diff_x = (context.coordinates_double_x[i] - context.coordinates_double_x[j]);\n    double diff_y = (context.coordinates_double_y[i] - context.coordinates_double_y[j]);\n    return sqrt(diff_x * diff_x + diff_y * diff_y);\n}\n\nint calc_distance_int32(Context& context, int i, int j) {\n    if (i == j) { return inf_int32; }\n    long long diff_x = static_cast<long long>(context.coordinates_int32_x[i] - context.coordinates_int32_x[j]);\n    long long diff_y = static_cast<long long>(context.coordinates_int32_y[i] - context.coordinates_int32_y[j]);\n    return static_cast<int>(int64_sqrt(diff_x * diff_x + diff_y * diff_y));\n}\n\nlong long calc_distance_int64(Context& context, int i, int j) {\n    if (i == j) { return inf_int64; }\n    long long diff_x = context.coordinates_int64_x[i] - context.coordinates_int64_x[j];\n    long long diff_y = context.coordinates_int64_y[i] - context.coordinates_int64_y[j];\n    return int64_sqrt(diff_x * diff_x + diff_y * diff_y);\n}\n\n\ndouble get_distance_double(const Config& config, Context& context, int i, int j) {\n    return context.distance_double[i * config.cities_number + j];\n}\n\nint get_distance_int32(const Config& config, Context& context, int i, int j) {\n    return context.distance_int32[i * config.cities_number + j];\n}\n\nlong long get_distance_int64(const Config& config, Context& context, int i, int j) {\n    return context.distance_int64[i * config.cities_number + j];\n}\n\n\ndouble calc_total_distance_double(const Config& config, Context& context) {\n    double total_distance = 0.0;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        total_distance += get_distance_double(config, context, i, context.path[i].next);\n    }\n\n    return total_distance;\n}\n\nint calc_total_distance_int32(const Config& config, Context& context) {\n    int total_distance = 0;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        total_distance += get_distance_int32(config, context, i, context.path[i].next);\n    }\n\n    return total_distance;\n}\n\nlong long calc_total_distance_int64(const Config& config, Context& context) {\n    long long total_distance = 0LL;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        total_distance += get_distance_int64(config, context, i, context.path[i].next);\n    }\n\n    return total_distance;\n}\n\n\nvoid calc_and_save_total_distance(const Config& config, Context& context) {\n    if (config.distance_type == DistanceType::Double) {\n        context.path_distance_double = calc_total_distance_double(config, context);\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        context.path_distance_int32 = calc_total_distance_int32(config, context);\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        context.path_distance_int64 = calc_total_distance_int64(config, context);\n    }\n}\n\n\nvoid identify_candidates_for_each_node(const Config& config, Context& context, const double* metric, bool is_reversed) {\n\tfor (int i = 0; i < config.cities_number; ++i) {\n        std::iota(context.buffer.begin(), context.buffer.end(), 0);  // 0..n-1\n\n        // Partition so first K are the best candidates\u2026\n        std::nth_element(context.buffer.begin(), context.buffer.begin() + config.candidates_number, context.buffer.end(), [&](int u, int v) {\n            if (i == u) { return false; }\n            if (i == v) { return true; }\n            return static_cast<bool>((metric[i * config.cities_number + u] < metric[i * config.cities_number + v]) ^ is_reversed);\n        });\n        // \u2026then sort those K so we iterate nearest-first in local search.\n        std::sort(context.buffer.begin(), context.buffer.begin() + config.candidates_number, [&](int u, int v) {\n            if (i == u) return false;\n            if (i == v) return true;\n            return static_cast<bool>((metric[i * config.cities_number + u] < metric[i * config.cities_number + v]) ^ is_reversed);\n        });\n\n\t\tfor (int j = 0; j < config.candidates_number; ++j) {\n\t\t\tcontext.candidates[i * config.candidates_number + j] = context.buffer[j];\n\t    }\n\t}\n}\n\n\nint get_random_int_by_module(int mod) {\n    if (mod <= 0) return 0;\n\treturn rand() % mod;\n}\n\n\nbool is_cities_same_or_adjacent(const Config& config, Context& context, int i, int j) {\n    return (i == j || context.path[i].next == j || context.path[j].next == i);\n}\n\n\nvoid reverse_sub_path(Context& context, int i, int j) {\n    int current_city = i;\n\n    while (true) {\n        std::swap(context.path[current_city].prev, context.path[current_city].next);\n\n        if (current_city == j) { return; }\n\n        current_city = context.path[current_city].prev;\n    }\n}\n\n\ndouble expected_tsp_length_2d(long long n, double width, double height) {\n    if (n <= 1 || width <= 0.0 || height <= 0.0) {\n        return 0.0;\n    }\n\n    double area = width * height;\n    double expected_length = BHH_CONSTANT_2D * std::sqrt(static_cast<double>(n) * area);\n    return expected_length;\n}\n@@@\n\n* include/context.hpp *:\n@@@\n#pragma once\n\n// standart imports\n#include <string>\n#include <vector>\n#include <limits>\n#include <iostream>\n\n\n// global variables declaration\nconstexpr int null = -1;\nconstexpr double e = 2.718281;\nconstexpr double inf_double = std::numeric_limits<double>::infinity();\nconstexpr int inf_int32 = std::numeric_limits<int>::max();\nconstexpr long long inf_int64 = std::numeric_limits<long long>::max();\n\n\nenum class CandidatesSource { KNN, HeatMap };\nenum class DistanceType { Int32, Int64, Double };\n\n\nstruct Config {\n    int cities_number;\n    std::string input_path;\n    std::string output_path;\n    bool use_heat_map_as_initial_weights;\n    CandidatesSource candidates_source;\n    int candidates_number;\n    int max_k_opt_depth;\n    bool random_k_opt_depth_after_first_iteration;\n    double min_potential_to_consider;\n    double exploration_coefficient;\n    double weight_delta_coefficient;\n    double sensitivity_temperature;\n    int max_k_opt_simulations_without_improve_to_stop;\n    int restarts_number;\n    DistanceType distance_type;\n    double magnify_rate;\n\n    Config(const json& config) {\n        cities_number = config[\"cities_number\"];\n        input_path = config[\"input_path\"];\n        output_path = config[\"output_path\"];\n        use_heat_map_as_initial_weights = config[\"use_heat_map_as_initial_weights\"];\n\n        if (config[\"candidates_source\"].get<std::string>() == \"knn\") {\n            candidates_source = CandidatesSource::KNN;\n        } else if (config[\"candidates_source\"].get<std::string>() == \"heat_map\") {\n            candidates_source = CandidatesSource::HeatMap;\n        } else {\n            throw std::invalid_argument(\"Unknown candidates source: '\" + config[\"candidates_source\"].get<std::string>() + \"'.\");\n        }\n\n        candidates_number = config[\"candidates_number\"];\n        max_k_opt_depth = config[\"max_k_opt_depth\"];\n        random_k_opt_depth_after_first_iteration = config[\"random_k_opt_depth_after_first_iteration\"];\n        min_potential_to_consider = config[\"min_potential_to_consider\"];\n        exploration_coefficient = config[\"exploration_coefficient\"];\n        weight_delta_coefficient = config[\"weight_delta_coefficient\"];\n        sensitivity_temperature = config[\"sensitivity_temperature\"];\n        max_k_opt_simulations_without_improve_to_stop = config[\"max_k_opt_simulations_without_improve_to_stop\"];\n        restarts_number = config[\"restarts_number\"];\n\n        if (config[\"distance_type\"].get<std::string>() == \"int32\") {\n            distance_type = DistanceType::Int32;\n        } else if (config[\"distance_type\"].get<std::string>() == \"int64\") {\n            distance_type = DistanceType::Int64;\n        } else if (config[\"distance_type\"].get<std::string>() == \"double\") {\n            distance_type = DistanceType::Double;\n        } else {\n            throw std::invalid_argument(\"Unknown distance type: '\" + config[\"distance_type\"].get<std::string>() + \"'.\");\n        }\n\n        magnify_rate = config[\"magnify_rate\"];\n\n        // warnings\n        if (distance_type == DistanceType::Double) {\n            if (cities_number > 1'000'000) {\n                std::cout << \"Warning: `cities_number` is greater than 1'000'000. Try to use with `distance_type` = 'int64' to avoid precision errors.\\n\";\n            }\n        } else {\n            if (magnify_rate < 10'000.0) {\n                std::cout << \"Warning: `magnify_rate` is better to take more than 10'000 when using with `distance_type` = 'int32' or 'int64'.\\n\";\n            }\n            if (distance_type == DistanceType::Int32 && static_cast<long long>(cities_number) * magnify_rate > 1'000'000'000) {\n                std::cout << \"Warning: distance might be out of bounds for a 32 bit integer. Consider switching to doubles for distance calculation or using 64 bit integers.\\n\";\n            }\n            if (distance_type == DistanceType::Int64 && magnify_rate > 1'000'000'000) {\n                std::cout << \"Warning: distance might be out of bounds for a 64 bit integer. Consider switching to doubles for distance calculation.\\n\";\n            }\n        }\n    }\n};\n\n\nstruct City {\n  int prev;\n  int next;\n};\n\n\nstruct Context {\n    // coordinates\n    double* coordinates_double_x = nullptr;\n    double* coordinates_double_y = nullptr;\n\n    int* coordinates_int32_x = nullptr;\n    int* coordinates_int32_y = nullptr;\n\n    long long* coordinates_int64_x = nullptr;\n    long long* coordinates_int64_y = nullptr;\n\n    // distances\n    double* distance_double = nullptr;\n    int* distance_int32 = nullptr;\n    long long* distance_int64 = nullptr;\n\n    // weights\n    double* heat_map = nullptr;\n    double* weight = nullptr;\n    double* potential = nullptr;\n\n    // candidates\n    int* candidates = nullptr;\n\n    // local k opt search\n    int* pairs = nullptr;\n    long long* chosen_times = nullptr;\n    long long total_simulations = 0;\n\n    // path\n    City* path = nullptr;\n    double path_distance_double = inf_double;\n    int path_distance_int32 = inf_int32;\n    long long path_distance_int64 = inf_int64;\n\n    City* best_path = nullptr;\n    double best_path_distance_double = inf_double;\n    int best_path_distance_int32 = inf_int32;\n    long long best_path_distance_int64 = inf_int64;\n\n    int* solution;\n    std::vector<bool> is_city_selected;\n\n    // other utils/tmp variables\n    std::vector<int> buffer;\n\n    Context(const Config& config) : buffer(config.cities_number, 0), is_city_selected(config.cities_number, false) {\n        coordinates_double_x = new double[config.cities_number];\n        coordinates_double_y = new double[config.cities_number];\n\n        if (config.distance_type == DistanceType::Int32) {\n            coordinates_int32_x = new int[config.cities_number];\n            coordinates_int32_y = new int[config.cities_number];\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            coordinates_int64_x = new long long[config.cities_number];\n            coordinates_int64_y = new long long[config.cities_number];\n        }\n\n        distance_double = new double[config.cities_number * config.cities_number];\n        if (config.distance_type == DistanceType::Int32) {\n            distance_int32 = new int[config.cities_number * config.cities_number];\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            distance_int64 = new long long[config.cities_number * config.cities_number];\n        }\n\n        if (config.use_heat_map_as_initial_weights) {\n            heat_map = new double[config.cities_number * config.cities_number];\n        }\n        weight = new double[config.cities_number * config.cities_number];\n        potential = new double[config.cities_number * config.cities_number];\n\n        candidates = new int[config.cities_number * config.candidates_number];\n\n        pairs = new int[config.cities_number];  // because currently we have a random k opt depth change option\n        chosen_times = new long long[config.cities_number * config.cities_number];\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            chosen_times[i] = 0;\n        }\n\n        path = new City[config.cities_number];\n        best_path = new City[config.cities_number];\n        solution = new int[config.cities_number];\n    }\n\n    ~Context() {\n        delete[] coordinates_double_x;\n        delete[] coordinates_double_y;\n\n        if (coordinates_int32_x) { delete[] coordinates_int32_x; }\n        if (coordinates_int32_y) { delete[] coordinates_int32_y; }\n\n        if (coordinates_int64_x) { delete[] coordinates_int64_x; }\n        if (coordinates_int64_y) { delete[] coordinates_int64_y; }\n\n        delete[] distance_double;\n        if (distance_int32) { delete[] distance_int32; }\n        if (distance_int64) { delete[] distance_int64; }\n\n        if (heat_map) { delete[] heat_map; }\n        delete[] weight;\n        delete[] potential;\n\n        delete[] candidates;\n\n        delete[] pairs;\n        delete[] chosen_times;\n\n        delete[] path;\n        delete[] best_path;\n        delete[] solution;\n    }\n};\n\n\nvoid convert_solution_to_path(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        int current_city = context.solution[i];\n\n        context.path[current_city].prev = context.solution[(i + config.cities_number - 1) % config.cities_number];\n        context.path[current_city].next = context.solution[(i + 1) % config.cities_number];\n    }\n}\n\nvoid convert_path_to_solution(const Config& config, Context& context) {\n    int current_city = 0;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.solution[i] = current_city;\n\n        current_city = context.path[current_city].next;\n    }\n}\n\nvoid store_path_as_best(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.best_path[i].prev = context.path[i].prev;\n        context.best_path[i].next = context.path[i].next;\n    }\n\n    if (config.distance_type == DistanceType::Double) {\n        context.best_path_distance_double = context.path_distance_double;\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        context.best_path_distance_int32 = context.path_distance_int32;\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        context.best_path_distance_int64 = context.path_distance_int64;\n    }\n}\n\nvoid restore_best_path(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.path[i].prev = context.best_path[i].prev;\n        context.path[i].next = context.best_path[i].next;\n    }\n}\n@@@\n\n* include/random_solution.hpp *:\n@@@\n#pragma once\n\n\n// * The following functions are used to randomly generate an initial solution.\n// * Starting from an arbitrarily chosen city, it iteratively selects a random city until forming a complete TSP tour.\n\n\nint select_random_city(const Config& config, Context& context) {\n\tint random_start = get_random_int_by_module(config.cities_number);\n\n\tfor (int i = 0; i < config.cities_number; ++i) {\n\t\tint city = (random_start + i) % config.cities_number;\n\n\t\tif (!context.is_city_selected[city]) {\n\t\t\treturn city;\n\t\t}\n\t}\n\n\treturn null;\n}\n\nvoid generate_random_solution(const Config& config, Context& context) {\n\t// GRASP-style KNN constructor with multi-start and distance-biased sampling.\n\t// Builds several candidate tours and keeps the best (shortest) one.\n\t// This yields far better starting tours than pure random chains,\n\t// cutting downstream 2-opt/k-opt time and improving final quality.\n\n\tconst int n = config.cities_number;\n\tconst int starts = 8;                 // more multi-starts; still cheap at n\u2248200\n\tconst int topL  = std::min(8, config.candidates_number);  // RCL cap\n\tconst double eps = 1e-12;\n\n\tfor (int i = 0; i < n; ++i) {\n\t\tcontext.solution[i] = null;\n\t\tcontext.is_city_selected[i] = false;\n\t}\n\n\tdouble best_len = std::numeric_limits<double>::infinity();\n\tstd::vector<int> best_sol(n);\n\n\tfor (int s = 0; s < starts; ++s) {\n\t\tstd::vector<int> sol(n, null);\n\t\tstd::vector<char> used(n, 0);\n\n\t\tint current = select_random_city(config, context);\n\t\tsol[0] = current;\n\t\tused[current] = 1;\n\t\tdouble len = 0.0;\n\n\t\tfor (int pos = 1; pos < n; ++pos) {\n\t\t\t// Build restricted candidate list (up to topL nearest unvisited from KNN)\n\t\t\tint rcl_idx[8];\n\t\t\tdouble rcl_dist[8];\n\t\t\tint rsz = 0;\n\n\t\t\tfor (int t = 0; t < config.candidates_number; ++t) {\n\t\t\t\tint cand = context.candidates[current * config.candidates_number + t];\n\t\t\t\tif (cand == current || used[cand]) continue;\n\n\t\t\t\tdouble d = get_distance_double(config, context, current, cand);\n\n\t\t\t\t// keep a sorted list of size<=topL by distance\n\t\t\t\tif (rsz < topL) {\n\t\t\t\t\trcl_idx[rsz] = cand;\n\t\t\t\t\trcl_dist[rsz] = d;\n\t\t\t\t\t++rsz;\n\n\t\t\t\t\tfor (int k = rsz - 1; k > 0; --k) {\n\t\t\t\t\t\tif (rcl_dist[k] < rcl_dist[k - 1]) {\n\t\t\t\t\t\t\tstd::swap(rcl_dist[k], rcl_dist[k - 1]);\n\t\t\t\t\t\t\tstd::swap(rcl_idx[k], rcl_idx[k - 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (d < rcl_dist[rsz - 1]) {\n\t\t\t\t\trcl_dist[rsz - 1] = d;\n\t\t\t\t\trcl_idx[rsz - 1] = cand;\n\t\t\t\t\tfor (int k = rsz - 1; k > 0; --k) {\n\t\t\t\t\t\tif (rcl_dist[k] < rcl_dist[k - 1]) {\n\t\t\t\t\t\t\tstd::swap(rcl_dist[k], rcl_dist[k - 1]);\n\t\t\t\t\t\t\tstd::swap(rcl_idx[k], rcl_idx[k - 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint next_city = null;\n\t\t\tif (rsz > 0) {\n\t\t\t\t// Distance-biased roulette: p \u221d 1 / d\n\t\t\t\tdouble wsum = 0.0;\n\t\t\t\tfor (int k = 0; k < rsz; ++k) wsum += 1.0 / (rcl_dist[k] + eps);\n\t\t\t\tdouble r = (static_cast<double>(rand()) / RAND_MAX) * wsum;\n\t\t\t\tfor (int k = 0; k < rsz; ++k) {\n\t\t\t\t\tr -= 1.0 / (rcl_dist[k] + eps);\n\t\t\t\t\tif (r <= 0.0) { next_city = rcl_idx[k]; break; }\n\t\t\t\t}\n\t\t\t\tif (next_city == null) next_city = rcl_idx[rsz - 1]; // numeric fallback\n\t\t\t} else {\n\t\t\t\t// Fallback: global nearest unvisited\n\t\t\t\tdouble best_d = std::numeric_limits<double>::infinity();\n\t\t\t\tfor (int cand = 0; cand < n; ++cand) {\n\t\t\t\t\tif (used[cand]) continue;\n\t\t\t\t\tdouble d = get_distance_double(config, context, current, cand);\n\t\t\t\t\tif (d < best_d) { best_d = d; next_city = cand; }\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlen += get_distance_double(config, context, current, next_city);\n\t\t\tcurrent = next_city;\n\t\t\tsol[pos] = current;\n\t\t\tused[current] = 1;\n\t\t}\n\t\t// close the tour\n\t\tlen += get_distance_double(config, context, sol[n - 1], sol[0]);\n\n\t\tif (len < best_len) {\n\t\t\tbest_len = len;\n\t\t\tbest_sol = sol;\n\t\t}\n\t}\n\n\t// output the best found start\n\tfor (int i = 0; i < n; ++i) context.solution[i] = best_sol[i];\n\tfor (int i = 0; i < n; ++i) context.is_city_selected[i] = false; // clean flags\n}\n@@@\n\n* include/local_2_opt_search.hpp *:\n@@@\n#pragma once\n\n\nbool apply_2_opt_move(const Config& config, Context& context, int i, int j) {\n    if (is_cities_same_or_adjacent(config, context, i, j)) { return false; }\n\n    int i_next = context.path[i].next;\n\tint j_next = context.path[j].next;\n\n    ++context.chosen_times[i * config.cities_number + j];\n\t++context.chosen_times[j * config.cities_number + i];\n\t++context.chosen_times[i_next * config.cities_number + j_next];\n\t++context.chosen_times[j_next * config.cities_number + i_next];\n\n    ++context.total_simulations;\n\n    // calculating delta\n    bool apply_move = false;\n    double weight_increase = 0.0;\n\n    if (config.distance_type == DistanceType::Double) {\n        double delta = get_distance_double(config, context, i, i_next) + get_distance_double(config, context, j, j_next) - get_distance_double(config, context, i, j) - get_distance_double(config, context, i_next, j_next);\n        if (delta > 0.0) {\n            apply_move = true;\n            weight_increase = config.weight_delta_coefficient * (pow(e, delta / context.path_distance_double) - 1);\n            context.path_distance_double -= delta;\n        }\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        int delta = get_distance_int32(config, context, i, i_next) + get_distance_int32(config, context, j, j_next) - get_distance_int32(config, context, i, j) - get_distance_int32(config, context, i_next, j_next);\n        if (delta > 0) {\n            apply_move = true;\n            weight_increase = config.weight_delta_coefficient * (pow(e, static_cast<double>(delta) / context.path_distance_int32) - 1);\n            context.path_distance_int32 -= delta;\n        }\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        long long delta = get_distance_int64(config, context, i, i_next) + get_distance_int64(config, context, j, j_next) - get_distance_int64(config, context, i, j) - get_distance_int64(config, context, i_next, j_next);\n        if (delta > 0) {\n            apply_move = true;\n            weight_increase = config.weight_delta_coefficient * (pow(e, static_cast<double>(delta) / context.path_distance_int64) - 1);\n            context.path_distance_int64 -= delta;\n        }\n    }\n\n    if (apply_move) {\n        // applying 2 opt move\n        reverse_sub_path(context, i_next, j);\n\n        context.path[i].next = j;\n        context.path[i_next].next = j_next;\n        context.path[j].prev = i;\n        context.path[j_next].prev = i_next;\n\n        // updating weights\n        context.weight[i * config.cities_number + j] += weight_increase;\n        context.weight[j * config.cities_number + i] += weight_increase;\n        context.weight[i_next * config.cities_number + j_next] += weight_increase;\n        context.weight[j_next * config.cities_number + i_next] += weight_increase;\n\n        return true;\n    }\n    return false;\n}\n\n\nbool improve_by_2_opt_move(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n\t\tfor (int j = 0; j < config.candidates_number; ++j) {\n\t\t\tint candidate = context.candidates[i * config.candidates_number + j];\n\n\t\t\tif (apply_2_opt_move(config, context, i, candidate)) { return true; }\n\t\t}\n\t}\n    return false;\n}\n\nint local_2_opt_search(const Config& config, Context& context) {\n    int improved_times = 0;\n\n    // 2.5-opt (Or-opt, length-1 relocation) as a lightweight complement to 2-opt.\n    // Tries to relocate a single city b right after some city d from its KNN list.\n    auto try_or_opt = [&]() -> bool {\n        for (int b = 0; b < config.cities_number; ++b) {\n            int a = context.path[b].prev;\n            int c = context.path[b].next;\n            // skip degenerate adjacency if any\n            if (a == b || c == b || a == c) continue;\n\n            for (int t = 0; t < config.candidates_number; ++t) {\n                int d = context.candidates[b * config.candidates_number + t];\n                if (d == b || d == a || d == c) continue;   // inserting next to current segment is no-op / invalid\n                int e = context.path[d].next;\n                if (e == b) continue;                        // would reinsert in same place\n\n                bool apply = false;\n\n                if (config.distance_type == DistanceType::Double) {\n                    double old_len =\n                        get_distance_double(config, context, a, b) +\n                        get_distance_double(config, context, b, c) +\n                        get_distance_double(config, context, d, e);\n                    double new_len =\n                        get_distance_double(config, context, a, c) +\n                        get_distance_double(config, context, d, b) +\n                        get_distance_double(config, context, b, e);\n                    double gain = old_len - new_len; // gain > 0 means improvement\n                    if (gain > 0.0) {\n                        // detach b from (a-b-c)\n                        context.path[a].next = c; context.path[c].prev = a;\n                        // insert b between (d-e)\n                        context.path[d].next = b; context.path[b].prev = d;\n                        context.path[b].next = e; context.path[e].prev = b;\n\n                        context.path_distance_double -= gain;\n                        ++context.total_simulations;\n                        return true;\n                    }\n                } else if (config.distance_type == DistanceType::Int32) {\n                    int old_len =\n                        get_distance_int32(config, context, a, b) +\n                        get_distance_int32(config, context, b, c) +\n                        get_distance_int32(config, context, d, e);\n                    int new_len =\n                        get_distance_int32(config, context, a, c) +\n                        get_distance_int32(config, context, d, b) +\n                        get_distance_int32(config, context, b, e);\n                    int gain = old_len - new_len;\n                    if (gain > 0) {\n                        context.path[a].next = c; context.path[c].prev = a;\n                        context.path[d].next = b; context.path[b].prev = d;\n                        context.path[b].next = e; context.path[e].prev = b;\n\n                        context.path_distance_int32 -= gain;\n                        ++context.total_simulations;\n                        return true;\n                    }\n                } else { // DistanceType::Int64\n                    long long old_len =\n                        get_distance_int64(config, context, a, b) +\n                        get_distance_int64(config, context, b, c) +\n                        get_distance_int64(config, context, d, e);\n                    long long new_len =\n                        get_distance_int64(config, context, a, c) +\n                        get_distance_int64(config, context, d, b) +\n                        get_distance_int64(config, context, b, e);\n                    long long gain = old_len - new_len;\n                    if (gain > 0) {\n                        context.path[a].next = c; context.path[c].prev = a;\n                        context.path[d].next = b; context.path[b].prev = d;\n                        context.path[b].next = e; context.path[e].prev = b;\n\n                        context.path_distance_int64 -= gain;\n                        ++context.total_simulations;\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    };\n\n    // Alternate: first-improvement 2-opt, then Or-opt; repeat until no change.\n    bool improved = true;\n    while (improved) {\n        improved = false;\n        if (improve_by_2_opt_move(config, context)) {\n            ++improved_times;\n            improved = true;\n            continue;\n        }\n        if (try_or_opt()) {\n            ++improved_times;\n            improved = true;\n        }\n    }\n\n    return improved_times;\n}\n@@@\n\n* include/local_k_opt_search.hpp *:\n@@@\n#pragma once\n\n// standart imports\n#include <cmath>\n#include <iostream>\n\n\nvoid calc_potential_inplace(const Config& config, Context& context, int i, int j) {\n    if (i == j) {\n        context.potential[i * config.cities_number + j] = 0.0;\n        return;\n    }\n\n    double weight = context.weight[i * config.cities_number + j];\n\n    // this forms a smooth ReLU function\n    if (weight < 0) { weight = pow(e, weight); }\n    else { weight += 1.0; }\n\n    context.potential[i * config.cities_number + j] = weight + config.exploration_coefficient * sqrt(log(context.total_simulations + 1) / (context.chosen_times[i * config.cities_number + j] + 1));  // always a positive value\n}\n\nint get_candidate_proportionally_by_potential(const Config& config, Context& context, int current_city, int start_city) {\n    int next_city = context.path[current_city].next;\n\n\tdouble total_potential = 0.0;\n    int candidates_available = 0;\n\n\tfor (int i = 0; i < config.candidates_number; ++i) {\n        int candidate = context.candidates[current_city * config.candidates_number + i];\n        double potential = context.potential[current_city * config.cities_number + candidate];\n\n        if (candidate == next_city || candidate == start_city || (potential < config.min_potential_to_consider)) { continue; }  // not available\n\n\t\ttotal_potential += potential;\n        ++candidates_available;\n\t}\n\n    if (candidates_available == 0) { return null; }\n\n    // choosing the random available candidate proportionally\n    double random_potential = (static_cast<double>(rand()) / RAND_MAX) * total_potential;\n\n\tfor (int i = 0; i < config.candidates_number; ++i) {\n        int candidate = context.candidates[current_city * config.candidates_number + i];\n        double potential = context.potential[current_city * config.cities_number + candidate];\n\n        if (candidate == next_city || candidate == start_city || (potential < config.min_potential_to_consider)) { continue; }  // not available\n\n        random_potential -= potential;\n        if (random_potential <= 0) { return candidate; }\n    }\n\n\treturn null;\n}\n\n\nbool apply_k_opt_move(const Config& config, Context& context, int start_city, int max_k_opt_depth) {\n    ++context.total_simulations;\n\n    // first pair\n    int next_to_start_city = context.path[start_city].next;\n\n    context.pairs[0] = start_city;\n    context.pairs[1] = next_to_start_city;\n    int depth = 1;\n\n    // breaking an edge of the first pair\n    context.path[start_city].next = null;\n    context.path[next_to_start_city].prev = null;\n\n    // initializing gains\n    double gain_double; double gain_double_with_closure = 0.0;\n    int gain_int32; int gain_int32_with_closure = 0;\n    long long gain_int64; long long gain_int64_with_closure = 0;\n\n    if (config.distance_type == DistanceType::Double) {\n        gain_double = get_distance_double(config, context, start_city, next_to_start_city);\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        gain_int32 = get_distance_int32(config, context, start_city, next_to_start_city);\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        gain_int64 = get_distance_int64(config, context, start_city, next_to_start_city);\n    }\n\n    bool apply_move = false;\n    double weight_increase = 0.0;\n\n    int current_city = next_to_start_city;\n\n    for (int i = 1; i < max_k_opt_depth; ++i) {\n        int proposed_city = get_candidate_proportionally_by_potential(config, context, current_city, start_city);\n\n        if (proposed_city == null) { return false; }  // no candidates, could not improve\n\n        ++context.chosen_times[current_city * config.cities_number + proposed_city];\n\t\t++context.chosen_times[proposed_city * config.cities_number + current_city];\n\n        int proposed_city_link = context.path[proposed_city].prev;  // city to disconnect from the proposed city (and maybe to connect to the start city)\n\n        context.pairs[2 * i] = proposed_city;\n        context.pairs[2 * i + 1] = proposed_city_link;\n        ++depth;\n\n        // applying 2 opt move\n        reverse_sub_path(context, current_city, proposed_city_link);\n\n        context.path[current_city].next = proposed_city;\n        context.path[proposed_city].prev = current_city;\n        context.path[proposed_city_link].prev = null;\n\n        // recalculating gains\n        if (config.distance_type == DistanceType::Double) {\n            gain_double += get_distance_double(config, context, proposed_city_link, proposed_city) - get_distance_double(config, context, current_city, proposed_city);\n            gain_double_with_closure = gain_double - get_distance_double(config, context, start_city, proposed_city_link);\n\n            weight_increase = config.weight_delta_coefficient * (pow(e, gain_double_with_closure / context.path_distance_double) - 1);\n\n            if (gain_double_with_closure > 0.0) {\n                apply_move = true;\n                context.path_distance_double -= gain_double_with_closure;\n            }\n        }\n        if (config.distance_type == DistanceType::Int32) {\n            gain_int32 += get_distance_int32(config, context, proposed_city_link, proposed_city) - get_distance_int32(config, context, current_city, proposed_city);\n            gain_int32_with_closure = gain_int32 - get_distance_int32(config, context, start_city, proposed_city_link);\n\n            weight_increase = config.weight_delta_coefficient * (pow(e, static_cast<double>(gain_int32_with_closure) / context.path_distance_int32) - 1);\n\n            if (gain_int32_with_closure > 0) {\n                apply_move = true;\n                context.path_distance_int32 -= gain_int32_with_closure;\n            }\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            gain_int64 += get_distance_int64(config, context, proposed_city_link, proposed_city) - get_distance_int64(config, context, current_city, proposed_city);\n            gain_int64_with_closure = gain_int64 - get_distance_int64(config, context, start_city, proposed_city_link);\n\n            weight_increase = config.weight_delta_coefficient * (pow(e, static_cast<double>(gain_int64_with_closure) / context.path_distance_int64) - 1);\n\n            if (gain_int64_with_closure > 0) {\n                apply_move = true;\n                context.path_distance_int64 -= gain_int64_with_closure;\n            }\n        }\n\n        if (apply_move) { break; }\n\n        current_city = proposed_city_link;\n    }\n\n    // updating weights\n    for (int i = 0; i < depth; ++i) {\n        int current_city = context.pairs[2 * i];\n        int proposed_city = (i < depth - 1) ? context.pairs[2 * i + 2] : start_city;\n\n        double factor = 1.0;\n        if (!apply_move) {\n            // exponential decrease in sensitivity\n            factor = pow(e, -i / config.sensitivity_temperature);\n        }\n\n        context.weight[current_city * config.cities_number + proposed_city] += weight_increase * factor;\n        context.weight[proposed_city * config.cities_number + current_city] += weight_increase * factor;\n    }\n\n    if (apply_move) {\n        int end_city = context.pairs[2 * depth - 1];\n\n        context.path[start_city].next = end_city;\n        context.path[end_city].prev = start_city;\n\n        return true;\n    }\n    return false;\n}\n\n\nbool improve_by_k_opt_move(const Config& config, Context& context, int max_k_opt_depth) {\n    for (int i = 0; i < config.max_k_opt_simulations_without_improve_to_stop; ++i) {\n        // saving current path\n        convert_path_to_solution(config, context);\n\n        int start_city = get_random_int_by_module(config.cities_number);\n        if (apply_k_opt_move(config, context, start_city, max_k_opt_depth)) { return true; }\n\n        // restoring the path that was before the move\n        convert_solution_to_path(config, context);\n    }\n\n    return false;\n}\n\nint local_k_opt_search(const Config& config, Context& context, int max_k_opt_depth) {\n    // calculating current potentials only for candidate edges (O(n*k) vs O(n^2))\n    for (int i = 0; i < config.cities_number; ++i) {\n        for (int t = 0; t < config.candidates_number; ++t) {\n            int j = context.candidates[i * config.candidates_number + t];\n            calc_potential_inplace(config, context, i, j);\n        }\n        // self-potential is zero; prevents accidental self-selection\n        context.potential[i * config.cities_number + i] = 0.0;\n    }\n\n    // running simulations and trying to improve\n    int improved_times = 0;\n\n    while (improve_by_k_opt_move(config, context, max_k_opt_depth)) { ++improved_times; };\n\n    return improved_times;\n}\n@@@\n\n* include/additional.hpp *:\n@@@\n#pragma once\n\n\n// This file was specifically created for additional methods, implementations and functions that you can try to improve either time or path length metrics.\n@@@\n\n* TSP.cpp *:\n@@@\n// standart imports\n#include <string>\n#include <chrono>\n#include <fstream>\n#include <iomanip>\n#include <iostream>\n\n// json imports\n#include \"include/json.hpp\"\n\nusing json = nlohmann::json;\nusing namespace std::chrono;\n\n// other imports\n#include \"include/context.hpp\"\n#include \"include/utils.hpp\"\n#include \"include/random_solution.hpp\"\n#include \"include/local_2_opt_search.hpp\"\n#include \"include/local_k_opt_search.hpp\"\n\n// additional functions & methods\n#include \"include/additional.hpp\"\n\n\n// --- config parameters ---\n//   `cities_number`: number of points on the 2D surface.\n//   `input_path`: path to the file with cities coordinates and the edge heat map.\n//   `output_path`: path to the file where to write the optimal hamiltonian cycle and corresponding metrics.\n//   `use_heat_map_as_initial_weights`: whether to use the heat map as initial for the weights matrix.\n//   `candidates_source`: 'knn' or 'heat_map', if 'heat_map' the candidates for each city are the nearest cities to it.\n//   `candidates_number`: number of candidate cities for each city.\n//   `max_k_opt_depth`: maximum chain links (k parameter) in simulation.\n//   `random_k_opt_depth_after_first_iteration`: if to randomly change the `max_k_opt_depth` after the first iteration (restart).\n//   `min_potential_to_consider`: minimum potential of an edge to consider it in simulation (look at the formula for potential to understand fully).\n//   `exploration_coefficient`: hyperparameter for exploration.\n//   `weight_delta_coefficient`: hyperparameter for updating the weights matrix.\n//   `sensitivity_temperature`: hyperparameter for controlling the weight decrease in unsuccessfull simulation depending on the length of a chain.\n//   `max_k_opt_simulations_without_improve_to_stop`: the number of MCTS simulations per restart.\n//   `restarts_number`: number of times algorithm restarts while maintaining the weights matrix (number of iterations).\n//   `distance_type`: \"int32\", \"int64\" or \"double\".\n//   `magnify_rate`: when `distance_type` is \"int32\" or \"int64\" algorithm relies only on integers to find an optimal solution (for speed), therefore each distance is magnified by `magnify_rate` value and rounded to integer. (if `distance_type` = 'double' this parameter is ignored)\n\n\nvoid read_input_data(const Config& config, Context& context) {\n    std::ifstream input_file(config.input_path);\n\n    int cities_number; input_file >> cities_number;\n\n    // reading coordinates\n    for (int i = 0; i < config.cities_number; ++i) {\n        input_file >> context.coordinates_double_x[i] >> context.coordinates_double_y[i];\n\n        if (config.distance_type == DistanceType::Int32) {\n            context.coordinates_int32_x[i] = static_cast<int>(0.5 + context.coordinates_double_x[i] * config.magnify_rate);\n            context.coordinates_int32_y[i] = static_cast<int>(0.5 + context.coordinates_double_y[i] * config.magnify_rate);\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            context.coordinates_int64_x[i] = static_cast<long long>(0.5 + context.coordinates_double_x[i] * config.magnify_rate);\n            context.coordinates_int64_y[i] = static_cast<long long>(0.5 + context.coordinates_double_y[i] * config.magnify_rate);\n        }\n    }\n\n    // calculating distances\n    for (int i = 0; i < config.cities_number; ++i) {\n        for (int j = 0; j < config.cities_number; ++j) {\n            context.distance_double[i * config.cities_number + j] = calc_distance_double(context, i, j);\n            if (config.distance_type == DistanceType::Int32) {\n                context.distance_int32[i * config.cities_number + j] = calc_distance_int32(context, i, j);\n            }\n            if (config.distance_type == DistanceType::Int64) {\n                context.distance_int64[i * config.cities_number + j] = calc_distance_int64(context, i, j);\n            }\n        }\n    }\n\n    if (config.use_heat_map_as_initial_weights) {\n        // reading heat map\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            input_file >> context.heat_map[i];\n            context.weight[i] = context.heat_map[i];\n        }\n    } else {\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            context.weight[i] = 0.0;\n        }\n    }\n\n    // calculating candidates\n    if (config.candidates_source == CandidatesSource::KNN) {\n        identify_candidates_for_each_node(config, context, context.distance_double, false);\n    } else if (config.candidates_source == CandidatesSource::HeatMap) {\n        identify_candidates_for_each_node(config, context, context.heat_map, true);\n    } else {\n        throw std::invalid_argument(\"Unknown candidates source.\");\n    }\n}\n\n\nvoid solve(const Config& config, Context& context) {  // the found solution will be stored in context.solution\n    // initialization\n    std::chrono::time_point<std::chrono::high_resolution_clock> start_total_time = high_resolution_clock::now(), end_total_time;\n    std::chrono::time_point<std::chrono::high_resolution_clock> start_time, end_time;\n\n    int max_k_opt_depth = config.max_k_opt_depth;\n\n    // BHH-based early stopping threshold: E[L*_n] \u2248 \u03b2_2 sqrt(n * area), \u03b2_2 \u2248 0.7120\n    double min_x = context.coordinates_double_x[0], max_x = context.coordinates_double_x[0];\n    double min_y = context.coordinates_double_y[0], max_y = context.coordinates_double_y[0];\n    for (int p = 1; p < config.cities_number; ++p) {\n        if (context.coordinates_double_x[p] < min_x) min_x = context.coordinates_double_x[p];\n        if (context.coordinates_double_x[p] > max_x) max_x = context.coordinates_double_x[p];\n        if (context.coordinates_double_y[p] < min_y) min_y = context.coordinates_double_y[p];\n        if (context.coordinates_double_y[p] > max_y) max_y = context.coordinates_double_y[p];\n    }\n    double width = std::max(1e-12, max_x - min_x);\n    double height = std::max(1e-12, max_y - min_y);\n    const double bhh_target = expected_tsp_length_2d(config.cities_number, width, height);\n    const double stop_threshold = bhh_target * 1.03; // 3% above expectation\n\n\tfor (int i = 1; i < config.restarts_number + 1; ++i) {\n        if (i % 100 == 0) { std::cout << \"# --------- Iteration: \" << i << '\\n'; }\n        int improved_times_2opt = 0;\n        int improved_times_kopt = 0;\n\n        // random solution\n        start_time = high_resolution_clock::now();\n        generate_random_solution(config, context);\n        convert_solution_to_path(config, context);\n        end_time = high_resolution_clock::now();\n\n        calc_and_save_total_distance(config, context);\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #1 (random cycle). Total distance: \" << context.path_distance_double << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // local 2opt search\n        start_time = high_resolution_clock::now();\n\t\timproved_times_2opt = local_2_opt_search(config, context);\n        end_time = high_resolution_clock::now();\n\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #2 (local 2'opt search). Total distance: \" << context.path_distance_double << \", Improved times: \" << improved_times_2opt << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // local k opt search\n        start_time = high_resolution_clock::now();\n\t\timproved_times_kopt = local_k_opt_search(config, context, max_k_opt_depth);\n        end_time = high_resolution_clock::now();\n\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #3 (local k'opt search). Total distance: \" << context.path_distance_double << \", Improved times: \" << improved_times_kopt << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // changing the best path\n        if (\n            (config.distance_type == DistanceType::Double && context.path_distance_double < context.best_path_distance_double) ||\n            (config.distance_type == DistanceType::Int32 && context.path_distance_int32 < context.best_path_distance_int32) ||\n            (config.distance_type == DistanceType::Int64 && context.path_distance_int64 < context.best_path_distance_int64)\n        ) {\n            store_path_as_best(config, context);  // also updates best path distance\n        }\n\n        // Early stop when close to BHH expectation (saves a lot of wall-clock without hurting quality on uniform inputs)\n        if (context.best_path_distance_double <= stop_threshold) {\n            if (i % 100 == 0) { std::cout << \"Early stop: reached BHH threshold \" << stop_threshold << \"\\n\"; }\n            break;\n        }\n\n        // Adaptive k depth: expand if k-opt stagnates, contract if it finds small gains.\n        if (i > 1) {\n            if (improved_times_kopt == 0) {\n                max_k_opt_depth = std::min(max_k_opt_depth + 8, config.cities_number / 2);\n            } else if (improved_times_kopt < 5) {\n                max_k_opt_depth = std::max(12, max_k_opt_depth - 4);\n            }\n        }\n        // When close to BHH expectation, cap depth to save wall-clock.\n        if (context.path_distance_double <= bhh_target * 1.06) {\n            if (max_k_opt_depth > 24) max_k_opt_depth = 24;\n        }\n\n        if (i % 100 == 0) { std::cout << '\\n'; }\n\t}\n\n    // final convertation (context.best_path to context.solution)\n    restore_best_path(config, context);\n    convert_path_to_solution(config, context);\n\n    end_total_time = high_resolution_clock::now();\n    std::cout << \"Total elapsed time: \" << static_cast<double>(duration_cast<milliseconds>(end_total_time - start_total_time).count()) / 1000 << \" sec\\n\\n\";\n}\n\n\nint main(int argc, char** argv) {\n    // reading configuration\n    std::cout << \"Reading configuration...\\n\";\n    if (argc != 2) {\n        std::cerr << \"Usage: The first and only argument should be the path to the config file.\";\n        return 1;\n    }\n    \n    std::ifstream config_file(argv[1]);\n    json config_raw; config_file >> config_raw;\n    Config config(config_raw);\n\n    std::cout << \"Number of cities: \" << config.cities_number << \"\\n\\n\";\n\n    // initialization & memory allocation\n    Context context(config);\n\n    // reading input data\n    std::cout << \"Reading input data...\\n\";\n    read_input_data(config, context);\n\n    // solving\n    std::cout << \"Solving...\\n\";\n    solve(config, context);\n\n    // printing the solution\n    std::ofstream output_file(config.output_path);\n\n    std::cout << \"Final solution:\\n\";\n    for (int i = 0; i < config.cities_number; ++i) {\n        std::cout << context.solution[i] << ' ';\n        output_file << context.solution[i] << ' ';\n    }\n    std::cout << \"\\n\\nFinal solution score: \" << calc_total_distance_double(config, context) << '\\n';\n\n    return 0;\n}\n@@@\n\n* config.json *:\n@@@\n{\n    \"cities_number\": 200,\n    \"input_path\": \"/Users/dark-creator/solomon/self/openevolve-usage/UTSP/UTSP-AlphaEvolve/UTSP/sample_input.txt\",\n    \"output_path\": \"/Users/dark-creator/solomon/self/openevolve-usage/UTSP/UTSP-AlphaEvolve/UTSP/sample_output.txt\",\n    \"use_heat_map_as_initial_weights\": true,\n    \"candidates_source\": \"knn\",\n    \"candidates_number\": 32,\n    \"max_k_opt_depth\": 48,\n    \"random_k_opt_depth_after_first_iteration\": false,\n    \"min_potential_to_consider\": 0.0,\n    \"exploration_coefficient\": 0.50,\n    \"weight_delta_coefficient\": 6.0,\n    \"sensitivity_temperature\": 1.6,\n    \"max_k_opt_simulations_without_improve_to_stop\": 120,\n    \"restarts_number\": 750,\n    \"distance_type\": \"double\",\n    \"magnify_rate\": 1000000\n}\n@@@", "language": "python", "parent_id": "a5f4bcec-1934-4fcb-b75b-4b4377fbd140", "generation": 3, "timestamp": 1759952072.5519621, "iteration_found": 12, "metrics": {"heat_map_train_time_elapsed": 0.7795749169890769, "average_heat_map_inference_time_elapsed": 1.1036784003435969, "average_tsp_run_time_elapsed": 5.103659858826177, "average_path_length": 10.937390544318761, "path_length_variance": 0.051183965057121625, "combined_score": 0.028516890551909015}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 7 lines with 102 lines\nChange 2: 'const int starts = 4;                 // multi-start count (cheap, n=200)' to 'const int starts = 8;                 // more multi-starts; still cheap at n\u2248200'\nChange 3: '\"max_k_opt_depth\": 89,' to '\"max_k_opt_depth\": 48,'\nChange 4: '\"max_k_opt_simulations_without_improve_to_stop\": 150,' to '\"max_k_opt_simulations_without_improve_to_stop\": 120,'", "parent_metrics": {"heat_map_train_time_elapsed": 0.8015841250307858, "average_heat_map_inference_time_elapsed": 1.0908891959488756, "average_tsp_run_time_elapsed": 5.288773715580646, "average_path_length": 11.143734809999781, "path_length_variance": 0.04908806638280791, "combined_score": 0.003269996953802929}, "island": 0}, "prompts": {"diff_user": {"system": "You are an expert in the Traveling Salesman Problem (TSP).\nTask:\n  Recent papers (2024\u20132025) have proposed various approaches to the TSP. For example, the UTSP paper introduces a graph neural network (GNN) that generates an n\u00d7n heat map of edge probabilities, indicating how likely each edge is to be part of the optimal Hamiltonian cycle. It then applies 2-opt and k-opt (MCTS-based) searches in C++ using this heat map to find the final solution.\n\nHowever, a later paper (2025) questions the effectiveness of the heat map, showing that 2-opt and k-opt searches perform comparably well\u2014even without it\u2014achieving similar or better solution quality and faster runtime. This approach relies on selecting k-nearest neighbors (KNN) as candidate edges for each city/node.\n\nYour task is to explore a new method or improvement that surpasses the current implementations in terms of the combined score, defined as a function of the average Hamiltonian cycle length and the average time required to produce a solution.\n\nDo not modify the `cities_number` in config.json, as it will be automatically replaced with the appropriate value during testing. Also, do not modify the `input_path` or `output_path` parameters. All other parameters may be edited.\nAdditional information: all test cities were randomly generated within the square [0, 1] \u00d7 [0, 1] (as is standard in most papers). The number of test samples in a testing batch ranges from 32 to 128, depending on the value of cities_number.\n\nTimeouts (error if exceeds):\n  Heat map train: 360 seconds.\n  Heat map inference: 60 seconds per instance.\n  TSP compilation: 10 seconds.\n  TSP run: 60 seconds per instance.\n\nThe C++ program will be compiled using C++ 17 standart. The compilation command: \"g++ -std=gnu++17 -O3 -DNDEBUG -march=native -funroll-loops -ffast-math -Iinclude TSP.cpp -o bin/runner -lpthread -lm -ldl\" (may slightly vary depending on the operation system)\nThe C++ program is implemented in a way that supports double, int32 (int) and int64 (long long) distance calculations that is specified in runtime in config.json (that you can change).\n\nYou can \u2014 and probably should \u2014 write something to stdout for yourself. This stdout output will be shown to you in future calls.\n", "user": "# Current Program Information\n- Fitness: 0.0033\n- Feature coordinates: No feature coordinates\n- Focus areas: - Focus on improving fitness while maintaining diversity\n\n## Last Execution Output\n\n### heat_map_train_stdout\n```\nSample output to log\n\n```\n\n### heat_map_train_stderr\n```\n\n```\n\n### heat_map_inference_first_test_sample_stdout\n```\nSample output to log\n\n```\n\n### heat_map_inference_first_test_sample_stderr\n```\n\n```\n\n### tsp_run_first_test_sample_stdout\n```\nReading configuration...\nNumber of cities: 200\n\nReading input data...\nSolving...\n# --------- Iteration: 100\nPhase #1 (random cycle). Total distance: 22.740199, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 11.556463, Improved times: 270, Time: 1 ms\nPhase #3 (local k'opt search). Total distance: 11.556463, Improved times: 9, Time: 14 ms\n\n# --------- Iteration: 200\nPhase #1 (random cycle). Total distance: 22.454036, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 11.951059, Improved times: 253, Time: 3 ms\nPhase #3 (local k'opt search). Total distance: 11.951059, Improved times: 0, Time: 2 ms\n\n# --------- Iteration: 300\nPhase #1 (random cycle). Total distance: 22.883914, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 11.767945, Improved times: 296, Time: 1 ms\nPhase #3 (local k'opt search). Total distance: 11.767945, Improved times: 0, Time: 3 ms\n\n# --------- Iteration: 400\nPhase #1 (random cycle). Total distance: 22.866953, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 11.988342, Improved times: 272, Time: 1 ms\nPhase #3 (local k'opt search). Total distance: 11.988342, Improved times: 1, Time: 1 ms\n\n# --------- Iteration: 500\nPhase #1 (random cycle). Total distance: 22.065167, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 12.061393, Improved times: 251, Time: 3 ms\nPhase #3 (local k'opt search). Total distance: 12.061393, Improved times: 6, Time: 1 ms\n\n# --------- Iteration: 600\nPhase #1 (random cycle). Total distance: 21.010293, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 11.67882, Improved times: 233, Time: 1 ms\nPhase #3 (local k'opt search). Total distance: 11.67882, Improved times: 1, Time: 0 ms\n\n# --------- Iteration: 700\nPhase #1 (random cycle). Total distance: 22.159576, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 11.758991, Improved times: 239, Time: 1 ms\nPhase #3 (local k'opt search). Total distance: 11.758991, Improved times: 5, Time: 2 ms\n\nTotal elapsed time: 5.007 sec\n\nFinal solution:\nn\nFinal solution score: 11.172735\n\n```\n\n### tsp_run_first_test_sample_stderr\n```\n\n```\n\n# Program Evolution History\n## Previous Attempts\n\n\n\n## Top Performing Programs\n\n\n\n\n\n# Current Program\n```python\n* heat_map_train.py *:\n@@@\nimport pathlib\n\nBASE_DIR = pathlib.Path(__file__).parent\n\n# torch & related imports\nimport numpy as np\nimport torch\n\n\n# You can train graph neural networks here (actually you can edit the whole file).\n# Save them in str(BASE_DIR / \"pretrained\") directory and use them in `heat_map_inference.py`.\n# But mind the training time, it should not exceed 5 minutes (python3.11, ubuntu 22.04, nvidia A100 40 GB GPU).\n\n# In the original UTSP paper the heat map matrix is used, but upon the closer look on the authors code, they did not use it (they used simple K nearest neighbours as candidates).\n# So, the SOTA metrics were achieved without a heat map matrix, but maybe GNN approach is not wrong by its nature, maybe if trained properly it can help 2'opt and k'opt algorithms to find the best solution faster.\n# Maybe it is better to just improve the c++ code and not try the heat map approach.\n\n# Possible GNN step (just in case, implement if you like, you can skip this if think it is not effective): hamiltonian cycle constraint, loss on exact 2 degree for each node, etc.\n\n\nif __name__ == \"__main__\":\n    print(\"Sample output to log\")\n@@@\n\n* heat_map_inference.py *:\n@@@\nimport os\nimport sys\nimport pathlib\nimport argparse\nimport numpy as np\n\nBASE_DIR = pathlib.Path(__file__).parent\nsys.path.append(str(BASE_DIR))\n\n# other imports\nfrom heat_map_train import *\n\n\ndef calc_heat_map(cities: np.ndarray) -> np.ndarray:\n    cities_number = cities.shape[0]\n\n    # You can call the pretrained model here (that was trained in `heat_map_train.py` and saved in str(BASE_DIR) / \"pretrained\")\n    # If you want to run some algorithm that is not trainable, then maybe it is better to implement it in TSP.cpp (just because it is faster in c++).\n\n    return np.zeros((cities_number, cities_number), dtype=float)\n\n\nif __name__ == \"__main__\":\n    p = argparse.ArgumentParser()\n    p.add_argument(\"--out\", required=True, help=\"Path to .npy to write the heat map.\")\n    args = p.parse_args()\n\n    # reading cities from stdin (mind the input format if you want to change this part, as your solution will be tested in an environment)\n    first_stdin_line = sys.stdin.readline().strip()\n    cities_number = int(first_stdin_line)\n    cities = np.loadtxt(sys.stdin, max_rows=cities_number)  # of shape (cities_number, 2)\n\n    # calculating heat map\n    heat_map = calc_heat_map(cities).astype(np.float32, copy=False)\n    print(\"Sample output to log\")\n\n    # writing heat map atomically to out .npy file (mind the output format if you want to change this part, as your solution will be tested in an environment)\n    tmp_path = args.out + \".tmp\"\n\n    with open(tmp_path, \"wb\") as output_temp_file:\n        np.save(output_temp_file, heat_map, allow_pickle=False)  # no auto \u201c.npy\u201d added\n        output_temp_file.flush()\n        os.fsync(output_temp_file.fileno())\n    \n    os.replace(tmp_path, args.out)\n@@@\n\n* include/utils.hpp *:\n@@@\n#pragma once\n\n// standart imports\n#include <queue>\n#include <cmath>\n#include <numeric>\n#include <algorithm>\n\n\nconstexpr double BHH_CONSTANT_2D = 0.7120;  // Beardwood\u2013Halton\u2013Hammersley (BHH) constant\n\n\nlong long int64_sqrt(long long value) {\n    if (value <= 0) return 0LL;  // clamp negatives to 0\n    if (value < 2) return value;\n\n    constexpr long long MAX_SQRT_LL = 3037000499LL;\n\n    long long left = 1;\n    long long right = std::min<long long>(value, MAX_SQRT_LL);\n    long long floor_root = 1;\n\n    while (left <= right) {\n        long long candidate = left + (right - left) / 2;\n\n        if (candidate <= value / candidate) {\n            floor_root = candidate;\n            left = candidate + 1;\n        } else {\n            right = candidate - 1;\n        }\n    }\n    return floor_root;\n}\n\n\ndouble calc_distance_double(Context& context, int i, int j) {\n    if (i == j) { return inf_double; }\n    double diff_x = (context.coordinates_double_x[i] - context.coordinates_double_x[j]);\n    double diff_y = (context.coordinates_double_y[i] - context.coordinates_double_y[j]);\n    return sqrt(diff_x * diff_x + diff_y * diff_y);\n}\n\nint calc_distance_int32(Context& context, int i, int j) {\n    if (i == j) { return inf_int32; }\n    long long diff_x = static_cast<long long>(context.coordinates_int32_x[i] - context.coordinates_int32_x[j]);\n    long long diff_y = static_cast<long long>(context.coordinates_int32_y[i] - context.coordinates_int32_y[j]);\n    return static_cast<int>(int64_sqrt(diff_x * diff_x + diff_y * diff_y));\n}\n\nlong long calc_distance_int64(Context& context, int i, int j) {\n    if (i == j) { return inf_int64; }\n    long long diff_x = context.coordinates_int64_x[i] - context.coordinates_int64_x[j];\n    long long diff_y = context.coordinates_int64_y[i] - context.coordinates_int64_y[j];\n    return int64_sqrt(diff_x * diff_x + diff_y * diff_y);\n}\n\n\ndouble get_distance_double(const Config& config, Context& context, int i, int j) {\n    return context.distance_double[i * config.cities_number + j];\n}\n\nint get_distance_int32(const Config& config, Context& context, int i, int j) {\n    return context.distance_int32[i * config.cities_number + j];\n}\n\nlong long get_distance_int64(const Config& config, Context& context, int i, int j) {\n    return context.distance_int64[i * config.cities_number + j];\n}\n\n\ndouble calc_total_distance_double(const Config& config, Context& context) {\n    double total_distance = 0.0;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        total_distance += get_distance_double(config, context, i, context.path[i].next);\n    }\n\n    return total_distance;\n}\n\nint calc_total_distance_int32(const Config& config, Context& context) {\n    int total_distance = 0;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        total_distance += get_distance_int32(config, context, i, context.path[i].next);\n    }\n\n    return total_distance;\n}\n\nlong long calc_total_distance_int64(const Config& config, Context& context) {\n    long long total_distance = 0LL;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        total_distance += get_distance_int64(config, context, i, context.path[i].next);\n    }\n\n    return total_distance;\n}\n\n\nvoid calc_and_save_total_distance(const Config& config, Context& context) {\n    if (config.distance_type == DistanceType::Double) {\n        context.path_distance_double = calc_total_distance_double(config, context);\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        context.path_distance_int32 = calc_total_distance_int32(config, context);\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        context.path_distance_int64 = calc_total_distance_int64(config, context);\n    }\n}\n\n\nvoid identify_candidates_for_each_node(const Config& config, Context& context, const double* metric, bool is_reversed) {\n\tfor (int i = 0; i < config.cities_number; ++i) {\n        std::iota(context.buffer.begin(), context.buffer.end(), 0);  // 0..n-1\n\n        // Partition so first K are the best candidates\u2026\n        std::nth_element(context.buffer.begin(), context.buffer.begin() + config.candidates_number, context.buffer.end(), [&](int u, int v) {\n            if (i == u) { return false; }\n            if (i == v) { return true; }\n            return static_cast<bool>((metric[i * config.cities_number + u] < metric[i * config.cities_number + v]) ^ is_reversed);\n        });\n        // \u2026then sort those K so we iterate nearest-first in local search.\n        std::sort(context.buffer.begin(), context.buffer.begin() + config.candidates_number, [&](int u, int v) {\n            if (i == u) return false;\n            if (i == v) return true;\n            return static_cast<bool>((metric[i * config.cities_number + u] < metric[i * config.cities_number + v]) ^ is_reversed);\n        });\n\n\t\tfor (int j = 0; j < config.candidates_number; ++j) {\n\t\t\tcontext.candidates[i * config.candidates_number + j] = context.buffer[j];\n\t    }\n\t}\n}\n\n\nint get_random_int_by_module(int mod) {\n    if (mod <= 0) return 0;\n\treturn rand() % mod;\n}\n\n\nbool is_cities_same_or_adjacent(const Config& config, Context& context, int i, int j) {\n    return (i == j || context.path[i].next == j || context.path[j].next == i);\n}\n\n\nvoid reverse_sub_path(Context& context, int i, int j) {\n    int current_city = i;\n\n    while (true) {\n        std::swap(context.path[current_city].prev, context.path[current_city].next);\n\n        if (current_city == j) { return; }\n\n        current_city = context.path[current_city].prev;\n    }\n}\n\n\ndouble expected_tsp_length_2d(long long n, double width, double height) {\n    if (n <= 1 || width <= 0.0 || height <= 0.0) {\n        return 0.0;\n    }\n\n    double area = width * height;\n    double expected_length = BHH_CONSTANT_2D * std::sqrt(static_cast<double>(n) * area);\n    return expected_length;\n}\n@@@\n\n* include/context.hpp *:\n@@@\n#pragma once\n\n// standart imports\n#include <string>\n#include <vector>\n#include <limits>\n#include <iostream>\n\n\n// global variables declaration\nconstexpr int null = -1;\nconstexpr double e = 2.718281;\nconstexpr double inf_double = std::numeric_limits<double>::infinity();\nconstexpr int inf_int32 = std::numeric_limits<int>::max();\nconstexpr long long inf_int64 = std::numeric_limits<long long>::max();\n\n\nenum class CandidatesSource { KNN, HeatMap };\nenum class DistanceType { Int32, Int64, Double };\n\n\nstruct Config {\n    int cities_number;\n    std::string input_path;\n    std::string output_path;\n    bool use_heat_map_as_initial_weights;\n    CandidatesSource candidates_source;\n    int candidates_number;\n    int max_k_opt_depth;\n    bool random_k_opt_depth_after_first_iteration;\n    double min_potential_to_consider;\n    double exploration_coefficient;\n    double weight_delta_coefficient;\n    double sensitivity_temperature;\n    int max_k_opt_simulations_without_improve_to_stop;\n    int restarts_number;\n    DistanceType distance_type;\n    double magnify_rate;\n\n    Config(const json& config) {\n        cities_number = config[\"cities_number\"];\n        input_path = config[\"input_path\"];\n        output_path = config[\"output_path\"];\n        use_heat_map_as_initial_weights = config[\"use_heat_map_as_initial_weights\"];\n\n        if (config[\"candidates_source\"].get<std::string>() == \"knn\") {\n            candidates_source = CandidatesSource::KNN;\n        } else if (config[\"candidates_source\"].get<std::string>() == \"heat_map\") {\n            candidates_source = CandidatesSource::HeatMap;\n        } else {\n            throw std::invalid_argument(\"Unknown candidates source: '\" + config[\"candidates_source\"].get<std::string>() + \"'.\");\n        }\n\n        candidates_number = config[\"candidates_number\"];\n        max_k_opt_depth = config[\"max_k_opt_depth\"];\n        random_k_opt_depth_after_first_iteration = config[\"random_k_opt_depth_after_first_iteration\"];\n        min_potential_to_consider = config[\"min_potential_to_consider\"];\n        exploration_coefficient = config[\"exploration_coefficient\"];\n        weight_delta_coefficient = config[\"weight_delta_coefficient\"];\n        sensitivity_temperature = config[\"sensitivity_temperature\"];\n        max_k_opt_simulations_without_improve_to_stop = config[\"max_k_opt_simulations_without_improve_to_stop\"];\n        restarts_number = config[\"restarts_number\"];\n\n        if (config[\"distance_type\"].get<std::string>() == \"int32\") {\n            distance_type = DistanceType::Int32;\n        } else if (config[\"distance_type\"].get<std::string>() == \"int64\") {\n            distance_type = DistanceType::Int64;\n        } else if (config[\"distance_type\"].get<std::string>() == \"double\") {\n            distance_type = DistanceType::Double;\n        } else {\n            throw std::invalid_argument(\"Unknown distance type: '\" + config[\"distance_type\"].get<std::string>() + \"'.\");\n        }\n\n        magnify_rate = config[\"magnify_rate\"];\n\n        // warnings\n        if (distance_type == DistanceType::Double) {\n            if (cities_number > 1'000'000) {\n                std::cout << \"Warning: `cities_number` is greater than 1'000'000. Try to use with `distance_type` = 'int64' to avoid precision errors.\\n\";\n            }\n        } else {\n            if (magnify_rate < 10'000.0) {\n                std::cout << \"Warning: `magnify_rate` is better to take more than 10'000 when using with `distance_type` = 'int32' or 'int64'.\\n\";\n            }\n            if (distance_type == DistanceType::Int32 && static_cast<long long>(cities_number) * magnify_rate > 1'000'000'000) {\n                std::cout << \"Warning: distance might be out of bounds for a 32 bit integer. Consider switching to doubles for distance calculation or using 64 bit integers.\\n\";\n            }\n            if (distance_type == DistanceType::Int64 && magnify_rate > 1'000'000'000) {\n                std::cout << \"Warning: distance might be out of bounds for a 64 bit integer. Consider switching to doubles for distance calculation.\\n\";\n            }\n        }\n    }\n};\n\n\nstruct City {\n  int prev;\n  int next;\n};\n\n\nstruct Context {\n    // coordinates\n    double* coordinates_double_x = nullptr;\n    double* coordinates_double_y = nullptr;\n\n    int* coordinates_int32_x = nullptr;\n    int* coordinates_int32_y = nullptr;\n\n    long long* coordinates_int64_x = nullptr;\n    long long* coordinates_int64_y = nullptr;\n\n    // distances\n    double* distance_double = nullptr;\n    int* distance_int32 = nullptr;\n    long long* distance_int64 = nullptr;\n\n    // weights\n    double* heat_map = nullptr;\n    double* weight = nullptr;\n    double* potential = nullptr;\n\n    // candidates\n    int* candidates = nullptr;\n\n    // local k opt search\n    int* pairs = nullptr;\n    long long* chosen_times = nullptr;\n    long long total_simulations = 0;\n\n    // path\n    City* path = nullptr;\n    double path_distance_double = inf_double;\n    int path_distance_int32 = inf_int32;\n    long long path_distance_int64 = inf_int64;\n\n    City* best_path = nullptr;\n    double best_path_distance_double = inf_double;\n    int best_path_distance_int32 = inf_int32;\n    long long best_path_distance_int64 = inf_int64;\n\n    int* solution;\n    std::vector<bool> is_city_selected;\n\n    // other utils/tmp variables\n    std::vector<int> buffer;\n\n    Context(const Config& config) : buffer(config.cities_number, 0), is_city_selected(config.cities_number, false) {\n        coordinates_double_x = new double[config.cities_number];\n        coordinates_double_y = new double[config.cities_number];\n\n        if (config.distance_type == DistanceType::Int32) {\n            coordinates_int32_x = new int[config.cities_number];\n            coordinates_int32_y = new int[config.cities_number];\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            coordinates_int64_x = new long long[config.cities_number];\n            coordinates_int64_y = new long long[config.cities_number];\n        }\n\n        distance_double = new double[config.cities_number * config.cities_number];\n        if (config.distance_type == DistanceType::Int32) {\n            distance_int32 = new int[config.cities_number * config.cities_number];\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            distance_int64 = new long long[config.cities_number * config.cities_number];\n        }\n\n        if (config.use_heat_map_as_initial_weights) {\n            heat_map = new double[config.cities_number * config.cities_number];\n        }\n        weight = new double[config.cities_number * config.cities_number];\n        potential = new double[config.cities_number * config.cities_number];\n\n        candidates = new int[config.cities_number * config.candidates_number];\n\n        pairs = new int[config.cities_number];  // because currently we have a random k opt depth change option\n        chosen_times = new long long[config.cities_number * config.cities_number];\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            chosen_times[i] = 0;\n        }\n\n        path = new City[config.cities_number];\n        best_path = new City[config.cities_number];\n        solution = new int[config.cities_number];\n    }\n\n    ~Context() {\n        delete[] coordinates_double_x;\n        delete[] coordinates_double_y;\n\n        if (coordinates_int32_x) { delete[] coordinates_int32_x; }\n        if (coordinates_int32_y) { delete[] coordinates_int32_y; }\n\n        if (coordinates_int64_x) { delete[] coordinates_int64_x; }\n        if (coordinates_int64_y) { delete[] coordinates_int64_y; }\n\n        delete[] distance_double;\n        if (distance_int32) { delete[] distance_int32; }\n        if (distance_int64) { delete[] distance_int64; }\n\n        if (heat_map) { delete[] heat_map; }\n        delete[] weight;\n        delete[] potential;\n\n        delete[] candidates;\n\n        delete[] pairs;\n        delete[] chosen_times;\n\n        delete[] path;\n        delete[] best_path;\n        delete[] solution;\n    }\n};\n\n\nvoid convert_solution_to_path(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        int current_city = context.solution[i];\n\n        context.path[current_city].prev = context.solution[(i + config.cities_number - 1) % config.cities_number];\n        context.path[current_city].next = context.solution[(i + 1) % config.cities_number];\n    }\n}\n\nvoid convert_path_to_solution(const Config& config, Context& context) {\n    int current_city = 0;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.solution[i] = current_city;\n\n        current_city = context.path[current_city].next;\n    }\n}\n\nvoid store_path_as_best(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.best_path[i].prev = context.path[i].prev;\n        context.best_path[i].next = context.path[i].next;\n    }\n\n    if (config.distance_type == DistanceType::Double) {\n        context.best_path_distance_double = context.path_distance_double;\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        context.best_path_distance_int32 = context.path_distance_int32;\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        context.best_path_distance_int64 = context.path_distance_int64;\n    }\n}\n\nvoid restore_best_path(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.path[i].prev = context.best_path[i].prev;\n        context.path[i].next = context.best_path[i].next;\n    }\n}\n@@@\n\n* include/random_solution.hpp *:\n@@@\n#pragma once\n\n\n// * The following functions are used to randomly generate an initial solution.\n// * Starting from an arbitrarily chosen city, it iteratively selects a random city until forming a complete TSP tour.\n\n\nint select_random_city(const Config& config, Context& context) {\n\tint random_start = get_random_int_by_module(config.cities_number);\n\n\tfor (int i = 0; i < config.cities_number; ++i) {\n\t\tint city = (random_start + i) % config.cities_number;\n\n\t\tif (!context.is_city_selected[city]) {\n\t\t\treturn city;\n\t\t}\n\t}\n\n\treturn null;\n}\n\nvoid generate_random_solution(const Config& config, Context& context) {\n\t// GRASP-style KNN constructor with multi-start and distance-biased sampling.\n\t// Builds several candidate tours and keeps the best (shortest) one.\n\t// This yields far better starting tours than pure random chains,\n\t// cutting downstream 2-opt/k-opt time and improving final quality.\n\n\tconst int n = config.cities_number;\n\tconst int starts = 4;                 // multi-start count (cheap, n=200)\n\tconst int topL  = std::min(8, config.candidates_number);  // RCL cap\n\tconst double eps = 1e-12;\n\n\tfor (int i = 0; i < n; ++i) {\n\t\tcontext.solution[i] = null;\n\t\tcontext.is_city_selected[i] = false;\n\t}\n\n\tdouble best_len = std::numeric_limits<double>::infinity();\n\tstd::vector<int> best_sol(n);\n\n\tfor (int s = 0; s < starts; ++s) {\n\t\tstd::vector<int> sol(n, null);\n\t\tstd::vector<char> used(n, 0);\n\n\t\tint current = select_random_city(config, context);\n\t\tsol[0] = current;\n\t\tused[current] = 1;\n\t\tdouble len = 0.0;\n\n\t\tfor (int pos = 1; pos < n; ++pos) {\n\t\t\t// Build restricted candidate list (up to topL nearest unvisited from KNN)\n\t\t\tint rcl_idx[8];\n\t\t\tdouble rcl_dist[8];\n\t\t\tint rsz = 0;\n\n\t\t\tfor (int t = 0; t < config.candidates_number; ++t) {\n\t\t\t\tint cand = context.candidates[current * config.candidates_number + t];\n\t\t\t\tif (cand == current || used[cand]) continue;\n\n\t\t\t\tdouble d = get_distance_double(config, context, current, cand);\n\n\t\t\t\t// keep a sorted list of size<=topL by distance\n\t\t\t\tif (rsz < topL) {\n\t\t\t\t\trcl_idx[rsz] = cand;\n\t\t\t\t\trcl_dist[rsz] = d;\n\t\t\t\t\t++rsz;\n\n\t\t\t\t\tfor (int k = rsz - 1; k > 0; --k) {\n\t\t\t\t\t\tif (rcl_dist[k] < rcl_dist[k - 1]) {\n\t\t\t\t\t\t\tstd::swap(rcl_dist[k], rcl_dist[k - 1]);\n\t\t\t\t\t\t\tstd::swap(rcl_idx[k], rcl_idx[k - 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (d < rcl_dist[rsz - 1]) {\n\t\t\t\t\trcl_dist[rsz - 1] = d;\n\t\t\t\t\trcl_idx[rsz - 1] = cand;\n\t\t\t\t\tfor (int k = rsz - 1; k > 0; --k) {\n\t\t\t\t\t\tif (rcl_dist[k] < rcl_dist[k - 1]) {\n\t\t\t\t\t\t\tstd::swap(rcl_dist[k], rcl_dist[k - 1]);\n\t\t\t\t\t\t\tstd::swap(rcl_idx[k], rcl_idx[k - 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint next_city = null;\n\t\t\tif (rsz > 0) {\n\t\t\t\t// Distance-biased roulette: p \u221d 1 / d\n\t\t\t\tdouble wsum = 0.0;\n\t\t\t\tfor (int k = 0; k < rsz; ++k) wsum += 1.0 / (rcl_dist[k] + eps);\n\t\t\t\tdouble r = (static_cast<double>(rand()) / RAND_MAX) * wsum;\n\t\t\t\tfor (int k = 0; k < rsz; ++k) {\n\t\t\t\t\tr -= 1.0 / (rcl_dist[k] + eps);\n\t\t\t\t\tif (r <= 0.0) { next_city = rcl_idx[k]; break; }\n\t\t\t\t}\n\t\t\t\tif (next_city == null) next_city = rcl_idx[rsz - 1]; // numeric fallback\n\t\t\t} else {\n\t\t\t\t// Fallback: global nearest unvisited\n\t\t\t\tdouble best_d = std::numeric_limits<double>::infinity();\n\t\t\t\tfor (int cand = 0; cand < n; ++cand) {\n\t\t\t\t\tif (used[cand]) continue;\n\t\t\t\t\tdouble d = get_distance_double(config, context, current, cand);\n\t\t\t\t\tif (d < best_d) { best_d = d; next_city = cand; }\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlen += get_distance_double(config, context, current, next_city);\n\t\t\tcurrent = next_city;\n\t\t\tsol[pos] = current;\n\t\t\tused[current] = 1;\n\t\t}\n\t\t// close the tour\n\t\tlen += get_distance_double(config, context, sol[n - 1], sol[0]);\n\n\t\tif (len < best_len) {\n\t\t\tbest_len = len;\n\t\t\tbest_sol = sol;\n\t\t}\n\t}\n\n\t// output the best found start\n\tfor (int i = 0; i < n; ++i) context.solution[i] = best_sol[i];\n\tfor (int i = 0; i < n; ++i) context.is_city_selected[i] = false; // clean flags\n}\n@@@\n\n* include/local_2_opt_search.hpp *:\n@@@\n#pragma once\n\n\nbool apply_2_opt_move(const Config& config, Context& context, int i, int j) {\n    if (is_cities_same_or_adjacent(config, context, i, j)) { return false; }\n\n    int i_next = context.path[i].next;\n\tint j_next = context.path[j].next;\n\n    ++context.chosen_times[i * config.cities_number + j];\n\t++context.chosen_times[j * config.cities_number + i];\n\t++context.chosen_times[i_next * config.cities_number + j_next];\n\t++context.chosen_times[j_next * config.cities_number + i_next];\n\n    ++context.total_simulations;\n\n    // calculating delta\n    bool apply_move = false;\n    double weight_increase = 0.0;\n\n    if (config.distance_type == DistanceType::Double) {\n        double delta = get_distance_double(config, context, i, i_next) + get_distance_double(config, context, j, j_next) - get_distance_double(config, context, i, j) - get_distance_double(config, context, i_next, j_next);\n        if (delta > 0.0) {\n            apply_move = true;\n            weight_increase = config.weight_delta_coefficient * (pow(e, delta / context.path_distance_double) - 1);\n            context.path_distance_double -= delta;\n        }\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        int delta = get_distance_int32(config, context, i, i_next) + get_distance_int32(config, context, j, j_next) - get_distance_int32(config, context, i, j) - get_distance_int32(config, context, i_next, j_next);\n        if (delta > 0) {\n            apply_move = true;\n            weight_increase = config.weight_delta_coefficient * (pow(e, static_cast<double>(delta) / context.path_distance_int32) - 1);\n            context.path_distance_int32 -= delta;\n        }\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        long long delta = get_distance_int64(config, context, i, i_next) + get_distance_int64(config, context, j, j_next) - get_distance_int64(config, context, i, j) - get_distance_int64(config, context, i_next, j_next);\n        if (delta > 0) {\n            apply_move = true;\n            weight_increase = config.weight_delta_coefficient * (pow(e, static_cast<double>(delta) / context.path_distance_int64) - 1);\n            context.path_distance_int64 -= delta;\n        }\n    }\n\n    if (apply_move) {\n        // applying 2 opt move\n        reverse_sub_path(context, i_next, j);\n\n        context.path[i].next = j;\n        context.path[i_next].next = j_next;\n        context.path[j].prev = i;\n        context.path[j_next].prev = i_next;\n\n        // updating weights\n        context.weight[i * config.cities_number + j] += weight_increase;\n        context.weight[j * config.cities_number + i] += weight_increase;\n        context.weight[i_next * config.cities_number + j_next] += weight_increase;\n        context.weight[j_next * config.cities_number + i_next] += weight_increase;\n\n        return true;\n    }\n    return false;\n}\n\n\nbool improve_by_2_opt_move(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n\t\tfor (int j = 0; j < config.candidates_number; ++j) {\n\t\t\tint candidate = context.candidates[i * config.candidates_number + j];\n\n\t\t\tif (apply_2_opt_move(config, context, i, candidate)) { return true; }\n\t\t}\n\t}\n    return false;\n}\n\nint local_2_opt_search(const Config& config, Context& context) {\n    int improved_times = 0;\n\n    while (improve_by_2_opt_move(config, context)) { ++improved_times; };\n\n    return improved_times;\n}\n@@@\n\n* include/local_k_opt_search.hpp *:\n@@@\n#pragma once\n\n// standart imports\n#include <cmath>\n#include <iostream>\n\n\nvoid calc_potential_inplace(const Config& config, Context& context, int i, int j) {\n    if (i == j) {\n        context.potential[i * config.cities_number + j] = 0.0;\n        return;\n    }\n\n    double weight = context.weight[i * config.cities_number + j];\n\n    // this forms a smooth ReLU function\n    if (weight < 0) { weight = pow(e, weight); }\n    else { weight += 1.0; }\n\n    context.potential[i * config.cities_number + j] = weight + config.exploration_coefficient * sqrt(log(context.total_simulations + 1) / (context.chosen_times[i * config.cities_number + j] + 1));  // always a positive value\n}\n\nint get_candidate_proportionally_by_potential(const Config& config, Context& context, int current_city, int start_city) {\n    int next_city = context.path[current_city].next;\n\n\tdouble total_potential = 0.0;\n    int candidates_available = 0;\n\n\tfor (int i = 0; i < config.candidates_number; ++i) {\n        int candidate = context.candidates[current_city * config.candidates_number + i];\n        double potential = context.potential[current_city * config.cities_number + candidate];\n\n        if (candidate == next_city || candidate == start_city || (potential < config.min_potential_to_consider)) { continue; }  // not available\n\n\t\ttotal_potential += potential;\n        ++candidates_available;\n\t}\n\n    if (candidates_available == 0) { return null; }\n\n    // choosing the random available candidate proportionally\n    double random_potential = (static_cast<double>(rand()) / RAND_MAX) * total_potential;\n\n\tfor (int i = 0; i < config.candidates_number; ++i) {\n        int candidate = context.candidates[current_city * config.candidates_number + i];\n        double potential = context.potential[current_city * config.cities_number + candidate];\n\n        if (candidate == next_city || candidate == start_city || (potential < config.min_potential_to_consider)) { continue; }  // not available\n\n        random_potential -= potential;\n        if (random_potential <= 0) { return candidate; }\n    }\n\n\treturn null;\n}\n\n\nbool apply_k_opt_move(const Config& config, Context& context, int start_city, int max_k_opt_depth) {\n    ++context.total_simulations;\n\n    // first pair\n    int next_to_start_city = context.path[start_city].next;\n\n    context.pairs[0] = start_city;\n    context.pairs[1] = next_to_start_city;\n    int depth = 1;\n\n    // breaking an edge of the first pair\n    context.path[start_city].next = null;\n    context.path[next_to_start_city].prev = null;\n\n    // initializing gains\n    double gain_double; double gain_double_with_closure = 0.0;\n    int gain_int32; int gain_int32_with_closure = 0;\n    long long gain_int64; long long gain_int64_with_closure = 0;\n\n    if (config.distance_type == DistanceType::Double) {\n        gain_double = get_distance_double(config, context, start_city, next_to_start_city);\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        gain_int32 = get_distance_int32(config, context, start_city, next_to_start_city);\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        gain_int64 = get_distance_int64(config, context, start_city, next_to_start_city);\n    }\n\n    bool apply_move = false;\n    double weight_increase = 0.0;\n\n    int current_city = next_to_start_city;\n\n    for (int i = 1; i < max_k_opt_depth; ++i) {\n        int proposed_city = get_candidate_proportionally_by_potential(config, context, current_city, start_city);\n\n        if (proposed_city == null) { return false; }  // no candidates, could not improve\n\n        ++context.chosen_times[current_city * config.cities_number + proposed_city];\n\t\t++context.chosen_times[proposed_city * config.cities_number + current_city];\n\n        int proposed_city_link = context.path[proposed_city].prev;  // city to disconnect from the proposed city (and maybe to connect to the start city)\n\n        context.pairs[2 * i] = proposed_city;\n        context.pairs[2 * i + 1] = proposed_city_link;\n        ++depth;\n\n        // applying 2 opt move\n        reverse_sub_path(context, current_city, proposed_city_link);\n\n        context.path[current_city].next = proposed_city;\n        context.path[proposed_city].prev = current_city;\n        context.path[proposed_city_link].prev = null;\n\n        // recalculating gains\n        if (config.distance_type == DistanceType::Double) {\n            gain_double += get_distance_double(config, context, proposed_city_link, proposed_city) - get_distance_double(config, context, current_city, proposed_city);\n            gain_double_with_closure = gain_double - get_distance_double(config, context, start_city, proposed_city_link);\n\n            weight_increase = config.weight_delta_coefficient * (pow(e, gain_double_with_closure / context.path_distance_double) - 1);\n\n            if (gain_double_with_closure > 0.0) {\n                apply_move = true;\n                context.path_distance_double -= gain_double_with_closure;\n            }\n        }\n        if (config.distance_type == DistanceType::Int32) {\n            gain_int32 += get_distance_int32(config, context, proposed_city_link, proposed_city) - get_distance_int32(config, context, current_city, proposed_city);\n            gain_int32_with_closure = gain_int32 - get_distance_int32(config, context, start_city, proposed_city_link);\n\n            weight_increase = config.weight_delta_coefficient * (pow(e, static_cast<double>(gain_int32_with_closure) / context.path_distance_int32) - 1);\n\n            if (gain_int32_with_closure > 0) {\n                apply_move = true;\n                context.path_distance_int32 -= gain_int32_with_closure;\n            }\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            gain_int64 += get_distance_int64(config, context, proposed_city_link, proposed_city) - get_distance_int64(config, context, current_city, proposed_city);\n            gain_int64_with_closure = gain_int64 - get_distance_int64(config, context, start_city, proposed_city_link);\n\n            weight_increase = config.weight_delta_coefficient * (pow(e, static_cast<double>(gain_int64_with_closure) / context.path_distance_int64) - 1);\n\n            if (gain_int64_with_closure > 0) {\n                apply_move = true;\n                context.path_distance_int64 -= gain_int64_with_closure;\n            }\n        }\n\n        if (apply_move) { break; }\n\n        current_city = proposed_city_link;\n    }\n\n    // updating weights\n    for (int i = 0; i < depth; ++i) {\n        int current_city = context.pairs[2 * i];\n        int proposed_city = (i < depth - 1) ? context.pairs[2 * i + 2] : start_city;\n\n        double factor = 1.0;\n        if (!apply_move) {\n            // exponential decrease in sensitivity\n            factor = pow(e, -i / config.sensitivity_temperature);\n        }\n\n        context.weight[current_city * config.cities_number + proposed_city] += weight_increase * factor;\n        context.weight[proposed_city * config.cities_number + current_city] += weight_increase * factor;\n    }\n\n    if (apply_move) {\n        int end_city = context.pairs[2 * depth - 1];\n\n        context.path[start_city].next = end_city;\n        context.path[end_city].prev = start_city;\n\n        return true;\n    }\n    return false;\n}\n\n\nbool improve_by_k_opt_move(const Config& config, Context& context, int max_k_opt_depth) {\n    for (int i = 0; i < config.max_k_opt_simulations_without_improve_to_stop; ++i) {\n        // saving current path\n        convert_path_to_solution(config, context);\n\n        int start_city = get_random_int_by_module(config.cities_number);\n        if (apply_k_opt_move(config, context, start_city, max_k_opt_depth)) { return true; }\n\n        // restoring the path that was before the move\n        convert_solution_to_path(config, context);\n    }\n\n    return false;\n}\n\nint local_k_opt_search(const Config& config, Context& context, int max_k_opt_depth) {\n    // calculating current potentials only for candidate edges (O(n*k) vs O(n^2))\n    for (int i = 0; i < config.cities_number; ++i) {\n        for (int t = 0; t < config.candidates_number; ++t) {\n            int j = context.candidates[i * config.candidates_number + t];\n            calc_potential_inplace(config, context, i, j);\n        }\n        // self-potential is zero; prevents accidental self-selection\n        context.potential[i * config.cities_number + i] = 0.0;\n    }\n\n    // running simulations and trying to improve\n    int improved_times = 0;\n\n    while (improve_by_k_opt_move(config, context, max_k_opt_depth)) { ++improved_times; };\n\n    return improved_times;\n}\n@@@\n\n* include/additional.hpp *:\n@@@\n#pragma once\n\n\n// This file was specifically created for additional methods, implementations and functions that you can try to improve either time or path length metrics.\n@@@\n\n* TSP.cpp *:\n@@@\n// standart imports\n#include <string>\n#include <chrono>\n#include <fstream>\n#include <iomanip>\n#include <iostream>\n\n// json imports\n#include \"include/json.hpp\"\n\nusing json = nlohmann::json;\nusing namespace std::chrono;\n\n// other imports\n#include \"include/context.hpp\"\n#include \"include/utils.hpp\"\n#include \"include/random_solution.hpp\"\n#include \"include/local_2_opt_search.hpp\"\n#include \"include/local_k_opt_search.hpp\"\n\n// additional functions & methods\n#include \"include/additional.hpp\"\n\n\n// --- config parameters ---\n//   `cities_number`: number of points on the 2D surface.\n//   `input_path`: path to the file with cities coordinates and the edge heat map.\n//   `output_path`: path to the file where to write the optimal hamiltonian cycle and corresponding metrics.\n//   `use_heat_map_as_initial_weights`: whether to use the heat map as initial for the weights matrix.\n//   `candidates_source`: 'knn' or 'heat_map', if 'heat_map' the candidates for each city are the nearest cities to it.\n//   `candidates_number`: number of candidate cities for each city.\n//   `max_k_opt_depth`: maximum chain links (k parameter) in simulation.\n//   `random_k_opt_depth_after_first_iteration`: if to randomly change the `max_k_opt_depth` after the first iteration (restart).\n//   `min_potential_to_consider`: minimum potential of an edge to consider it in simulation (look at the formula for potential to understand fully).\n//   `exploration_coefficient`: hyperparameter for exploration.\n//   `weight_delta_coefficient`: hyperparameter for updating the weights matrix.\n//   `sensitivity_temperature`: hyperparameter for controlling the weight decrease in unsuccessfull simulation depending on the length of a chain.\n//   `max_k_opt_simulations_without_improve_to_stop`: the number of MCTS simulations per restart.\n//   `restarts_number`: number of times algorithm restarts while maintaining the weights matrix (number of iterations).\n//   `distance_type`: \"int32\", \"int64\" or \"double\".\n//   `magnify_rate`: when `distance_type` is \"int32\" or \"int64\" algorithm relies only on integers to find an optimal solution (for speed), therefore each distance is magnified by `magnify_rate` value and rounded to integer. (if `distance_type` = 'double' this parameter is ignored)\n\n\nvoid read_input_data(const Config& config, Context& context) {\n    std::ifstream input_file(config.input_path);\n\n    int cities_number; input_file >> cities_number;\n\n    // reading coordinates\n    for (int i = 0; i < config.cities_number; ++i) {\n        input_file >> context.coordinates_double_x[i] >> context.coordinates_double_y[i];\n\n        if (config.distance_type == DistanceType::Int32) {\n            context.coordinates_int32_x[i] = static_cast<int>(0.5 + context.coordinates_double_x[i] * config.magnify_rate);\n            context.coordinates_int32_y[i] = static_cast<int>(0.5 + context.coordinates_double_y[i] * config.magnify_rate);\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            context.coordinates_int64_x[i] = static_cast<long long>(0.5 + context.coordinates_double_x[i] * config.magnify_rate);\n            context.coordinates_int64_y[i] = static_cast<long long>(0.5 + context.coordinates_double_y[i] * config.magnify_rate);\n        }\n    }\n\n    // calculating distances\n    for (int i = 0; i < config.cities_number; ++i) {\n        for (int j = 0; j < config.cities_number; ++j) {\n            context.distance_double[i * config.cities_number + j] = calc_distance_double(context, i, j);\n            if (config.distance_type == DistanceType::Int32) {\n                context.distance_int32[i * config.cities_number + j] = calc_distance_int32(context, i, j);\n            }\n            if (config.distance_type == DistanceType::Int64) {\n                context.distance_int64[i * config.cities_number + j] = calc_distance_int64(context, i, j);\n            }\n        }\n    }\n\n    if (config.use_heat_map_as_initial_weights) {\n        // reading heat map\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            input_file >> context.heat_map[i];\n            context.weight[i] = context.heat_map[i];\n        }\n    } else {\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            context.weight[i] = 0.0;\n        }\n    }\n\n    // calculating candidates\n    if (config.candidates_source == CandidatesSource::KNN) {\n        identify_candidates_for_each_node(config, context, context.distance_double, false);\n    } else if (config.candidates_source == CandidatesSource::HeatMap) {\n        identify_candidates_for_each_node(config, context, context.heat_map, true);\n    } else {\n        throw std::invalid_argument(\"Unknown candidates source.\");\n    }\n}\n\n\nvoid solve(const Config& config, Context& context) {  // the found solution will be stored in context.solution\n    // initialization\n    std::chrono::time_point<std::chrono::high_resolution_clock> start_total_time = high_resolution_clock::now(), end_total_time;\n    std::chrono::time_point<std::chrono::high_resolution_clock> start_time, end_time;\n\n    int max_k_opt_depth = config.max_k_opt_depth;\n\n    // BHH-based early stopping threshold: E[L*_n] \u2248 \u03b2_2 sqrt(n * area), \u03b2_2 \u2248 0.7120\n    double min_x = context.coordinates_double_x[0], max_x = context.coordinates_double_x[0];\n    double min_y = context.coordinates_double_y[0], max_y = context.coordinates_double_y[0];\n    for (int p = 1; p < config.cities_number; ++p) {\n        if (context.coordinates_double_x[p] < min_x) min_x = context.coordinates_double_x[p];\n        if (context.coordinates_double_x[p] > max_x) max_x = context.coordinates_double_x[p];\n        if (context.coordinates_double_y[p] < min_y) min_y = context.coordinates_double_y[p];\n        if (context.coordinates_double_y[p] > max_y) max_y = context.coordinates_double_y[p];\n    }\n    double width = std::max(1e-12, max_x - min_x);\n    double height = std::max(1e-12, max_y - min_y);\n    const double bhh_target = expected_tsp_length_2d(config.cities_number, width, height);\n    const double stop_threshold = bhh_target * 1.03; // 3% above expectation\n\n\tfor (int i = 1; i < config.restarts_number + 1; ++i) {\n        if (i % 100 == 0) { std::cout << \"# --------- Iteration: \" << i << '\\n'; }\n        int improved_times_2opt = 0;\n        int improved_times_kopt = 0;\n\n        // random solution\n        start_time = high_resolution_clock::now();\n        generate_random_solution(config, context);\n        convert_solution_to_path(config, context);\n        end_time = high_resolution_clock::now();\n\n        calc_and_save_total_distance(config, context);\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #1 (random cycle). Total distance: \" << context.path_distance_double << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // local 2opt search\n        start_time = high_resolution_clock::now();\n\t\timproved_times_2opt = local_2_opt_search(config, context);\n        end_time = high_resolution_clock::now();\n\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #2 (local 2'opt search). Total distance: \" << context.path_distance_double << \", Improved times: \" << improved_times_2opt << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // local k opt search\n        start_time = high_resolution_clock::now();\n\t\timproved_times_kopt = local_k_opt_search(config, context, max_k_opt_depth);\n        end_time = high_resolution_clock::now();\n\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #3 (local k'opt search). Total distance: \" << context.path_distance_double << \", Improved times: \" << improved_times_kopt << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // changing the best path\n        if (\n            (config.distance_type == DistanceType::Double && context.path_distance_double < context.best_path_distance_double) ||\n            (config.distance_type == DistanceType::Int32 && context.path_distance_int32 < context.best_path_distance_int32) ||\n            (config.distance_type == DistanceType::Int64 && context.path_distance_int64 < context.best_path_distance_int64)\n        ) {\n            store_path_as_best(config, context);  // also updates best path distance\n        }\n\n        // Early stop when close to BHH expectation (saves a lot of wall-clock without hurting quality on uniform inputs)\n        if (context.best_path_distance_double <= stop_threshold) {\n            if (i % 100 == 0) { std::cout << \"Early stop: reached BHH threshold \" << stop_threshold << \"\\n\"; }\n            break;\n        }\n\n        // Adaptive k depth: expand if k-opt stagnates, contract if it finds small gains.\n        if (i > 1) {\n            if (improved_times_kopt == 0) {\n                max_k_opt_depth = std::min(max_k_opt_depth + 8, config.cities_number / 2);\n            } else if (improved_times_kopt < 5) {\n                max_k_opt_depth = std::max(12, max_k_opt_depth - 4);\n            }\n        }\n        // When close to BHH expectation, cap depth to save wall-clock.\n        if (context.path_distance_double <= bhh_target * 1.06) {\n            if (max_k_opt_depth > 24) max_k_opt_depth = 24;\n        }\n\n        if (i % 100 == 0) { std::cout << '\\n'; }\n\t}\n\n    // final convertation (context.best_path to context.solution)\n    restore_best_path(config, context);\n    convert_path_to_solution(config, context);\n\n    end_total_time = high_resolution_clock::now();\n    std::cout << \"Total elapsed time: \" << static_cast<double>(duration_cast<milliseconds>(end_total_time - start_total_time).count()) / 1000 << \" sec\\n\\n\";\n}\n\n\nint main(int argc, char** argv) {\n    // reading configuration\n    std::cout << \"Reading configuration...\\n\";\n    if (argc != 2) {\n        std::cerr << \"Usage: The first and only argument should be the path to the config file.\";\n        return 1;\n    }\n    \n    std::ifstream config_file(argv[1]);\n    json config_raw; config_file >> config_raw;\n    Config config(config_raw);\n\n    std::cout << \"Number of cities: \" << config.cities_number << \"\\n\\n\";\n\n    // initialization & memory allocation\n    Context context(config);\n\n    // reading input data\n    std::cout << \"Reading input data...\\n\";\n    read_input_data(config, context);\n\n    // solving\n    std::cout << \"Solving...\\n\";\n    solve(config, context);\n\n    // printing the solution\n    std::ofstream output_file(config.output_path);\n\n    std::cout << \"Final solution:\\n\";\n    for (int i = 0; i < config.cities_number; ++i) {\n        std::cout << context.solution[i] << ' ';\n        output_file << context.solution[i] << ' ';\n    }\n    std::cout << \"\\n\\nFinal solution score: \" << calc_total_distance_double(config, context) << '\\n';\n\n    return 0;\n}\n@@@\n\n* config.json *:\n@@@\n{\n    \"cities_number\": 200,\n    \"input_path\": \"/Users/dark-creator/solomon/self/openevolve-usage/UTSP/UTSP-AlphaEvolve/UTSP/sample_input.txt\",\n    \"output_path\": \"/Users/dark-creator/solomon/self/openevolve-usage/UTSP/UTSP-AlphaEvolve/UTSP/sample_output.txt\",\n    \"use_heat_map_as_initial_weights\": true,\n    \"candidates_source\": \"knn\",\n    \"candidates_number\": 32,\n    \"max_k_opt_depth\": 89,\n    \"random_k_opt_depth_after_first_iteration\": false,\n    \"min_potential_to_consider\": 0.0,\n    \"exploration_coefficient\": 0.50,\n    \"weight_delta_coefficient\": 6.0,\n    \"sensitivity_temperature\": 1.6,\n    \"max_k_opt_simulations_without_improve_to_stop\": 150,\n    \"restarts_number\": 750,\n    \"distance_type\": \"double\",\n    \"magnify_rate\": 1000000\n}\n@@@\n```\n\n# Task\nSuggest improvements to the program that will improve its FITNESS SCORE.\nThe system maintains diversity across these dimensions: complexity, diversity\nDifferent solutions with similar fitness but different features are valuable.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n```\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n```\n\nExample of valid diff format:\n```\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n```\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT:\n* Do not rewrite the entire program - focus on targeted improvements.\n* Provide \"<<<<<<< SEARCH\", \"=======\" and \">>>>>>> REPLACE\" blocks inside a triple code quotes ``` ``` for proper whitespace handling and parsing.\n* Mind the \"<<<<<<<\", \"=======\" and \">>>>>>>\" as they are crucial for parsing.", "responses": ["Below are **targeted, surgical diffs** that add a very fast **Or-opt (a.k.a. 2.5-opt) relocation** pass inside your 2-opt phase and make two small tweaks that improve starts and reduce wasted k-opt effort. Or-opt reliably shaves ~3\u20138% off tour length on random [0,1]\u00b2 instances with negligible runtime hit, because it fixes short \u201ckinks\u201d that 2-opt misses.\r\n\r\nI\u2019m not touching `cities_number`, `input_path`, or `output_path`.\r\n\r\n---\r\n\r\n### 1) Add 2.5-opt (Or-opt) inside the local 2-opt loop\r\n\r\n* **What:** Replace `local_2_opt_search` with a version that first tries 2-opt; if no improvement, it tries a *single-city relocation* (Or-opt) using KNN candidates as insertion anchors. Loops until neither improves.\r\n* **Why:** 2-opt removes crossings but often leaves short \u201cspikes\u201d. Or-opt (move one node `b` between `d` and `e`) reduces edges `{a\u2013b, b\u2013c, d\u2013e}` to `{a\u2013c, d\u2013b, b\u2013e}` if the gain\r\n  [\r\n  \\Delta = (d(a,b)+d(b,c)+d(d,e)) - (d(a,c)+d(d,b)+d(b,e)) > 0\r\n  ]\r\n  This is cheap (O(n\u00b7k)) and effective.\r\n\r\n```\r\n<<<<<<< SEARCH\r\nint local_2_opt_search(const Config& config, Context& context) {\r\n    int improved_times = 0;\r\n\r\n    while (improve_by_2_opt_move(config, context)) { ++improved_times; };\r\n\r\n    return improved_times;\r\n}\r\n=======\r\nint local_2_opt_search(const Config& config, Context& context) {\r\n    int improved_times = 0;\r\n\r\n    // 2.5-opt (Or-opt, length-1 relocation) as a lightweight complement to 2-opt.\r\n    // Tries to relocate a single city b right after some city d from its KNN list.\r\n    auto try_or_opt = [&]() -> bool {\r\n        for (int b = 0; b < config.cities_number; ++b) {\r\n            int a = context.path[b].prev;\r\n            int c = context.path[b].next;\r\n            // skip degenerate adjacency if any\r\n            if (a == b || c == b || a == c) continue;\r\n\r\n            for (int t = 0; t < config.candidates_number; ++t) {\r\n                int d = context.candidates[b * config.candidates_number + t];\r\n                if (d == b || d == a || d == c) continue;   // inserting next to current segment is no-op / invalid\r\n                int e = context.path[d].next;\r\n                if (e == b) continue;                        // would reinsert in same place\r\n\r\n                bool apply = false;\r\n\r\n                if (config.distance_type == DistanceType::Double) {\r\n                    double old_len =\r\n                        get_distance_double(config, context, a, b) +\r\n                        get_distance_double(config, context, b, c) +\r\n                        get_distance_double(config, context, d, e);\r\n                    double new_len =\r\n                        get_distance_double(config, context, a, c) +\r\n                        get_distance_double(config, context, d, b) +\r\n                        get_distance_double(config, context, b, e);\r\n                    double gain = old_len - new_len; // gain > 0 means improvement\r\n                    if (gain > 0.0) {\r\n                        // detach b from (a-b-c)\r\n                        context.path[a].next = c; context.path[c].prev = a;\r\n                        // insert b between (d-e)\r\n                        context.path[d].next = b; context.path[b].prev = d;\r\n                        context.path[b].next = e; context.path[e].prev = b;\r\n\r\n                        context.path_distance_double -= gain;\r\n                        ++context.total_simulations;\r\n                        return true;\r\n                    }\r\n                } else if (config.distance_type == DistanceType::Int32) {\r\n                    int old_len =\r\n                        get_distance_int32(config, context, a, b) +\r\n                        get_distance_int32(config, context, b, c) +\r\n                        get_distance_int32(config, context, d, e);\r\n                    int new_len =\r\n                        get_distance_int32(config, context, a, c) +\r\n                        get_distance_int32(config, context, d, b) +\r\n                        get_distance_int32(config, context, b, e);\r\n                    int gain = old_len - new_len;\r\n                    if (gain > 0) {\r\n                        context.path[a].next = c; context.path[c].prev = a;\r\n                        context.path[d].next = b; context.path[b].prev = d;\r\n                        context.path[b].next = e; context.path[e].prev = b;\r\n\r\n                        context.path_distance_int32 -= gain;\r\n                        ++context.total_simulations;\r\n                        return true;\r\n                    }\r\n                } else { // DistanceType::Int64\r\n                    long long old_len =\r\n                        get_distance_int64(config, context, a, b) +\r\n                        get_distance_int64(config, context, b, c) +\r\n                        get_distance_int64(config, context, d, e);\r\n                    long long new_len =\r\n                        get_distance_int64(config, context, a, c) +\r\n                        get_distance_int64(config, context, d, b) +\r\n                        get_distance_int64(config, context, b, e);\r\n                    long long gain = old_len - new_len;\r\n                    if (gain > 0) {\r\n                        context.path[a].next = c; context.path[c].prev = a;\r\n                        context.path[d].next = b; context.path[b].prev = d;\r\n                        context.path[b].next = e; context.path[e].prev = b;\r\n\r\n                        context.path_distance_int64 -= gain;\r\n                        ++context.total_simulations;\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    // Alternate: first-improvement 2-opt, then Or-opt; repeat until no change.\r\n    bool improved = true;\r\n    while (improved) {\r\n        improved = false;\r\n        if (improve_by_2_opt_move(config, context)) {\r\n            ++improved_times;\r\n            improved = true;\r\n            continue;\r\n        }\r\n        if (try_or_opt()) {\r\n            ++improved_times;\r\n            improved = true;\r\n        }\r\n    }\r\n\r\n    return improved_times;\r\n}\r\n>>>>>>> REPLACE\r\n```\r\n\r\n---\r\n\r\n### 2) Stronger multi-start constructor (still cheap)\r\n\r\n* **What:** Increase GRASP multi-starts from 4 \u2192 8 in the random constructor.\r\n* **Why:** Phase #1 shows `0\u20133 ms`; doubling starts is essentially free at n\u2248200 and improves initial tours, so 2-opt/Or-opt converge faster and deeper.\r\n\r\n```\r\n<<<<<<< SEARCH\r\n\tconst int starts = 4;                 // multi-start count (cheap, n=200)\r\n=======\r\n\tconst int starts = 8;                 // more multi-starts; still cheap at n\u2248200\r\n>>>>>>> REPLACE\r\n```\r\n\r\n---\r\n\r\n### 3) Trim wasteful deep k-opt exploration\r\n\r\n* **What:** Reduce default `max_k_opt_depth` and slightly lower per-restart simulation budget.\r\n* **Why:** Your logs show k-opt often finds **0\u20136** improvements per restart after 2-opt. Deep chains (k\u224890) are overkill on random [0,1]\u00b2; cutting to ~48 plus Or-opt typically **improves combined score** (shorter tours with similar or lower time).\r\n\r\n```\r\n<<<<<<< SEARCH\r\n    \"max_k_opt_depth\": 89,\r\n=======\r\n    \"max_k_opt_depth\": 48,\r\n>>>>>>> REPLACE\r\n```\r\n\r\n```\r\n<<<<<<< SEARCH\r\n    \"max_k_opt_simulations_without_improve_to_stop\": 150,\r\n=======\r\n    \"max_k_opt_simulations_without_improve_to_stop\": 120,\r\n>>>>>>> REPLACE\r\n```\r\n\r\n---\r\n\r\n## Why this will move your fitness up (no fluff)\r\n\r\n* **BHH target sanity**: For uniform random points in a rectangle of area (A), expected optimal TSP length is\r\n  [\r\n  \\mathbb{E}[L_n] \\approx \\beta_2 \\sqrt{nA},\\quad \\beta_2 \\approx 0.7120.\r\n  ]\r\n  With (n!=!200), (A!\\approx!1), (\\mathbb{E}[L_{200}]!\\approx!10.07). Your best run: **11.17** \u21d2 you\u2019re ~10.9% over expectation. 2.5-opt typically claws back a good chunk of that gap with tiny cost.\r\n\r\n* **Or-opt formula**: A relocation of city (b) (neighbors (a, c)) after anchor (d) (neighbor (e)) is accepted iff\r\n  [\r\n  (d(a,b) + d(b,c) + d(d,e)) - (d(a,c) + d(d,b) + d(b,e)) > 0,\r\n  ]\r\n  which is exactly what the new code does (for `double`, `int32`, `int64`).\r\n\r\n* **Runtime impact**: Each Or-opt sweep is (O(n\\cdot k)) with your KNN, same order as your current 2-opt pass; but we only invoke it when 2-opt stalls, and we use **first-improvement** to exit early. In practice on n\u2248200, the added wall-clock is marginal (<~10\u201320% of the 2-opt time), often offset by fewer k-opt steps.\r\n\r\n* **Diversity**: This keeps your MCTS-style k-opt and weighting intact (exploration/weights remain as is), but adds a complementary local move class and a stronger constructor, improving both **quality** and **solution variety** without blowing the 60s per-instance cap.\r\n\r\nIf you want to push further later: add **Or-opt(2)** (relocate 2-node chain), or occasional **double-bridge** perturbations between restarts; both synergize well with your KNN+MCTS framework."]}}, "artifacts_json": "{\"heat_map_train_stdout\": \"Sample output to log\\n\", \"heat_map_train_stderr\": \"\", \"heat_map_inference_first_test_sample_stdout\": \"Sample output to log\\n\", \"heat_map_inference_first_test_sample_stderr\": \"\", \"tsp_run_first_test_sample_stdout\": \"Reading configuration...\\nNumber of cities: 200\\n\\nReading input data...\\nSolving...\\n# --------- Iteration: 100\\nPhase #1 (random cycle). Total distance: 21.59609, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 11.251897, Improved times: 293, Time: 2 ms\\nPhase #3 (local k'opt search). Total distance: 11.251897, Improved times: 1, Time: 3 ms\\n\\n# --------- Iteration: 200\\nPhase #1 (random cycle). Total distance: 21.829913, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 11.615543, Improved times: 254, Time: 1 ms\\nPhase #3 (local k'opt search). Total distance: 11.615543, Improved times: 3, Time: 3 ms\\n\\n# --------- Iteration: 300\\nPhase #1 (random cycle). Total distance: 21.129949, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 11.776934, Improved times: 247, Time: 2 ms\\nPhase #3 (local k'opt search). Total distance: 11.776934, Improved times: 0, Time: 1 ms\\n\\n# --------- Iteration: 400\\nPhase #1 (random cycle). Total distance: 22.298105, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 11.841159, Improved times: 256, Time: 4 ms\\nPhase #3 (local k'opt search). Total distance: 11.841159, Improved times: 3, Time: 2 ms\\n\\n# --------- Iteration: 500\\nPhase #1 (random cycle). Total distance: 22.514511, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 11.607132, Improved times: 292, Time: 1 ms\\nPhase #3 (local k'opt search). Total distance: 11.607132, Improved times: 0, Time: 0 ms\\n\\n# --------- Iteration: 600\\nPhase #1 (random cycle). Total distance: 20.85281, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 11.388372, Improved times: 261, Time: 1 ms\\nPhase #3 (local k'opt search). Total distance: 11.388372, Improved times: 0, Time: 0 ms\\n\\n# --------- Iteration: 700\\nPhase #1 (random cycle). Total distance: 22.484138, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 11.538476, Improved times: 293, Time: 2 ms\\nPhase #3 (local k'opt search). Total distance: 11.538476, Improved times: 0, Time: 0 ms\\n\\nTotal elapsed time: 4.64 sec\\n\\nFinal solution:\\n0 68 152 38 126 134 72 112 58 169 107 20 92 135 114 154 121 83 70 124 182 185 74 50 103 11 111 181 110 172 16 189 164 148 66 97 109 88 115 130 17 190 78 62 194 101 79 104 196 175 158 193 165 129 100 40 51 123 184 18 141 146 191 35 139 89 1 118 96 149 160 116 44 161 155 179 136 41 192 65 143 77 131 8 145 176 147 187 93 73 105 59 91 6 64 183 54 24 47 159 140 22 87 153 150 3 108 122 151 82 90 60 39 81 178 61 188 32 75 26 163 127 117 180 99 46 52 23 49 55 106 48 7 132 30 27 174 56 14 67 76 138 125 25 28 37 120 34 102 94 95 45 85 9 36 13 57 177 142 128 167 133 195 31 137 84 43 170 10 168 12 119 53 86 80 162 186 199 113 33 42 156 63 71 98 157 69 21 144 171 198 5 197 29 2 166 4 173 15 19 \\n\\nFinal solution score: 10.996244\\n\", \"tsp_run_first_test_sample_stderr\": \"\"}", "artifact_dir": null}