# Configuration
max_iterations: 100
random_seed: 42
checkpoint_interval: 1
log_level: "DEBUG"

# LLM configuration
llm:
  manual_mode: true
  manual_queue_dir: "/Users/dark-creator/solomon/self/openevolve-usage/UTSP/UTSP-AlphaEvolve/temp/manual_queue"
  primary_model: "gpt-5"
  primary_model_weight: 1.0
  api_base: "https://api.openai.com/v1"
  api_key: "<some-key>"
  temperature: 0.7
  max_tokens: 100000
  timeout: null

# Prompt configuration
prompt:
  system_message: |
    You are an expert in the Traveling Salesman Problem (TSP).
    Task:
      Recent papers (2024–2025) have proposed various approaches to the TSP. For example, the UTSP paper introduces a graph neural network (GNN) that generates an n×n heat map of edge probabilities, indicating how likely each edge is to be part of the optimal Hamiltonian cycle. It then applies 2-opt and k-opt (MCTS-based) searches in C++ using this heat map to find the final solution.

    However, a later paper (2025) questions the effectiveness of the heat map, showing that 2-opt and k-opt searches perform comparably well—even without it—achieving similar or better solution quality and faster runtime. This approach relies on selecting k-nearest neighbors (KNN) as candidate edges for each city/node.

    Your task is to explore a new method or improvement that surpasses the current implementations in terms of the combined score, defined as a function of the average Hamiltonian cycle length and the average time required to produce a solution.

    It seems that implementation that uses double type to calc distances is quite slow (in comparison with int32 and int64).

    Do not modify the `cities_number` in config.json, as it will be automatically replaced with the appropriate value during testing. Also, do not modify the `input_path` or `output_path` parameters. All other parameters may be edited.
    Additional information: all test cities were randomly generated within the square [0, 1] × [0, 1] (as is standard in most papers). The number of test samples in a testing batch ranges from 32 to 128, depending on the value of cities_number.

    Timeouts (error if exceeds):
      Heat map train: 360 seconds.
      Heat map inference: 60 seconds per instance.
      TSP compilation: 10 seconds.
      TSP run: 60 seconds per instance.
    
    The C++ program will be compiled using C++ 17 standart. The compilation command: "g++ -std=gnu++17 -O3 -DNDEBUG -march=native -funroll-loops -ffast-math -Iinclude TSP.cpp -o bin/runner -lpthread -lm -ldl" (may slightly vary depending on the operation system)
    The C++ program is implemented in a way that supports double, int32 (int) and int64 (long long) distance calculations that is specified in runtime in config.json (that you can change).

    You can — and probably should — write something to stdout for yourself. This stdout output will be shown to you in future calls.

    Important: Describe your changes and write them to the changes_description.txt file (deleting the previous one beforehand).
  
  include_artifacts: true
  include_only_text_changes: true
  num_top_programs: 3
  num_diverse_programs: 2
  suggest_simplification_after_chars: 60000
  concise_implementation_max_lines: 1000
  comprehensive_implementation_min_lines: 5000

# Database configuration
database:
  population_size: 50
  archive_size: 20
  num_islands: 3
  elite_selection_ratio: 0.2
  exploitation_ratio: 0.7

# Evaluator configuration
evaluator:
  timeout: 1500
  cascade_evaluation: false
  parallel_evaluations: 1

# Evolution settings
diff_based_evolution: true
max_code_length: 100000