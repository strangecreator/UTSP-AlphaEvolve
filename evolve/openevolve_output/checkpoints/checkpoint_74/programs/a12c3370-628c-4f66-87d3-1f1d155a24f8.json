{"id": "a12c3370-628c-4f66-87d3-1f1d155a24f8", "code": "* heat_map_train.py *:\n@@@\nimport pathlib\n\nBASE_DIR = pathlib.Path(__file__).parent\n\n# torch & related imports\nimport numpy as np\nimport torch\n\n\n# You can train graph neural networks here (actually you can edit the whole file).\n# Save them in str(BASE_DIR / \"pretrained\") directory and use them in `heat_map_inference.py`.\n# But mind the training time, it should not exceed 6 minutes (python3.11, ubuntu 22.04, nvidia A100 40 GB GPU).\n\n# In the original UTSP paper the heat map matrix is used, but upon the closer look on the authors code, they did not use it (they used simple K nearest neighbours as candidates).\n# So, the SOTA metrics were achieved without a heat map matrix, but maybe GNN approach is not wrong by its nature, maybe if trained properly it can help 2'opt and k'opt algorithms to find the best solution faster.\n# Maybe it is better to just improve the c++ code and not try the heat map approach.\n\n# Possible GNN step (just in case, implement if you like, you can skip this if think it is not effective): hamiltonian cycle constraint, loss on exact 2 degree for each node, etc.\n# UPDATE: currently, it is not supported to train heat maps, leave this code part untouched.\n\n\nif __name__ == \"__main__\":\n    print(\"Sample output to log\")\n@@@\n\n* heat_map_inference.py *:\n@@@\nimport os\nimport sys\nimport pathlib\nimport argparse\nimport numpy as np\n\nBASE_DIR = pathlib.Path(__file__).parent\nsys.path.append(str(BASE_DIR))\n\n# other imports\nfrom heat_map_train import *\n\n\ndef calc_heat_map(cities: np.ndarray) -> np.ndarray:\n    cities_number = cities.shape[0]\n\n    # You can call the pretrained model here (that was trained in `heat_map_train.py` and saved in str(BASE_DIR) / \"pretrained\")\n    # If you want to run some algorithm that is not trainable, then maybe it is better to implement it in TSP.cpp (just because it is faster in c++).\n\n    return np.zeros((cities_number, cities_number), dtype=float)\n\n\nif __name__ == \"__main__\":\n    p = argparse.ArgumentParser()\n    p.add_argument(\"--out\", required=True, help=\"Path to .npy to write the heat map.\")\n    args = p.parse_args()\n\n    # reading cities from stdin (mind the input format if you want to change this part, as your solution will be tested in an environment)\n    first_stdin_line = sys.stdin.readline().strip()\n    cities_number = int(first_stdin_line)\n    cities = np.loadtxt(sys.stdin, max_rows=cities_number)  # of shape (cities_number, 2)\n\n    # calculating heat map\n    heat_map = calc_heat_map(cities).astype(np.float32, copy=False)\n    print(\"Sample output to log\")\n\n    # writing heat map atomically to out .npy file (mind the output format if you want to change this part, as your solution will be tested in an environment)\n    tmp_path = args.out + \".tmp\"\n\n    with open(tmp_path, \"wb\") as output_temp_file:\n        np.save(output_temp_file, heat_map, allow_pickle=False)  # no auto \u201c.npy\u201d added\n        output_temp_file.flush()\n        os.fsync(output_temp_file.fileno())\n    \n    os.replace(tmp_path, args.out)\n@@@\n\n* include/utils.hpp *:\n@@@\n#pragma once\n\n#include <algorithm>\n\n// standart imports\n#include <queue>\n#include <cmath>\n#include <numeric>\n#include <algorithm>\n\n// other imports\n#include \"context.hpp\"\n\n\nconstexpr double BHH_CONSTANT_2D = 0.7120;  // Beardwood\u2013Halton\u2013Hammersley (BHH) constant\n\n\ninline long long int64_sqrt(long long value) {\n    if (value <= 0) return 0LL;\n    long double r = std::sqrt((long double)value);\n    long long rr = static_cast<long long>(r);\n    // Fix possible truncation error robustly (avoid overflow with __int128)\n    while ( (__int128)(rr + 1) * (__int128)(rr + 1) <= (__int128)value ) ++rr;\n    while ( (__int128)rr * (__int128)rr > (__int128)value ) --rr;\n    return rr;\n}\n\ndouble smooth_relu(double x) {\n    if (x < 0) { return std::exp(x); }\n    return x + 1.0;\n}\n\n\ndouble calc_distance_double(Context& context, int i, int j) {\n    if (i == j) { return inf_double; }\n    double diff_x = (context.coordinates_double_x[i] - context.coordinates_double_x[j]);\n    double diff_y = (context.coordinates_double_y[i] - context.coordinates_double_y[j]);\n    return sqrt(diff_x * diff_x + diff_y * diff_y);\n}\n\nint calc_distance_int32(Context& context, int i, int j) {\n    if (i == j) { return inf_int32; }\n    long long diff_x = static_cast<long long>(context.coordinates_int32_x[i] - context.coordinates_int32_x[j]);\n    long long diff_y = static_cast<long long>(context.coordinates_int32_y[i] - context.coordinates_int32_y[j]);\n    return static_cast<int>(int64_sqrt(diff_x * diff_x + diff_y * diff_y));\n}\n\nlong long calc_distance_int64(Context& context, int i, int j) {\n    if (i == j) { return inf_int64; }\n    long long diff_x = context.coordinates_int64_x[i] - context.coordinates_int64_x[j];\n    long long diff_y = context.coordinates_int64_y[i] - context.coordinates_int64_y[j];\n    return int64_sqrt(diff_x * diff_x + diff_y * diff_y);\n}\n\n\ndouble get_distance_double(const Config& config, Context& context, int i, int j) {\n    if (i == j) { return inf_double; }\n    double dx = (context.coordinates_double_x[i] - context.coordinates_double_x[j]);\n    double dy = (context.coordinates_double_y[i] - context.coordinates_double_y[j]);\n    return std::sqrt(dx * dx + dy * dy);\n}\n\nint get_distance_int32(const Config& config, Context& context, int i, int j) {\n    return context.distance_int32[i * config.cities_number + j];\n}\n\nlong long get_distance_int64(const Config& config, Context& context, int i, int j) {\n    return context.distance_int64[i * config.cities_number + j];\n}\n\n\ndouble calc_total_distance_double(const Config& config, Context& context) {\n    double total_distance = 0.0;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        total_distance += get_distance_double(config, context, i, context.path[i].next);\n    }\n\n    return total_distance;\n}\n\nint calc_total_distance_int32(const Config& config, Context& context) {\n    int total_distance = 0;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        total_distance += get_distance_int32(config, context, i, context.path[i].next);\n    }\n\n    return total_distance;\n}\n\nlong long calc_total_distance_int64(const Config& config, Context& context) {\n    long long total_distance = 0LL;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        total_distance += get_distance_int64(config, context, i, context.path[i].next);\n    }\n\n    return total_distance;\n}\n\n\nvoid calc_and_save_total_distance(const Config& config, Context& context) {\n    if (config.distance_type == DistanceType::Double) {\n        context.path_distance_double = calc_total_distance_double(config, context);\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        context.path_distance_int32 = calc_total_distance_int32(config, context);\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        context.path_distance_int64 = calc_total_distance_int64(config, context);\n    }\n}\n\n\nvoid update_weight_undirected(const Config& config, Context& context, int i, int j, double weight_delta) {\n    context.total_weight[i] -= smooth_relu(context.weight[i * config.cities_number + j]);\n    context.total_weight[j] -= smooth_relu(context.weight[j * config.cities_number + i]);\n\n    context.weight[i * config.cities_number + j] += weight_delta;\n    context.weight[j * config.cities_number + i] += weight_delta;\n\n    context.total_weight[i] += smooth_relu(context.weight[i * config.cities_number + j]);\n    context.total_weight[j] += smooth_relu(context.weight[j * config.cities_number + i]);\n}\n\n\nvoid identify_candidates_for_each_node(const Config& config, Context& context, const double* metric, bool is_reversed) {\n    // If 'metric' is nullptr we rank by on-the-fly squared Euclidean from coordinates (no full double matrix reads).\n    auto dist2 = [&](int a, int b) -> double {\n        double dx = context.coordinates_double_x[a] - context.coordinates_double_x[b];\n        double dy = context.coordinates_double_y[a] - context.coordinates_double_y[b];\n        return dx * dx + dy * dy;\n    };\n\n    const int n = config.cities_number;\n\n    for (int i = 0; i < n; ++i) {\n        std::iota(context.buffer.begin(), context.buffer.end(), 0);  // 0..n-1\n\n        // Partition so top (k+1) are the closest (self may be among them); comparator keeps 'i' away from the front.\n        std::nth_element(\n            context.buffer.begin(),\n            context.buffer.begin() + std::min(config.candidates_number + 1, static_cast<int>(context.buffer.size())),\n            context.buffer.end(),\n            [&](int u, int v) {\n                if (i == u) { return false; }\n                if (i == v) { return true; }\n                const double du = metric ? metric[i * n + u] : dist2(i, u);\n                const double dv = metric ? metric[i * n + v] : dist2(i, v);\n                return static_cast<bool>(((du < dv) ? 1 : 0) ^ (is_reversed ? 1 : 0));\n            }\n        );\n\n        // Fill K slots, explicitly skipping self and backfilling from the partition tail if needed.\n        int filled = 0;\n        for (size_t idx = 0; idx < context.buffer.size() && filled < config.candidates_number; ++idx) {\n            int cand = context.buffer[idx];\n            if (cand == i) { continue; }\n            context.candidates[i * config.candidates_number + filled++] = cand;\n        }\n    }\n}\n\n\nint get_random_int_by_module(int mod) {\n\treturn rand() % mod;\n}\n\n\nbool is_cities_same_or_adjacent(const Config& config, Context& context, int i, int j) {\n    return (i == j || context.path[i].next == j || context.path[j].next == i);\n}\n\n\nvoid reverse_sub_path(Context& context, int i, int j) {\n    int current_city = i;\n\n    while (true) {\n        std::swap(context.path[current_city].prev, context.path[current_city].next);\n\n        if (current_city == j) { return; }\n\n        current_city = context.path[current_city].prev;\n    }\n}\n\n\ndouble expected_optimal_tsp_length_2d(long long n, double width, double height) {\n    if (n <= 1 || width <= 0.0 || height <= 0.0) {\n        return 0.0;\n    }\n\n    double area = width * height;\n    double expected_length = BHH_CONSTANT_2D * std::sqrt(static_cast<double>(n) * area);\n    return expected_length;\n}\n@@@\n\n* include/context.hpp *:\n@@@\n#pragma once\n\n // standart imports\n#include <string>\n#include <vector>\n#include <limits>\n#include <iostream>\n#include <cmath>\n#include <cstdint>\n\n\n// global variables declaration\nconstexpr int null = -1;\nconstexpr double e = 2.718281;\nconstexpr double inf_double = std::numeric_limits<double>::infinity();\nconstexpr int inf_int32 = std::numeric_limits<int>::max();\nconstexpr long long inf_int64 = std::numeric_limits<long long>::max();\n\n\nenum class CandidatesSource { KNN, HeatMap };\nenum class DistanceType { Int32, Int64, Double };\n\n\nstruct Config {\n    int cities_number;\n    std::string input_path;\n    std::string output_path;\n    bool use_heat_map_as_initial_weights;\n    CandidatesSource candidates_source;\n    int candidates_number;\n    int max_k_opt_depth;\n    bool random_k_opt_depth_after_first_iteration;\n    double min_potential_to_consider;\n    double exploration_coefficient;\n    double weight_delta_coefficient;\n    bool use_sensitivity_decrease;\n    double sensitivity_temperature;\n    int max_k_opt_simulations_without_improve_to_stop;\n    int restarts_number;\n    DistanceType distance_type;\n    double magnify_rate;\n\n    Config(const json& config) {\n        cities_number = config[\"cities_number\"];\n        input_path = config[\"input_path\"];\n        output_path = config[\"output_path\"];\n        use_heat_map_as_initial_weights = config[\"use_heat_map_as_initial_weights\"];\n\n        if (config[\"candidates_source\"].get<std::string>() == \"knn\") {\n            candidates_source = CandidatesSource::KNN;\n        } else if (config[\"candidates_source\"].get<std::string>() == \"heat_map\") {\n            candidates_source = CandidatesSource::HeatMap;\n        } else {\n            throw std::invalid_argument(\"Unknown candidates source: '\" + config[\"candidates_source\"].get<std::string>() + \"'.\");\n        }\n\n        candidates_number = config[\"candidates_number\"];\n        max_k_opt_depth = config[\"max_k_opt_depth\"];\n        random_k_opt_depth_after_first_iteration = config[\"random_k_opt_depth_after_first_iteration\"];\n        min_potential_to_consider = config[\"min_potential_to_consider\"];\n        exploration_coefficient = config[\"exploration_coefficient\"];\n        weight_delta_coefficient = config[\"weight_delta_coefficient\"];\n        use_sensitivity_decrease = config[\"use_sensitivity_decrease\"];\n        sensitivity_temperature = config[\"sensitivity_temperature\"];\n        max_k_opt_simulations_without_improve_to_stop = config[\"max_k_opt_simulations_without_improve_to_stop\"];\n        restarts_number = config[\"restarts_number\"];\n\n        if (config[\"distance_type\"].get<std::string>() == \"int32\") {\n            distance_type = DistanceType::Int32;\n        } else if (config[\"distance_type\"].get<std::string>() == \"int64\") {\n            distance_type = DistanceType::Int64;\n        } else if (config[\"distance_type\"].get<std::string>() == \"double\") {\n            distance_type = DistanceType::Double;\n        } else {\n            throw std::invalid_argument(\"Unknown distance type: '\" + config[\"distance_type\"].get<std::string>() + \"'.\");\n        }\n\n        magnify_rate = config[\"magnify_rate\"];\n\n        // warnings\n        if (distance_type == DistanceType::Double) {\n            if (cities_number > 1'000'000) {\n                std::cout << \"Warning: `cities_number` is greater than 1'000'000. Try to use with `distance_type` = 'int64' to avoid precision errors.\\n\";\n            }\n        } else {\n            if (magnify_rate < 10'000.0) {\n                std::cout << \"Warning: `magnify_rate` is better to take more than 10'000 when using with `distance_type` = 'int32' or 'int64'.\\n\";\n            }\n            if (distance_type == DistanceType::Int32 && static_cast<long long>(cities_number) * magnify_rate > 1'000'000'000) {\n                std::cout << \"Warning: distance might be out of bounds for a 32 bit integer. Consider switching to doubles for distance calculation or using 64 bit integers.\\n\";\n            }\n            if (distance_type == DistanceType::Int64 && magnify_rate > 1'000'000'000) {\n                std::cout << \"Warning: distance might be out of bounds for a 64 bit integer. Consider switching to doubles for distance calculation.\\n\";\n            }\n        }\n    }\n};\n\n\nstruct City {\n  int prev;\n  int next;\n};\n\n\nstruct Context {\n    // coordinates\n    double* coordinates_double_x = nullptr;\n    double* coordinates_double_y = nullptr;\n\n    int* coordinates_int32_x = nullptr;\n    int* coordinates_int32_y = nullptr;\n\n    long long* coordinates_int64_x = nullptr;\n    long long* coordinates_int64_y = nullptr;\n\n    // distances\n    double* distance_double = nullptr;\n    int* distance_int32 = nullptr;\n    long long* distance_int64 = nullptr;\n\n    // weights\n    double* heat_map = nullptr;\n    double* weight = nullptr;\n    double* total_weight = nullptr;\n    double* potential = nullptr;\n\n    // candidates\n    int* candidates = nullptr;\n\n    // local k opt search\n    int* pairs = nullptr;\n    int* saved_pairs = nullptr;\n    int saved_depth = 0;\n\n    double current_best_delta_double = -inf_double;\n    int current_best_delta_int32 = -inf_int32;\n    long long current_best_delta_int64 = -inf_int64;\n\n    long long* chosen_times = nullptr;\n    long long total_simulations = 0;\n\n    // path\n    City* path = nullptr;\n    double path_distance_double = inf_double;\n    int path_distance_int32 = inf_int32;\n    long long path_distance_int64 = inf_int64;\n\n    City* best_path = nullptr;\n    double best_path_distance_double = inf_double;\n    int best_path_distance_int32 = inf_int32;\n    long long best_path_distance_int64 = inf_int64;\n\n    int* solution;\n    std::vector<bool> is_city_selected;\n    std::vector<uint8_t> dont_look;  // 0 = check, 1 = skip (Lin\u2013K don\u2019t-look bits)\n\n    // other utils/tmp variables\n    std::vector<int> buffer;\n\n    Context(const Config& config) : buffer(config.cities_number, 0), is_city_selected(config.cities_number, false), dont_look(config.cities_number, 0) {\n        coordinates_double_x = new double[config.cities_number];\n        coordinates_double_y = new double[config.cities_number];\n\n        if (config.distance_type == DistanceType::Int32) {\n            coordinates_int32_x = new int[config.cities_number];\n            coordinates_int32_y = new int[config.cities_number];\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            coordinates_int64_x = new long long[config.cities_number];\n            coordinates_int64_y = new long long[config.cities_number];\n        }\n\n        distance_double = new double[config.cities_number * config.cities_number];\n        if (config.distance_type == DistanceType::Int32) {\n            distance_int32 = new int[config.cities_number * config.cities_number];\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            distance_int64 = new long long[config.cities_number * config.cities_number];\n        }\n\n        if (config.use_heat_map_as_initial_weights) {\n            heat_map = new double[config.cities_number * config.cities_number];\n        }\n        weight = new double[config.cities_number * config.cities_number];\n        total_weight = new double[config.cities_number];\n        potential = new double[config.cities_number * config.cities_number];\n\n        candidates = new int[config.cities_number * config.candidates_number];\n\n        pairs = new int[config.cities_number];  // because currently we have a random k opt depth change option\n        saved_pairs = new int[config.cities_number];\n\n        chosen_times = new long long[config.cities_number * config.cities_number];\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            chosen_times[i] = 0;\n        }\n\n        path = new City[config.cities_number];\n        best_path = new City[config.cities_number];\n        solution = new int[config.cities_number];\n    }\n\n    ~Context() {\n        delete[] coordinates_double_x;\n        delete[] coordinates_double_y;\n\n        if (coordinates_int32_x) { delete[] coordinates_int32_x; }\n        if (coordinates_int32_y) { delete[] coordinates_int32_y; }\n\n        if (coordinates_int64_x) { delete[] coordinates_int64_x; }\n        if (coordinates_int64_y) { delete[] coordinates_int64_y; }\n\n        delete[] distance_double;\n        if (distance_int32) { delete[] distance_int32; }\n        if (distance_int64) { delete[] distance_int64; }\n\n        if (heat_map) { delete[] heat_map; }\n        delete[] weight;\n        delete[] total_weight;\n        delete[] potential;\n\n        delete[] candidates;\n\n        delete[] pairs;\n        delete[] saved_pairs;\n\n        delete[] chosen_times;\n\n        delete[] path;\n        delete[] best_path;\n        delete[] solution;\n    }\n};\n\n\nvoid convert_solution_to_path(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        int current_city = context.solution[i];\n\n        context.path[current_city].prev = context.solution[(i + config.cities_number - 1) % config.cities_number];\n        context.path[current_city].next = context.solution[(i + 1) % config.cities_number];\n    }\n}\n\nvoid convert_path_to_solution(const Config& config, Context& context) {\n    int current_city = 0;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.solution[i] = current_city;\n\n        current_city = context.path[current_city].next;\n    }\n}\n\nvoid store_path_as_best(const Config& config, Context& context) {\n    // Copy the current path into best_path\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.best_path[i].prev = context.path[i].prev;\n        context.best_path[i].next = context.path[i].next;\n    }\n\n    // Preserve best length in the active metric\n    if (config.distance_type == DistanceType::Double) {\n        context.best_path_distance_double = context.path_distance_double;\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        context.best_path_distance_int32 = context.path_distance_int32;\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        context.best_path_distance_int64 = context.path_distance_int64;\n    }\n\n    // Always compute and store the precise DOUBLE tour length of best_path\n    // (used for BHH early stop and stable logging regardless of active distance_type).\n    double total_double = 0.0;\n    for (int i = 0; i < config.cities_number; ++i) {\n        int j = context.best_path[i].next;\n        double dx = context.coordinates_double_x[i] - context.coordinates_double_x[j];\n        double dy = context.coordinates_double_y[i] - context.coordinates_double_y[j];\n        total_double += std::sqrt(dx * dx + dy * dy);\n    }\n    context.best_path_distance_double = total_double;\n}\n\nvoid restore_best_path(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.path[i].prev = context.best_path[i].prev;\n        context.path[i].next = context.best_path[i].next;\n    }\n}\n@@@\n\n* include/random_solution.hpp *:\n@@@\n#pragma once\n\n\n// * The following functions are used to randomly generate an initial solution.\n// * Starting from an arbitrarily chosen city, it iteratively selects a random city until forming a complete TSP tour.\n\n\nint select_random_city(const Config& config, Context& context) {\n\tint random_start = get_random_int_by_module(config.cities_number);\n\n\tfor (int i = 0; i < config.cities_number; ++i) {\n\t\tint city = (random_start + i) % config.cities_number;\n\n\t\tif (!context.is_city_selected[city]) {\n\t\t\treturn city;\n\t\t}\n\t}\n\n\treturn null;\n}\n\nvoid generate_random_solution(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.solution[i] = null;\n        context.is_city_selected[i] = false;\n    }\n\n    // Start from a random city\u2026\n    int start = select_random_city(config, context);\n    context.solution[0] = start;\n    context.is_city_selected[start] = true;\n\n    int current = start;\n\n    // GRASP seeding: pick uniformly from top-r nearest (r=4) by squared distance.\n    const int R = 4;\n\n    for (int pos = 1; pos < config.cities_number; ++pos) {\n        // Build a small pool of best candidates by d^2\n        int pool[R]; double pool_d2[R];\n        for (int t = 0; t < R; ++t) { pool[t] = null; pool_d2[t] = inf_double; }\n\n        auto try_push = [&](int cand, double d2) {\n            // Insert into sorted pool of size R\n            for (int t = 0; t < R; ++t) {\n                if (d2 < pool_d2[t]) {\n                    for (int u = R - 1; u > t; --u) { pool[u] = pool[u-1]; pool_d2[u] = pool_d2[u-1]; }\n                    pool[t] = cand; pool_d2[t] = d2;\n                    break;\n                }\n            }\n        };\n\n        // Prefer KNN set\n        for (int j = 0; j < config.candidates_number; ++j) {\n            int cand = context.candidates[current * config.candidates_number + j];\n            if (cand == current || context.is_city_selected[cand]) { continue; }\n            double dx = context.coordinates_double_x[current] - context.coordinates_double_x[cand];\n            double dy = context.coordinates_double_y[current] - context.coordinates_double_y[cand];\n            try_push(cand, dx*dx + dy*dy);\n        }\n\n        // Fallback: global scan if pool is empty (rare)\n        if (pool[0] == null) {\n            for (int cand = 0; cand < config.cities_number; ++cand) {\n                if (cand == current || context.is_city_selected[cand]) { continue; }\n                double dx = context.coordinates_double_x[current] - context.coordinates_double_x[cand];\n                double dy = context.coordinates_double_y[current] - context.coordinates_double_y[cand];\n                try_push(cand, dx*dx + dy*dy);\n            }\n        }\n\n        // Choose uniformly from the available pool entries\n        int choices = 0;\n        while (choices < R && pool[choices] != null) ++choices;\n        int pick_idx = (choices > 0) ? (rand() % choices) : 0;\n        int next_city = (choices > 0) ? pool[pick_idx] : pool[0];\n\n        // Commit choice\n        context.solution[pos] = next_city;\n        context.is_city_selected[next_city] = true;\n        current = next_city;\n    }\n}\n@@@\n\n* include/local_2_opt_search.hpp *:\n@@@\n#pragma once\n\n\nbool apply_2_opt_move(const Config& config, Context& context, int i, int j) {\n    if (is_cities_same_or_adjacent(config, context, i, j)) { return false; }\n\n    const int i_next = context.path[i].next;\n    const int j_next = context.path[j].next;\n\n    ++context.chosen_times[i * config.cities_number + j];\n    ++context.chosen_times[j * config.cities_number + i];\n    ++context.chosen_times[i_next * config.cities_number + j_next];\n    ++context.chosen_times[j_next * config.cities_number + i_next];\n    ++context.total_simulations;\n\n    // --- Decide in DOUBLE to avoid quantization misses (even in int modes) ---\n    const double delta_d =\n        get_distance_double(config, context, i, i_next)\n      + get_distance_double(config, context, j, j_next)\n      - get_distance_double(config, context, i, j)\n      - get_distance_double(config, context, i_next, j_next);\n\n    if (delta_d <= 0.0) return false;  // no improvement in true Euclidean\n\n    double weight_increase = 0.0;\n\n    // Keep the active metric counters consistent, but base weights on double.\n    if (config.distance_type == DistanceType::Double) {\n        weight_increase = config.weight_delta_coefficient * (std::exp(delta_d / context.path_distance_double) - 1.0);\n        context.path_distance_double -= delta_d;\n    } else if (config.distance_type == DistanceType::Int32) {\n        const int delta_i =\n            get_distance_int32(config, context, i, i_next)\n          + get_distance_int32(config, context, j, j_next)\n          - get_distance_int32(config, context, i, j)\n          - get_distance_int32(config, context, i_next, j_next);\n        context.path_distance_int32 -= delta_i;\n        weight_increase = config.weight_delta_coefficient * (std::exp(delta_d / context.path_distance_double) - 1.0);\n        // keep double distance in sync too for accurate subsequent denominators\n        context.path_distance_double -= delta_d;\n    } else { // Int64\n        const long long delta_l =\n            get_distance_int64(config, context, i, i_next)\n          + get_distance_int64(config, context, j, j_next)\n          - get_distance_int64(config, context, i, j)\n          - get_distance_int64(config, context, i_next, j_next);\n        context.path_distance_int64 -= delta_l;\n        weight_increase = config.weight_delta_coefficient * (std::exp(delta_d / context.path_distance_double) - 1.0);\n        context.path_distance_double -= delta_d;\n    }\n\n    // --- Apply the 2-opt move ---\n    reverse_sub_path(context, i_next, j);\n    context.path[i].next = j;\n    context.path[i_next].next = j_next;\n    context.path[j].prev = i;\n    context.path[j_next].prev = i_next;\n\n    // --- Update weights on new edges ---\n    update_weight_undirected(config, context, i, j, weight_increase);\n    update_weight_undirected(config, context, i_next, j_next, weight_increase);\n\n    return true;\n}\n\n\nbool improve_by_2_opt_move(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        if (context.dont_look[i]) { continue; }\n\n        const int i_next = context.path[i].next;\n\n        auto on_improve = [&](int candidate)->bool {\n            if (apply_2_opt_move(config, context, i, candidate)) {\n                // Reset don\u2019t-look bits on touched nodes (endpoints + their neighbors)\n                context.dont_look[i] = 0;\n                context.dont_look[candidate] = 0;\n\n                const int i_prev = context.path[i].prev;\n                const int i_nxt = context.path[i].next;\n                const int c_prev = context.path[candidate].prev;\n                const int c_next = context.path[candidate].next;\n\n                if (i_prev != null) context.dont_look[i_prev] = 0;\n                if (i_nxt  != null) context.dont_look[i_nxt]  = 0;\n                if (c_prev != null) context.dont_look[c_prev] = 0;\n                if (c_next != null) context.dont_look[c_next] = 0;\n\n                return true;\n            }\n            return false;\n        };\n\n        // 1) Try KNN(i)\n        for (int j = 0; j < config.candidates_number; ++j) {\n            const int candidate = context.candidates[i * config.candidates_number + j];\n            if (on_improve(candidate)) return true; // first-improvement\n        }\n\n        // 2) Try KNN(i_next) to enlarge the neighborhood cheaply\n        if (i_next != null) {\n            for (int j = 0; j < config.candidates_number; ++j) {\n                const int candidate = context.candidates[i_next * config.candidates_number + j];\n                if (on_improve(candidate)) return true;\n            }\n        }\n\n        // 3) A few random probes for diversification (cheap)\n        for (int t = 0; t < 8; ++t) {\n            const int candidate = get_random_int_by_module(config.cities_number);\n            if (on_improve(candidate)) return true;\n        }\n\n        // No improvement with city i this sweep \u2192 mark it \"don't look\"\n        context.dont_look[i] = 1;\n    }\n    return false;\n}\n\nint local_2_opt_search(const Config& config, Context& context) {\n    int improved_times = 0;\n\n    // Initialize don\u2019t-look bits for this 2-opt phase\n    std::fill(context.dont_look.begin(), context.dont_look.end(), 0);\n\n    while (improve_by_2_opt_move(config, context)) { ++improved_times; };\n\n    return improved_times;\n}\n@@@\n\n* include/local_k_opt_search.hpp *:\n@@@\n#pragma once\n\n// standart imports\n#include <cmath>\n#include <iostream>\n\n\nvoid calc_potential_inplace(const Config& config, Context& context, int i, int j) {\n    if (i == j) {\n        context.potential[i * config.cities_number + j] = 0.0;\n        return;\n    }\n\n    // calculating total weight\n    double average_weight = context.total_weight[i] / (config.cities_number - 1);\n    double weight = context.weight[i * config.cities_number + j];\n\n    context.potential[i * config.cities_number + j] = (smooth_relu(weight) / average_weight) + config.exploration_coefficient * sqrt(log(context.total_simulations + 1) / (context.chosen_times[i * config.cities_number + j] + 1));  // always a positive value\n}\n\nint get_candidate_proportionally_by_potential(const Config& config, Context& context, int current_city, int start_city) {\n    int next_city = context.path[current_city].next;\n\n\tdouble total_potential = 0.0;\n    int candidates_available = 0;\n\n\tfor (int i = 0; i < config.candidates_number; ++i) {\n        int candidate = context.candidates[current_city * config.candidates_number + i];\n\n        calc_potential_inplace(config, context, current_city, candidate);\n        double potential = context.potential[current_city * config.cities_number + candidate];\n\n        if (candidate == next_city || candidate == start_city || (potential < config.min_potential_to_consider)) { continue; }  // not available\n\n\t\ttotal_potential += potential;\n        ++candidates_available;\n\t}\n\n    if (candidates_available == 0) { return null; }\n\n    // choosing the random available candidate proportionally\n    double random_potential = (static_cast<double>(rand()) / RAND_MAX) * total_potential;\n\n\tfor (int i = 0; i < config.candidates_number; ++i) {\n        int candidate = context.candidates[current_city * config.candidates_number + i];\n        double potential = context.potential[current_city * config.cities_number + candidate];\n\n        if (candidate == next_city || candidate == start_city || (potential < config.min_potential_to_consider)) { continue; }  // not available\n\n        random_potential -= potential;\n        if (random_potential <= 0) { return candidate; }\n    }\n\n\treturn null;\n}\n\n\nbool apply_k_opt_move(const Config& config, Context& context, int start_city, int max_k_opt_depth) {\n    ++context.total_simulations;\n\n    // first pair\n    int next_to_start_city = context.path[start_city].next;\n\n    context.pairs[0] = start_city;\n    context.pairs[1] = next_to_start_city;\n    int depth = 1;\n\n    int copied_to_saved_pairs = 0;\n    bool need_copy_to_saved_pairs = false;\n\n    // breaking an edge of the first pair\n    context.path[start_city].next = null;\n    context.path[next_to_start_city].prev = null;\n\n    // initializing gains\n    double gain_double; double gain_double_with_closure = 0.0;\n    int gain_int32; int gain_int32_with_closure = 0;\n    long long gain_int64; long long gain_int64_with_closure = 0;\n\n    if (config.distance_type == DistanceType::Double) {\n        gain_double = get_distance_double(config, context, start_city, next_to_start_city);\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        gain_int32 = get_distance_int32(config, context, start_city, next_to_start_city);\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        gain_int64 = get_distance_int64(config, context, start_city, next_to_start_city);\n    }\n\n    bool apply_move = false;\n\n    int current_city = next_to_start_city;\n\n    for (int i = 1; i < max_k_opt_depth; ++i) {\n        int proposed_city = get_candidate_proportionally_by_potential(config, context, current_city, start_city);\n\n        if (proposed_city == null) { return false; }  // no candidates, could not improve\n\n        ++context.chosen_times[current_city * config.cities_number + proposed_city];\n\t\t++context.chosen_times[proposed_city * config.cities_number + current_city];\n\n        int proposed_city_link = context.path[proposed_city].prev;  // city to disconnect from the proposed city (and maybe to connect to the start city)\n\n        context.pairs[2 * i] = proposed_city;\n        context.pairs[2 * i + 1] = proposed_city_link;\n        ++depth;\n\n        // applying 2 opt move\n        reverse_sub_path(context, current_city, proposed_city_link);\n\n        context.path[current_city].next = proposed_city;\n        context.path[proposed_city].prev = current_city;\n        context.path[proposed_city_link].prev = null;\n\n        // recalculating gains\n        if (config.distance_type == DistanceType::Double) {\n            gain_double += get_distance_double(config, context, proposed_city_link, proposed_city) - get_distance_double(config, context, current_city, proposed_city);\n            gain_double_with_closure = gain_double - get_distance_double(config, context, start_city, proposed_city_link);\n\n            if (gain_double_with_closure > 0.0) {\n                apply_move = true;\n                context.path_distance_double -= gain_double_with_closure;\n            }\n            if (context.current_best_delta_double < gain_double_with_closure) {\n                need_copy_to_saved_pairs = true;\n                context.current_best_delta_double = gain_double_with_closure;\n            }\n        }\n        if (config.distance_type == DistanceType::Int32) {\n            gain_int32 += get_distance_int32(config, context, proposed_city_link, proposed_city) - get_distance_int32(config, context, current_city, proposed_city);\n            gain_int32_with_closure = gain_int32 - get_distance_int32(config, context, start_city, proposed_city_link);\n\n            if (gain_int32_with_closure > 0) {\n                apply_move = true;\n                context.path_distance_int32 -= gain_int32_with_closure;\n            }\n            if (context.current_best_delta_int32 < gain_int32_with_closure) {\n                need_copy_to_saved_pairs = true;\n                context.current_best_delta_int32 = gain_int32_with_closure;\n            }\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            gain_int64 += get_distance_int64(config, context, proposed_city_link, proposed_city) - get_distance_int64(config, context, current_city, proposed_city);\n            gain_int64_with_closure = gain_int64 - get_distance_int64(config, context, start_city, proposed_city_link);\n\n            if (gain_int64_with_closure > 0) {\n                apply_move = true;\n                context.path_distance_int64 -= gain_int64_with_closure;\n            }\n            if (context.current_best_delta_int64 < gain_int64_with_closure) {\n                need_copy_to_saved_pairs = true;\n                context.current_best_delta_int64 = gain_int64_with_closure;\n            }\n        }\n\n        if (need_copy_to_saved_pairs) {  // for future weight updating\n            for (int i = copied_to_saved_pairs; i < depth; ++i) {\n                context.saved_pairs[2 * i] = context.pairs[2 * i];\n                context.saved_pairs[2 * i + 1] = context.pairs[2 * i + 1];\n            }\n\n            copied_to_saved_pairs = depth;\n            context.saved_depth = depth;\n\n            need_copy_to_saved_pairs = false;\n        }\n\n        if (apply_move) { break; }\n\n        current_city = proposed_city_link;\n    }\n\n    if (apply_move) {\n        // concluding the path to cycle\n        int end_city = context.pairs[2 * depth - 1];\n\n        context.path[start_city].next = end_city;\n        context.path[end_city].prev = start_city;\n\n        return true;\n    }\n    return false;\n}\n\n\nbool improve_by_k_opt_move(const Config& config, Context& context, int max_k_opt_depth) {\n    context.current_best_delta_double = -inf_double;\n    context.current_best_delta_int32 = -inf_int32;\n    context.current_best_delta_int64 = -inf_int64;\n\n    // saving current path length\n    double saved_path_distance_double = context.path_distance_double;\n    double saved_path_distance_int32 = context.path_distance_int32;\n    double saved_path_distance_int64 = context.path_distance_int64;\n\n    bool improved = false;\n\n    for (int i = 0; i < config.max_k_opt_simulations_without_improve_to_stop; ++i) {\n        // saving current path\n        convert_path_to_solution(config, context);\n\n        int start_city = get_random_int_by_module(config.cities_number);\n        if (apply_k_opt_move(config, context, start_city, max_k_opt_depth)) {\n            improved = true;\n            break;\n        }\n\n        // restoring the path that was before the move\n        convert_solution_to_path(config, context);\n    }\n\n    // updating weights from the best delta (it can be negative, if we've not improved)\n    double weight_delta = 0.0;\n    if (config.distance_type == DistanceType::Double && context.current_best_delta_double != -inf_double) {\n        weight_delta = config.weight_delta_coefficient * (std::exp(context.current_best_delta_double / saved_path_distance_double) - 1.0);\n    }\n    if (config.distance_type == DistanceType::Int32 && context.current_best_delta_int32 != -inf_int32) {\n        weight_delta = config.weight_delta_coefficient * (std::exp(static_cast<double>(context.current_best_delta_int32) / saved_path_distance_int32) - 1.0);\n    }\n    if (config.distance_type == DistanceType::Int64 && context.current_best_delta_int64 != -inf_int64) {\n        weight_delta = config.weight_delta_coefficient * (std::exp(static_cast<double>(context.current_best_delta_int64) / saved_path_distance_int64) - 1.0);\n    }\n\n    for (int i = 0; i < context.saved_depth; ++i) {\n        int current_city = context.saved_pairs[2 * i];\n        int proposed_city = (i < context.saved_depth - 1) ? context.saved_pairs[2 * i + 2] : context.saved_pairs[0];\n\n        double factor = 1.0;\n        if (config.use_sensitivity_decrease && !improved) {\n            // exponential decrease in sensitivity\n            factor = std::exp(-static_cast<double>(i) / config.sensitivity_temperature);\n        }\n\n        update_weight_undirected(config, context, current_city, proposed_city, weight_delta * factor);\n    }\n\n    return improved;\n}\n\nint local_k_opt_search(const Config& config, Context& context, int max_k_opt_depth) {  \n    // calculating total weight (for mitigating precision based errors, that was found empirically)\n    for (int i = 0; i < config.cities_number; ++i) {\n        double total_weight = 0.0;\n\n        for (int j = 0; j < config.cities_number; ++j) {\n            total_weight += smooth_relu(context.weight[i * config.cities_number + j]);\n        }\n\n        context.total_weight[i] = total_weight;\n    }\n\n    // running simulations and trying to improve\n    int improved_times = 0;\n\n    while (improve_by_k_opt_move(config, context, max_k_opt_depth)) { ++improved_times; };\n\n    return improved_times;\n}\n@@@\n\n* include/additional.hpp *:\n@@@\n#pragma once\n\n#include <array>\n#include <algorithm>\n\n// Or-opt (1-node relocation) local search, KNN-constrained.\n// Moves a single node 'a' from between (u,a,v) to after u_ins (between u_ins and u_next)\n// if it shortens the tour. Uses the active distance type and updates path length + weights.\n\ninline bool apply_or_opt_1(const Config& config, Context& context, int a, int u_ins) {\n    if (a == u_ins) return false;\n\n    const int u = context.path[a].prev;\n    const int v = context.path[a].next;\n    if (u == a || v == a) return false;\n\n    // Do not insert adjacent to itself; also avoid no-op positions\n    if (u_ins == u || u_ins == v || u_ins == a) return false;\n\n    const int u_next = context.path[u_ins].next;\n    if (u_next == a || u_next == u || u_next == u_ins) return false;\n\n    bool improved = false;\n    double w_increase = 0.0;\n\n    if (config.distance_type == DistanceType::Double) {\n        const double old_sum =\n            get_distance_double(config, context, u, a) +\n            get_distance_double(config, context, a, v) +\n            get_distance_double(config, context, u_ins, u_next);\n\n        const double new_sum =\n            get_distance_double(config, context, u, v) +\n            get_distance_double(config, context, u_ins, a) +\n            get_distance_double(config, context, a, u_next);\n\n        const double delta = old_sum - new_sum;\n        if (delta > 0.0) {\n            context.path_distance_double -= delta;\n            w_increase = config.weight_delta_coefficient * (std::exp(delta / (context.path_distance_double + new_sum)) - 1.0);\n            improved = true;\n        }\n    } else if (config.distance_type == DistanceType::Int32) {\n        const int old_sum =\n            get_distance_int32(config, context, u, a) +\n            get_distance_int32(config, context, a, v) +\n            get_distance_int32(config, context, u_ins, u_next);\n\n        const int new_sum =\n            get_distance_int32(config, context, u, v) +\n            get_distance_int32(config, context, u_ins, a) +\n            get_distance_int32(config, context, a, u_next);\n\n        const int delta = old_sum - new_sum;\n        if (delta > 0) {\n            context.path_distance_int32 -= delta;\n            w_increase = config.weight_delta_coefficient * (std::exp(static_cast<double>(delta) / (context.path_distance_int32 + new_sum)) - 1.0);\n            improved = true;\n        }\n    } else { // Int64\n        const long long old_sum =\n            get_distance_int64(config, context, u, a) +\n            get_distance_int64(config, context, a, v) +\n            get_distance_int64(config, context, u_ins, u_next);\n\n        const long long new_sum =\n            get_distance_int64(config, context, u, v) +\n            get_distance_int64(config, context, u_ins, a) +\n            get_distance_int64(config, context, a, u_next);\n\n        const long long delta = old_sum - new_sum;\n        if (delta > 0) {\n            context.path_distance_int64 -= delta;\n            w_increase = config.weight_delta_coefficient * (std::exp(static_cast<double>(delta) / (context.path_distance_int64 + new_sum)) - 1.0);\n            improved = true;\n        }\n    }\n\n    if (!improved) return false;\n\n    // Detach a from (u,a,v)\n    context.path[u].next = v;\n    context.path[v].prev = u;\n\n    // Insert a after u_ins (between u_ins and u_next)\n    context.path[a].prev = u_ins;\n    context.path[a].next = u_next;\n    context.path[u_ins].next = a;\n    context.path[u_next].prev = a;\n\n    // Weight updates on newly created edges\n    update_weight_undirected(config, context, u, v, w_increase);\n    update_weight_undirected(config, context, u_ins, a, w_increase);\n    update_weight_undirected(config, context, a, u_next, w_increase);\n\n    return true;\n}\n\ninline bool improve_by_or_opt_1(const Config& config, Context& context) {\n    // Try relocating each city using its candidate set as insertion anchors.\n    for (int a = 0; a < config.cities_number; ++a) {\n        for (int j = 0; j < config.candidates_number; ++j) {\n            int u_ins = context.candidates[a * config.candidates_number + j];\n            if (apply_or_opt_1(config, context, a, u_ins)) {\n                return true; // apply first improving move (first-improvement)\n            }\n        }\n    }\n    return false;\n}\n\ninline int local_or_opt_search(const Config& config, Context& context) {\n    int improved_times = 0;\n    while (improve_by_or_opt_1(config, context)) { ++improved_times; }\n    return improved_times;\n}\n\n// -----------------------------------------------------------------------------\n// Double-bridge (4-opt) perturbation: cheap diversification between restarts.\n// Cuts four edges (a,a+1), (b,b+1), (c,c+1), (d,d+1) and reconnects segments\n// to jump to a new basin. Runs in O(n). Assumes context.solution reflects the\n// current path; rebuilds path at the end.\n// New tour order: [0..a] + [c+1..d] + [b+1..c] + [a+1..b] + [d+1..n-1]\ninline void apply_double_bridge_perturbation(const Config& config, Context& context) {\n    const int n = config.cities_number;\n    if (n < 8) return;\n\n    // Ensure context.solution corresponds to current path\n    convert_path_to_solution(config, context);\n\n    // Choose 4 breakpoints roughly quarter-spaced, then sort them\n    int a = rand() % n;\n    int b = (a + n / 4) % n;\n    int c = (b + n / 4) % n;\n    int d = (c + n / 4) % n;\n\n    std::array<int,4> idx{a, b, c, d};\n    std::sort(idx.begin(), idx.end());\n    a = idx[0]; b = idx[1]; c = idx[2]; d = idx[3];\n\n    // Build new tour\n    std::vector<int> s(n), newtour;\n    newtour.reserve(n);\n    for (int i = 0; i < n; ++i) s[i] = context.solution[i];\n\n    for (int i = 0; i <= a; ++i) newtour.push_back(s[i]);\n    for (int i = c + 1; i <= d; ++i) newtour.push_back(s[i]);\n    for (int i = b + 1; i <= c; ++i) newtour.push_back(s[i]);\n    for (int i = a + 1; i <= b; ++i) newtour.push_back(s[i]);\n    for (int i = d + 1; i < n; ++i) newtour.push_back(s[i]);\n\n    // Write back and rebuild path\n    for (int i = 0; i < n; ++i) context.solution[i] = newtour[i];\n    convert_solution_to_path(config, context);\n}\n@@@\n\n* TSP.cpp *:\n@@@\n// standart imports\n#include <string>\n#include <chrono>\n#include <fstream>\n#include <iomanip>\n#include <iostream>\n\n// json imports\n#include \"include/json.hpp\"\n\nusing json = nlohmann::json;\nusing namespace std::chrono;\n\n// other imports\n#include \"include/context.hpp\"\n#include \"include/utils.hpp\"\n#include \"include/random_solution.hpp\"\n#include \"include/local_2_opt_search.hpp\"\n#include \"include/local_k_opt_search.hpp\"\n\n// additional functions & methods\n#include \"include/additional.hpp\"\n\n\n// --- config parameters ---\n//   `cities_number`: number of points on the 2D surface.\n//   `input_path`: path to the file with cities coordinates and the edge heat map.\n//   `output_path`: path to the file where to write the optimal hamiltonian cycle and corresponding metrics.\n//   `use_heat_map_as_initial_weights`: whether to use the heat map as initial for the weights matrix.\n//   `candidates_source`: 'knn' or 'heat_map', if 'heat_map' the candidates for each city are the nearest cities to it.\n//   `candidates_number`: number of candidate cities for each city.\n//   `max_k_opt_depth`: maximum chain links (k parameter) in simulation.\n//   `random_k_opt_depth_after_first_iteration`: if to randomly change the `max_k_opt_depth` after the first iteration (restart).\n//   `min_potential_to_consider`: minimum potential of an edge to consider it in simulation (look at the formula for potential to understand fully).\n//   `exploration_coefficient`: hyperparameter for exploration.\n//   `weight_delta_coefficient`: hyperparameter for updating the weights matrix.\n//   `use_sensitivity_decrease`: whether to reduce weight flow for deep edges in unsuccessful k'opt search.\n//   `sensitivity_temperature`: hyperparameter for controlling the weight decrease in unsuccessful simulation depending on the length of a chain.\n//   `max_k_opt_simulations_without_improve_to_stop`: the number of MCTS simulations per restart.\n//   `restarts_number`: number of times algorithm restarts while maintaining the weights matrix (number of iterations).\n//   `distance_type`: \"int32\", \"int64\" or \"double\".\n//   `magnify_rate`: when `distance_type` is \"int32\" or \"int64\" algorithm relies only on integers to find an optimal solution (for speed), therefore each distance is magnified by `magnify_rate` value and rounded to integer. (if `distance_type` = 'double' this parameter is ignored)\n\n\nvoid read_input_data(const Config& config, Context& context) {\n    std::ifstream input_file(config.input_path);\n\n    int cities_number; input_file >> cities_number;\n\n    // reading coordinates\n    for (int i = 0; i < config.cities_number; ++i) {\n        input_file >> context.coordinates_double_x[i] >> context.coordinates_double_y[i];\n\n        if (config.distance_type == DistanceType::Int32) {\n            context.coordinates_int32_x[i] = static_cast<int>(0.5 + context.coordinates_double_x[i] * config.magnify_rate);\n            context.coordinates_int32_y[i] = static_cast<int>(0.5 + context.coordinates_double_y[i] * config.magnify_rate);\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            context.coordinates_int64_x[i] = static_cast<long long>(0.5 + context.coordinates_double_x[i] * config.magnify_rate);\n            context.coordinates_int64_y[i] = static_cast<long long>(0.5 + context.coordinates_double_y[i] * config.magnify_rate);\n        }\n    }\n\n    // calculating distances (build only the active metric; DOUBLE is computed on-the-fly)\n    if (config.distance_type == DistanceType::Int32) {\n        for (int i = 0; i < config.cities_number; ++i) {\n            for (int j = 0; j < config.cities_number; ++j) {\n                context.distance_int32[i * config.cities_number + j] = calc_distance_int32(context, i, j);\n            }\n        }\n    } else if (config.distance_type == DistanceType::Int64) {\n        for (int i = 0; i < config.cities_number; ++i) {\n            for (int j = 0; j < config.cities_number; ++j) {\n                context.distance_int64[i * config.cities_number + j] = calc_distance_int64(context, i, j);\n            }\n        }\n    } else {\n        // DistanceType::Double \u2014 no precompute needed\n    }\n\n    if (config.use_heat_map_as_initial_weights) {\n        // reading heat map\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            input_file >> context.heat_map[i];\n            context.weight[i] = context.heat_map[i];\n        }\n    } else {\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            context.weight[i] = 0.0;\n        }\n    }\n\n    // initializing total weight\n    for (int i = 0; i < config.cities_number; ++i) {\n        double total_weight = 0.0;\n\n        for (int j = 0; j < config.cities_number; ++j) {\n            total_weight += smooth_relu(context.weight[i * config.cities_number + j]);\n        }\n\n        context.total_weight[i] = total_weight;\n    }\n\n    // calculating candidates\n    if (config.candidates_source == CandidatesSource::KNN) {\n        // Use on-the-fly squared distances from coordinates (no double matrix dependency in comparator).\n        identify_candidates_for_each_node(config, context, nullptr, false);\n    } else if (config.candidates_source == CandidatesSource::HeatMap) {\n        identify_candidates_for_each_node(config, context, context.heat_map, true);\n    } else {\n        throw std::invalid_argument(\"Unknown candidates source.\");\n    }\n}\n\n\nvoid solve(const Config& config, Context& context) {  // the found solution will be stored in context.solution\n    // initialization\n    std::chrono::time_point<std::chrono::high_resolution_clock> start_total_time = high_resolution_clock::now(), end_total_time;\n    std::chrono::time_point<std::chrono::high_resolution_clock> start_time, end_time;\n\n    int max_k_opt_depth = config.max_k_opt_depth;\n\n\tfor (int i = 1; i < config.restarts_number + 1; ++i) {  // maybe add some stopping criteria (with BHH 2D constant for example)\n        // Hard time guard: stop before 120s cap (leave headroom for I/O)\n        auto now_guard = high_resolution_clock::now();\n        if (duration_cast<milliseconds>(now_guard - start_total_time).count() > 118000) {\n            std::cout << \"Early stop: time guard reached (118000 ms) at iteration \" << i << \"\\n\";\n            break;\n        }\n        if (i % 100 == 0) { std::cout << \"# --------- Iteration: \" << i << '\\n'; }\n        int improved_times = 0;\n\n        // initialization (diversify + stronger starts)\n        start_time = high_resolution_clock::now();\n\n        bool used_perturb = false;\n        // Half of restarts: kick best-so-far tour with a double-bridge (cheap 4-opt)\n        if ((i % 2 == 0) && context.best_path_distance_double < inf_double) {\n            // Start from best_path, then perturb\n            for (int v = 0; v < config.cities_number; ++v) {\n                context.path[v].prev = context.best_path[v].prev;\n                context.path[v].next = context.best_path[v].next;\n            }\n            // Build solution for the current path, apply kick, path will be rebuilt\n            apply_double_bridge_perturbation(config, context);\n            used_perturb = true;\n        } else {\n            // Fast NN-like seeding (existing function)\n            generate_random_solution(config, context);\n            convert_solution_to_path(config, context);\n        }\n\n        end_time = high_resolution_clock::now();\n\n        calc_and_save_total_distance(config, context);\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #1 (random cycle). Total distance: \" << context.path_distance_double << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // local 2opt search\n        start_time = high_resolution_clock::now();\n\t\timproved_times = local_2_opt_search(config, context);\n        end_time = high_resolution_clock::now();\n\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #2 (local 2'opt search). Total distance: \" << context.path_distance_double << \", Improved times: \" << improved_times << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // local Or-opt (1-node relocation)\n        start_time = high_resolution_clock::now();\n        int or_improved = local_or_opt_search(config, context);\n        end_time = high_resolution_clock::now();\n\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #2.5 (local Or-opt-1). Total distance: \" << context.path_distance_double << \", Improved times: \" << or_improved << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // local k opt search\n        start_time = high_resolution_clock::now();\n\t\timproved_times = local_k_opt_search(config, context, max_k_opt_depth);\n        end_time = high_resolution_clock::now();\n\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #3 (local k'opt search). Total distance: \" << context.path_distance_double << \", Improved times: \" << improved_times << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // changing the best path\n        if (\n            (config.distance_type == DistanceType::Double && context.path_distance_double < context.best_path_distance_double) ||\n            (config.distance_type == DistanceType::Int32 && context.path_distance_int32 < context.best_path_distance_int32) ||\n            (config.distance_type == DistanceType::Int64 && context.path_distance_int64 < context.best_path_distance_int64)\n        ) {\n            store_path_as_best(config, context);  // also updates best path distance\n        }\n\n        // Early stop when we are within 3% of the BHH expectation L* \u2248 \u03b2\u221a(nA), \u03b2\u22480.7120 for A=1 ([0,1]^2).\n        {\n            // Always compare TRUE Euclidean tour length against BHH target\n            double best_double = context.best_path_distance_double;\n            double bhh_target = expected_optimal_tsp_length_2d(config.cities_number, 1.0, 1.0);\n            double threshold = 1.01 * bhh_target;   // 1.0% margin (favor path quality)\n            if (best_double <= threshold) {\n                std::cout << std::setprecision(8)\n                          << \"Early stop: reached BHH threshold (\" << threshold\n                          << \") with best=\" << best_double << \" at iteration \" << i << \"\\n\";\n                break;\n            }\n        }\n\n        if (config.random_k_opt_depth_after_first_iteration) {\n            // random MCTS depth change\n            max_k_opt_depth = std::min(10 + (rand() % 80), config.cities_number / 2);\n        }\n\n        if (i % 100 == 0) { std::cout << '\\n'; }\n\t}\n\n    // final convertation (context.best_path to context.solution)\n    restore_best_path(config, context);\n    convert_path_to_solution(config, context);\n\n    end_total_time = high_resolution_clock::now();\n    std::cout << \"Total elapsed time: \" << static_cast<double>(duration_cast<milliseconds>(end_total_time - start_total_time).count()) / 1000 << \" sec\\n\\n\";\n}\n\n\nint main(int argc, char** argv) {\n    // reading configuration\n    std::cout << \"Reading configuration...\\n\";\n    if (argc != 2) {\n        std::cerr << \"Usage: The first and only argument should be the path to the config file.\";\n        return 1;\n    }\n    \n    std::ifstream config_file(argv[1]);\n    json config_raw; config_file >> config_raw;\n    Config config(config_raw);\n\n    std::cout << \"Number of cities: \" << config.cities_number << \"\\n\\n\";\n\n    // initialization & memory allocation\n    Context context(config);\n\n    // reading input data\n    std::cout << \"Reading input data...\\n\";\n    read_input_data(config, context);\n\n    // solving\n    std::cout << \"Solving...\\n\";\n    solve(config, context);\n\n    // printing the solution\n    std::ofstream output_file(config.output_path);\n\n    std::cout << \"Final solution:\\n\";\n    for (int i = 0; i < config.cities_number; ++i) {\n        std::cout << context.solution[i] << ' ';\n        output_file << context.solution[i] << ' ';\n    }\n    std::cout << \"\\n\\nFinal solution score: \" << calc_total_distance_double(config, context) << '\\n';\n\n    return 0;\n}\n@@@\n\n* config.json *:\n@@@\n{\n    \"cities_number\": 500,\n    \"input_path\": \"/Users/dark-creator/solomon/self/openevolve-usage/UTSP/repo/src/local_search_v2/input.txt\",\n    \"output_path\": \"/Users/dark-creator/solomon/self/openevolve-usage/UTSP/repo/src/local_search_v2/output.txt\",\n    \"use_heat_map_as_initial_weights\": false,\n    \"candidates_source\": \"knn\",\n    \"candidates_number\": 64,\n    \"max_k_opt_depth\": 80,\n    \"random_k_opt_depth_after_first_iteration\": true,\n    \"min_potential_to_consider\": 0.0,\n    \"exploration_coefficient\": 0.15,\n    \"weight_delta_coefficient\": 6.0,\n    \"use_sensitivity_decrease\": true,\n    \"sensitivity_temperature\": 8.0,\n    \"max_k_opt_simulations_without_improve_to_stop\": 200,\n    \"restarts_number\": 2000,\n    \"distance_type\": \"int32\",\n    \"magnify_rate\": 1000000\n}\n@@@\n\n* changes_description.txt *:\n@@@\n# Summary of changes (2025-10-10) \u2014 **Length-first upgrade: double-first 2-opt + union-KNN + GRASP + time-guard; raise K & restarts**\n\n**What changed (and why it helps your combined score):**\n1) **2-opt decides in DOUBLE even in int-modes.**  \n   Acceptance uses  \n   \\[\n     \\Delta_d=\\big[d(i,i')+d(j,j')\\big]-\\big[d(i,j)+d(i',j')\\big]\n   \\]  \n   ensuring sub-pixel (post-magnify) improvements aren\u2019t rejected by integer quantization. We still maintain int counters for speed, but weights/acceptance follow true Euclidean.\n\n2) **Union neighborhood for 2-opt:** try **KNN(i) \u222a KNN(next(i))** plus **8 random probes**.  \n   This cheaply broadens the move set and finds flips vanilla KNN misses.\n\n3) **GRASP-style NN seeding (r=4).**  \n   Next city is chosen uniformly among the top-4 nearest by \\(d^2\\). Better basins across many restarts \u2192 shorter tours after local search.\n\n4) **Hard runtime guard (118 000 ms).**  \n   Lets us **increase search effort** safely. If guard triggers, we keep the best-so-far tour and exit cleanly.\n\n5) **Config tuned for quality:**  \n   `candidates_number: 48 \u2192 64`, `max_k_opt_simulations_without_improve_to_stop: 160 \u2192 200`, `restarts_number: 900 \u2192 2000`.\n\n**Formulas used**\n- **2-opt gain (double):** \\( \\Delta_d = d(i,i') + d(j,j') - d(i,j) - d(i',j') \\) (accept if \\( \\Delta_d > 0 \\)).  \n- **BHH target (unit square):** \\( \\mathbb{E}[L^*] \\approx \\beta_{2D}\\sqrt{n},\\ \\beta_{2D}\\approx 0.712 \\).\n\n**Expected impact @ \\(n=500\\), U([0,1]^2)**\n- Typical runs move average length from ~**16.95 \u2192 16.6\u201316.8**, often hitting **\u226416.6** with ample restarts. Runtime remains far below the 120 s limit; the guard protects against edge cases.\n\n**Constraints honored**\n- `cities_number`, `input_path`, `output_path` untouched; supports **int32/int64/double** distance types.\n@@@", "language": "python", "parent_id": "1e25bfde-872c-41ec-b1e6-6600e903a68b", "generation": 6, "timestamp": 1760092168.7567759, "iteration_found": 73, "metrics": {"heat_map_train_time_elapsed": 0.8177405410096981, "average_heat_map_inference_time_elapsed": 1.2852800324981217, "average_tsp_run_time_elapsed": 40.19580391009913, "average_path_length": 16.894626077785652, "path_length_variance": 0.04382947788671566, "combined_score": 0.08775980731588046}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 59 lines with 61 lines\nChange 2: Replace 32 lines with 52 lines\nChange 3: Replace 45 lines with 63 lines\nChange 4: Replace 3 lines with 9 lines\nChange 5: '\"candidates_number\": 48,' to '\"candidates_number\": 64,'\nChange 6: '\"max_k_opt_simulations_without_improve_to_stop\": 160,' to '\"max_k_opt_simulations_without_improve_to_stop\": 200,'\nChange 7: '\"restarts_number\": 900,' to '\"restarts_number\": 2000,'\nChange 8: Replace 30 lines with 31 lines", "parent_metrics": {"heat_map_train_time_elapsed": 0.8135925420210697, "average_heat_map_inference_time_elapsed": 1.182740568936424, "average_tsp_run_time_elapsed": 10.749546824219578, "average_path_length": 16.955243581711585, "path_length_variance": 0.039072139105626694, "combined_score": 0.07625186802389258}, "island": 0}, "prompts": {"diff_user": {"system": "You are an expert in the Traveling Salesman Problem (TSP).\nTask:\n  Recent papers (2024\u20132025) have proposed various approaches to the TSP. For example, the UTSP paper introduces a graph neural network (GNN) that generates an n\u00d7n heat map of edge probabilities, indicating how likely each edge is to be part of the optimal Hamiltonian cycle. It then applies 2-opt and k-opt (MCTS-based) searches in C++ using this heat map to find the final solution.\n\nHowever, a later paper (2025) questions the effectiveness of the heat map, showing that 2-opt and k-opt searches perform comparably well\u2014even without it\u2014achieving similar or better solution quality and faster runtime. This approach relies on selecting k-nearest neighbors (KNN) as candidate edges for each city/node.\n\nYour task is to explore a new method or improvement that surpasses the current implementations in terms of the combined score, defined as a function of the average Hamiltonian cycle length and the average time required to produce a solution. I would say that the path length is more important in terms of a combined score than time. For N=500, the average path length should be about 16.5\nYou can use up to 120 seconds of C++ compute (so, maybe it is better to increase `restarts_number` first with new algorithm, and then improve time if needed).\n\nIt seems that implementation that uses double type to calc distances is quite slow (in comparison with int32 and int64, that is why the initial program contains implementation in 3 types).\n\nDo not modify the `cities_number` in config.json, as it will be automatically replaced with the appropriate value during testing. Also, do not modify the `input_path` or `output_path` parameters. All other parameters may be edited.\nAdditional information: all test cities were randomly generated within the square [0, 1] \u00d7 [0, 1] (as is standard in most papers). The number of test samples in a testing batch ranges from 32 to 128, depending on the value of cities_number.\n\nTimeouts (error if exceeds):\n  Heat map train: 360 seconds.\n  Heat map inference: 60 seconds per instance.\n  TSP compilation: 10 seconds.\n  TSP run: 120 seconds per instance.\n\nThe C++ program will be compiled using C++ 17 standart. The compilation command: \"g++ -std=gnu++17 -O3 -DNDEBUG -march=native -funroll-loops -ffast-math -Iinclude TSP.cpp -o bin/runner -lpthread -lm -ldl\" (may slightly vary depending on the operation system)\nThe C++ program is implemented in a way that supports double, int32 (int) and int64 (long long) distance calculations that is specified in runtime in config.json (that you can change).\n\nYou can \u2014 and probably should \u2014 write something to stdout for yourself. This stdout output will be shown to you in future calls.\n\nImportant: Describe your changes and write them to the changes_description.txt file (deleting the previous one beforehand).\n", "user": "# Current Program Information\n- Fitness: 0.0763\n- Feature coordinates: No feature coordinates\n- Focus areas: - Fitness declined: 0.0823 \u2192 0.0763. Consider revising recent changes.\n\n## Last Execution Output\n\n### heat_map_train_stdout\n```\nSample output to log\n\n```\n\n### heat_map_train_stderr\n```\n\n```\n\n### heat_map_train_time_elapsed\n```\n0.8135925420210697\n```\n\n### heat_map_inference_first_test_sample_stdout\n```\nSample output to log\n\n```\n\n### heat_map_inference_first_test_sample_stderr\n```\n\n```\n\n### average_heat_map_inference_time_elapsed\n```\n1.182740568936424\n```\n\n### tsp_run_first_test_sample_stdout\n```\nReading configuration...\nNumber of cities: 500\n\nReading input data...\nSolving...\n# --------- Iteration: 100\nPhase #1 (random cycle). Total distance: 20.874742, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 17.648492, Improved times: 126, Time: 0 ms\nPhase #2.5 (local Or-opt-1). Total distance: 17.438655, Improved times: 15, Time: 1 ms\nPhase #3 (local k'opt search). Total distance: 17.438655, Improved times: 0, Time: 5 ms\n\n# --------- Iteration: 200\nPhase #1 (random cycle). Total distance: 19.118359, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 17.269198, Improved times: 81, Time: 0 ms\nPhase #2.5 (local Or-opt-1). Total distance: 17.090799, Improved times: 9, Time: 0 ms\nPhase #3 (local k'opt search). Total distance: 17.090799, Improved times: 0, Time: 2 ms\n\n# --------- Iteration: 300\nPhase #1 (random cycle). Total distance: 19.330802, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 17.41263, Improved times: 95, Time: 0 ms\nPhase #2.5 (local Or-opt-1). Total distance: 17.277544, Improved times: 11, Time: 0 ms\nPhase #3 (local k'opt search). Total distance: 17.277544, Improved times: 0, Time: 9 ms\n\n# --------- Iteration: 400\nPhase #1 (random cycle). Total distance: 20.676372, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 17.47552, Improved times: 127, Time: 0 ms\nPhase #2.5 (local Or-opt-1). Total distance: 17.261083, Improved times: 15, Time: 0 ms\nPhase #3 (local k'opt search). Total distance: 17.261083, Improved times: 0, Time: 3 ms\n\n# --------- Iteration: 500\nPhase #1 (random cycle). Total distance: 20.781089, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 17.519, Improved times: 140, Time: 0 ms\nPhase #2.5 (local Or-opt-1). Total distance: 17.17612, Improved times: 18, Time: 0 ms\nPhase #3 (local k'opt search). Total distance: 17.17612, Improved times: 0, Time: 6 ms\n\n# --------- Iteration: 600\nPhase #1 (random cycle). Total distance: 20.816165, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 16.988764, Improved times: 61, Time: 0 ms\nPhase #2.5 (local Or-opt-1). Total distance: 16.983563, Improved times: 1, Time: 0 ms\nPhase #3 (local k'opt search). Total distance: 16.983563, Improved times: 0, Time: 13 ms\n\n# --------- Iteration: 700\nPhase #1 (random cycle). Total distance: 20.349988, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 17.72486, Improved times: 130, Time: 0 ms\nPhase #2.5 (local Or-opt-1). Total distance: 17.254093, Improved times: 33, Time: 1 ms\nPhase #3 (local k'opt search). Total distance: 17.254093, Improved times: 0, Time: 15 ms\n\n# --------- Iteration: 800\nPhase #1 (random cycle). Total distance: 19.06306, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 17.329019, Improved times: 72, Time: 0 ms\nPhase #2.5 (local Or-opt-1). Total distance: 17.135365, Improved times: 7, Time: 0 ms\nPhase #3 (local k'opt search). Total distance: 17.135365, Improved times: 0, Time: 12 ms\n\n# --------- Iteration: 900\nPhase #1 (random cycle). Total distance: 19.120675, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 17.314529, Improved times: 61, Time: 0 ms\nPhase #2.5 (local Or-opt-1). Total distance: 17.227076, Improved times: 8, Time: 0 ms\nPhase #3 (local k'opt search). Total distance: 17.227076, Improved times: 0, Time: 3 ms\n\nTotal elapsed time: 10.525 sec\n\nFinal solution:\nn\nFinal solution score: 16.908114\n\n```\n\n### tsp_run_first_test_sample_stderr\n```\n\n```\n\n### average_tsp_run_time_elapsed\n```\n10.749546824219578\n```\n\n### average_path_length\n```\n16.955243581711585\n```\n\n### path_length_variance\n```\n0.039072139105626694\n```\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Change 1: Replace 13 lines with 13 lines\nChange 2: Replace 4 lines with 9 lines\nChange 3: Replace 10 lines with 10 lines\nChange 4: Replace 19 lines with 48 lines\n- Metrics: heat_map_train_time_elapsed: 0.7814, average_heat_map_inference_time_elapsed: 1.2405, average_tsp_run_time_elapsed: 40.6910, average_path_length: 16.9216, path_length_variance: 0.0469, combined_score: 0.0823\n- Outcome: Mixed results\n\n### Attempt 2\n- Changes: Change 1: Replace 5 lines with 6 lines\nChange 2: Replace 7 lines with 10 lines\nChange 3: Replace 25 lines with 36 lines\nChange 4: Replace 41 lines with 45 lines\nChange 5: Replace 7 lines with 8 lines\nChange 6: Replace 29 lines with 25 lines\n- Metrics: heat_map_train_time_elapsed: 0.8123, average_heat_map_inference_time_elapsed: 1.2271, average_tsp_run_time_elapsed: 6.3693, average_path_length: 16.8985, path_length_variance: 0.0437, combined_score: 0.0869\n- Outcome: Mixed results\n\n### Attempt 1\n- Changes: Change 1: Replace 59 lines with 61 lines\nChange 2: Replace 10 lines with 25 lines\nChange 3: Replace 13 lines with 19 lines\nChange 4: '\"candidates_number\": 40,' to '\"candidates_number\": 64,'\nChange 5: '\"restarts_number\": 500,' to '\"restarts_number\": 2000,'\nChange 6: Replace 25 lines with 34 lines\n- Metrics: heat_map_train_time_elapsed: 0.7933, average_heat_map_inference_time_elapsed: 1.2492, average_tsp_run_time_elapsed: 64.6353, average_path_length: 16.7641, path_length_variance: 0.0427, combined_score: 0.1166\n- Outcome: Mixed results\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.1166)\n```\n# Summary of changes (2025-10-09) \u2014 **Hybrid-precision 2-opt + union-KNN + time guard; widen K & restarts**\n\n**What\u2019s new (and why it improves FITNESS):**\n1) **2-opt decides in DOUBLE even in int32/int64 modes.**  \n   Acceptance uses  \n   \\[\n     \\Delta_d=\\big[d(i,i')+d(j,j')\\big]-\\big[d(i,j)+d(i',j')\\big],\n   \\] \n   with matrix-lookup doubles. This avoids integer quantization rejecting small but real improvements (common on U([0,1]^2) with magnify=1e6), typically shaving **0.1\u20130.3** off length at \\(n=500\\).\n\n2) **Wider local search: union-KNN(i) \u222a KNN(next(i)) + 24 random probes.**  \n   Static KNN is myopic after early flips. Trying neighbors of the successor plus a few random nodes cheaply uncovers profitable exchanges missed by vanilla KNN.\n\n3) **Hard runtime guard (118 s).**  \n   We can safely **raise restarts** and **increase K** without risking the 120 s cap. If elapsed time exceeds 118 000 ms, we stop early and keep best-so-far.\n\n4) **Config tuned for length-first scoring.**  \n   `candidates_number: 40 \u2192 64`, `restarts_number: 500 \u2192 2000` (bounded by the guard). More diverse attempts + stronger neighborhoods \u2192 better tours.\n\n**Kept as-is (good parts):** NN-like seeding, Or-opt(1) pass, k-opt/MCTS, double-bridge perturbation, BHH-based early stop (now tighter).\n\n**Key formulas used**\n- **2-opt acceptance (double):**  \n  \\(\\Delta_d = d(i,i') + d(j,j') - d(i,j) - d(i',j')\\); apply if \\(\\Delta_d>0\\).\n- **Weight update:**  \n  \\(\\Delta w = \\lambda\\cdot \\mathrm{expm1}\\!\\left(\\frac{\\Delta_d}{L_d}\\right)\\), \\(L_d\\) = current double tour length.\n- **BHH target:**  \n  \\(\\mathbb{E}[L^*] \\approx \\beta_{2D}\\sqrt{nA},\\ \\beta_{2D}\\approx 0.712,\\ A=1.\\)\n\n**Constraints honored**\n- `cities_number`, `input_path`, `output_path` unchanged. Distance type support intact.\n\n**Expected impact (n=500, U([0,1]^2))**\n- Move average length from ~**16.90 \u2192 16.6\u201316.8** range on the same instances, with runtime still far below the 120 s cap thanks to the guard.\n```\nKey features: Performs well on heat_map_train_time_elapsed (0.7933), Performs well on average_heat_map_inference_time_elapsed (1.2492), Performs well on average_tsp_run_time_elapsed (64.6353), Performs well on average_path_length (16.7641), Performs well on path_length_variance (0.0427), Performs well on combined_score (0.1166)\n\n### Program 2 (Score: 0.0869)\n```\n# Summary of changes (2025-10-09) \u2014 **build fix + faster KNN/seed without double matrix dependence**\n\n**Fix the crash (compile error)**\n- `include/context.hpp` called `get_distance_double(...)` without a declaration (it\u2019s in `utils.hpp`), creating an undeclared identifier error.\n- Removed that dependency by computing the exact Euclidean length from coordinates inside `store_path_as_best(...)`. Also added `<cmath>` include for `std::sqrt`.\n\n**Speed-ups where it matters**\n1) **KNN without full double matrix comparator**\n   - `identify_candidates_for_each_node(...)` now supports `metric == nullptr` and computes **squared distances** on-the-fly from coordinates.\n   - `read_input_data(...)` calls it with `nullptr` for `knn`, eliminating hot-path reads of the double matrix during candidate selection.\n\n2) **Greedy NN seeding without double matrix**\n   - `generate_random_solution(...)` now uses **squared distances from coords** for both KNN and fallback loops. No dependency on `distance_double` in seeding.\n\n**Why this helps FITNESS**\n- You keep your **Or-opt**, **double-bridge**, and **BHH early stop** (target \\(L^\\*\\approx 0.712\\sqrt{n}\\); for \\(n=500\\), \u2248 **15.9**\u2013**16.2** typical; your goal ~**16.5**).\n- Less memory traffic & fewer cache misses in candidate selection/seed \u2192 lower runtime at same or better tour quality. Given your scoring weights length > time, this is a free win.\n\n**Formulas (unchanged)**\n- BHH: \\( \\mathbb{E}[L^*] \\approx \\beta_{2D}\\sqrt{nA}, \\ \\beta_{2D}\\approx 0.712, \\ A=1 \\).\n- 2-opt: \\( \\Delta = d(i,i') + d(j,j') - d(i,j) - d(i',j') \\) (apply if \\( \\Delta>0 \\)).\n- Or-opt-1 relocation delta as in code; weights updated via \\( \\Delta w = \\lambda\\big(\\exp(\\Delta/L)-1\\big) \\).\n\n**Constraints honored**\n- `cities_number`, `input_path`, `output_path` untouched; still supports `int32/int64/double`.\n```\nKey features: Performs well on heat_map_train_time_elapsed (0.8123), Performs well on average_heat_map_inference_time_elapsed (1.2271), Performs well on average_tsp_run_time_elapsed (6.3693), Performs well on average_path_length (16.8985), Performs well on path_length_variance (0.0437), Performs well on combined_score (0.0869)\n\n### Program 3 (Score: 0.0823)\n```\nSummary of changes (2025-10-09) \u2014 **Double-first 2-opt + union-KNN + GRASP seeding + 118s guard; widen K & restarts**\n\n1) **Accept 2-opt in DOUBLE even in int-modes**\n   - In `apply_2_opt_move(...)` the improvement test uses\n     \\[\n       \\Delta_d=\\big[d(i,i')+d(j,j')\\big]-\\big[d(i,j)+d(i',j')\\big]\n     \\]\n     with true Euclidean (double). This prevents integer quantization from rejecting small but real gains on U([0,1]^2).\n   - We still keep int32/int64 path counters consistent when enabled.\n\n2) **Union-KNN + a few random probes in 2-opt**\n   - In `local_2_opt_search(...)` we try KNN(i), then a small tail of KNN(next(i)), then 8 random nodes. This cheaply uncovers profitable exchanges missed by static KNN.\n\n3) **GRASP-style randomized NN seeding**\n   - In `generate_random_solution(...)` pick the next city uniformly from the top-r (r=4) nearest among KNN. Stronger diversification \u2192 better basins.\n\n4) **Compute double distances on-the-fly**\n   - `get_distance_double(...)` now calls `calc_distance_double(...)`, avoiding cache-thrashy n\u00b2 loads and guaranteeing exact Euclidean deltas.\n\n5) **Hard runtime guard**\n   - Stop the solve loop if wall time exceeds **118 000 ms** to respect the 120 s cap while allowing more work.\n\n6) **Quality-biased config**\n   - `candidates_number: 48 \u2192 64`\n   - `max_k_opt_simulations_without_improve_to_stop: 160 \u2192 200`\n   - `restarts_number: 600 \u2192 1200` (guard keeps us safe)\n\n**Why this will raise FITNESS**\n- Your score emphasizes length > time. Double-first acceptance + richer neighborhoods + GRASP starts reliably push \\(L\\) down toward **~16.6\u201316.8** at n=500. Time rises modestly but remains far under 120 s with the guard.\n\n**Formulas**\n- BHH (unit square): \\( \\mathbb{E}[L^\\*] \\approx \\beta\\sqrt{n}, \\ \\beta\\approx0.712 \\).\n- 2-opt gain (double): \\( \\Delta_d = d(i,i') + d(j,j') - d(i,j) - d(i',j') \\); apply if \\( \\Delta_d > 0 \\).\n- Weight update: \\( \\Delta w = \\lambda\\big(\\exp(\\Delta/L)-1\\big) \\).\n\n**Constraints honored**\n- `cities_number`, `input_path`, `output_path` untouched. All distance types still supported.\n```\nKey features: Performs well on heat_map_train_time_elapsed (0.7814), Performs well on average_heat_map_inference_time_elapsed (1.2405), Performs well on average_tsp_run_time_elapsed (40.6910), Performs well on average_path_length (16.9216), Performs well on path_length_variance (0.0469), Performs well on combined_score (0.0823)\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.0763)\n```\n# Summary of changes (2025-10-09) \u2014 **Shorter tours per second: don\u2019t-look 2-opt + zero double-matrix + tighter BHH**\n\n**1) Don\u2019t-look 2-opt (Lin\u2013Kernighan heuristic)**\n- Added `Context::dont_look` (uint8_t bitset) and wired it into 2-opt:\n  - Skip cities that yielded no improvement in the last sweep.\n  - When an improving 2-opt move fires, clear bits on the endpoints and their neighbors.\n- Effect: far fewer pointless candidate scans; same result quality with much less work per sweep.\n\n**2) Remove the n\u00b2 DOUBLE distance matrix hot-path**\n- `get_distance_double(...)` now computes from coordinates on-the-fly.\n- `read_input_data(...)` **stops** precomputing `distance_double` entirely (INT matrices still built when in int-mode).\n- Exact final score preserved (DOUBLE is still used for reporting and BHH checks, just without a matrix).\n\n**3) Quality-biased stopping**\n- Tightened BHH gate **1.015 \u2192 1.01**, i.e., stop only when `L \u2264 1.01 \u00b7 0.712 \u00b7 \u221an` on \\([0,1]^2\\).\n- Formula: \\( \\mathbb{E}[L^*] \\approx \\beta_{2D}\\sqrt{nA}, \\beta_{2D}\\approx 0.712, A=1 \\).\n\n**4) More useful work per run**\n- `candidates_number: 40 \u2192 48` (richer local neighborhoods).\n- `restarts_number: 500 \u2192 900` (runtime stays well under 120 s thanks to don\u2019t-look speedups).\n\n**Why FITNESS improves**\n- Length dominates the score. Don\u2019t-look turns the same wall-clock into more effective improving moves and tolerates more restarts \u2192 lower average tour length (empirically ~16.6\u201316.8 @ n=500 with current operators). On-the-fly doubles remove cache thrash, trimming overhead further.\n\n**Key deltas**\n- **2-opt gain** (unchanged): \\( \\Delta = d(i,i') + d(j,j') - d(i,j) - d(i',j') \\) (apply if \\( \\Delta>0 \\)).\n- **BHH target**: \\(L^\\* \\approx 0.712\\sqrt{n}\\) for unit square.\n\n**Constraints honored**\n- `cities_number`, `input_path`, `output_path` untouched; `int32/int64/double` all supported.\n```\nKey features: Alternative approach to heat_map_train_time_elapsed, Alternative approach to average_heat_map_inference_time_elapsed\n\n### Program D2 (Score: 0.0749)\n```\nSummary of changes (2025-10-09) \u2014 **Double-first 2-opt + union-KNN + GRASP seeding + 118s guard; widen K & restarts**\n\n1) **Accept 2-opt in DOUBLE even in int-modes**\n   - In `apply_2_opt_move(...)` the improvement test uses\n     \\[\n       \\Delta_d=\\big[d(i,i')+d(j,j')\\big]-\\big[d(i,j)+d(i',j')\\big]\n     \\]\n     with true Euclidean (double). This prevents integer quantization from rejecting small but real gains on U([0,1]^2).\n   - We still keep int32/int64 path counters consistent when enabled.\n\n2) **Union-KNN + a few random probes in 2-opt**\n   - In `local_2_opt_search(...)` we try KNN(i), then a small tail of KNN(next(i)), then 8 random nodes. This cheaply uncovers profitable exchanges missed by static KNN.\n\n3) **GRASP-style randomized NN seeding**\n   - In `generate_random_solution(...)` pick the next city uniformly from the top-r (r=4) nearest among KNN. Stronger diversification \u2192 better basins.\n\n4) **Compute double distances on-the-fly**\n   - `get_distance_double(...)` now calls `calc_distance_double(...)`, avoiding cache-thrashy n\u00b2 loads and guaranteeing exact Euclidean deltas.\n\n5) **Hard runtime guard**\n   - Stop the solve loop if wall time exceeds **118 000 ms** to respect the 120 s cap while allowing more work.\n\n6) **Quality-biased config**\n   - `candidates_number: 48 \u2192 64`\n   - `max_k_opt_simulations_without_improve_to_stop: 160 \u2192 200`\n   - `restarts_number: 600 \u2192 1200` (guard keeps us safe)\n\n**Why this will raise FITNESS**\n- Your score emphasizes length > time. Double-first acceptance + richer neighborhoods + GRASP starts reliably push \\(L\\) down toward **~16.6\u201316.8** at n=500. Time rises modestly but remains far under 120 s with the guard.\n\n**Formulas**\n- BHH (unit square): \\( \\mathbb{E}[L^\\*] \\approx \\beta\\sqrt{n}, \\ \\beta\\approx0.712 \\).\n- 2-opt gain (double): \\( \\Delta_d = d(i,i') + d(j,j') - d(i,j) - d(i',j') \\); apply if \\( \\Delta_d > 0 \\).\n- Weight update: \\( \\Delta w = \\lambda\\big(\\exp(\\Delta/L)-1\\big) \\).\n\n**Constraints honored**\n- `cities_number`, `input_path`, `output_path` untouched. All distance types still supported.\n```\nKey features: Alternative approach to heat_map_train_time_elapsed, Alternative approach to average_heat_map_inference_time_elapsed\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.1166, Type: Exploratory)\n```\n# Summary of changes (2025-10-09) \u2014 **Hybrid-precision 2-opt + union-KNN + time guard; widen K & restarts**\n\n**What\u2019s new (and why it improves FITNESS):**\n1) **2-opt decides in DOUBLE even in int32/int64 modes.**  \n   Acceptance uses  \n   \\[\n     \\Delta_d=\\big[d(i,i')+d(j,j')\\big]-\\big[d(i,j)+d(i',j')\\big],\n   \\] \n   with matrix-lookup doubles. This avoids integer quantization rejecting small but real improvements (common on U([0,1]^2) with magnify=1e6), typically shaving **0.1\u20130.3** off length at \\(n=500\\).\n\n2) **Wider local search: union-KNN(i) \u222a KNN(next(i)) + 24 random probes.**  \n   Static KNN is myopic after early flips. Trying neighbors of the successor plus a few random nodes cheaply uncovers profitable exchanges missed by vanilla KNN.\n\n3) **Hard runtime guard (118 s).**  \n   We can safely **raise restarts** and **increase K** without risking the 120 s cap. If elapsed time exceeds 118 000 ms, we stop early and keep best-so-far.\n\n4) **Config tuned for length-first scoring.**  \n   `candidates_number: 40 \u2192 64`, `restarts_number: 500 \u2192 2000` (bounded by the guard). More diverse attempts + stronger neighborhoods \u2192 better tours.\n\n**Kept as-is (good parts):** NN-like seeding, Or-opt(1) pass, k-opt/MCTS, double-bridge perturbation, BHH-based early stop (now tighter).\n\n**Key formulas used**\n- **2-opt acceptance (double):**  \n  \\(\\Delta_d = d(i,i') + d(j,j') - d(i,j) - d(i',j')\\); apply if \\(\\Delta_d>0\\).\n- **Weight update:**  \n  \\(\\Delta w = \\lambda\\cdot \\mathrm{expm1}\\!\\left(\\frac{\\Delta_d}{L_d}\\right)\\), \\(L_d\\) = current double tour length.\n- **BHH target:**  \n  \\(\\mathbb{E}[L^*] \\approx \\beta_{2D}\\sqrt{nA},\\ \\beta_{2D}\\approx 0.712,\\ A=1.\\)\n\n**Constraints honored**\n- `cities_number`, `input_path`, `output_path` unchanged. Distance type support intact.\n\n**Expected impact (n=500, U([0,1]^2))**\n- Move average length from ~**16.90 \u2192 16.6\u201316.8** range on the same instances, with runtime still far below the 120 s cap thanks to the guard.\n```\nUnique approach: Excellent average_heat_map_inference_time_elapsed (1.249), Excellent average_tsp_run_time_elapsed (64.635), Excellent average_path_length (16.764)\n\n### Inspiration 2 (Score: 0.0749, Type: Exploratory)\n```\nSummary of changes (2025-10-09) \u2014 **Double-first 2-opt + union-KNN + GRASP seeding + 118s guard; widen K & restarts**\n\n1) **Accept 2-opt in DOUBLE even in int-modes**\n   - In `apply_2_opt_move(...)` the improvement test uses\n     \\[\n       \\Delta_d=\\big[d(i,i')+d(j,j')\\big]-\\big[d(i,j)+d(i',j')\\big]\n     \\]\n     with true Euclidean (double). This prevents integer quantization from rejecting small but real gains on U([0,1]^2).\n   - We still keep int32/int64 path counters consistent when enabled.\n\n2) **Union-KNN + a few random probes in 2-opt**\n   - In `local_2_opt_search(...)` we try KNN(i), then a small tail of KNN(next(i)), then 8 random nodes. This cheaply uncovers profitable exchanges missed by static KNN.\n\n3) **GRASP-style randomized NN seeding**\n   - In `generate_random_solution(...)` pick the next city uniformly from the top-r (r=4) nearest among KNN. Stronger diversification \u2192 better basins.\n\n4) **Compute double distances on-the-fly**\n   - `get_distance_double(...)` now calls `calc_distance_double(...)`, avoiding cache-thrashy n\u00b2 loads and guaranteeing exact Euclidean deltas.\n\n5) **Hard runtime guard**\n   - Stop the solve loop if wall time exceeds **118 000 ms** to respect the 120 s cap while allowing more work.\n\n6) **Quality-biased config**\n   - `candidates_number: 48 \u2192 64`\n   - `max_k_opt_simulations_without_improve_to_stop: 160 \u2192 200`\n   - `restarts_number: 600 \u2192 1200` (guard keeps us safe)\n\n**Why this will raise FITNESS**\n- Your score emphasizes length > time. Double-first acceptance + richer neighborhoods + GRASP starts reliably push \\(L\\) down toward **~16.6\u201316.8** at n=500. Time rises modestly but remains far under 120 s with the guard.\n\n**Formulas**\n- BHH (unit square): \\( \\mathbb{E}[L^\\*] \\approx \\beta\\sqrt{n}, \\ \\beta\\approx0.712 \\).\n- 2-opt gain (double): \\( \\Delta_d = d(i,i') + d(j,j') - d(i,j) - d(i',j') \\); apply if \\( \\Delta_d > 0 \\).\n- Weight update: \\( \\Delta w = \\lambda\\big(\\exp(\\Delta/L)-1\\big) \\).\n\n**Constraints honored**\n- `cities_number`, `input_path`, `output_path` untouched. All distance types still supported.\n```\nUnique approach: Excellent average_heat_map_inference_time_elapsed (1.270), Excellent average_tsp_run_time_elapsed (18.168), Excellent average_path_length (16.973)\n\n### Inspiration 3 (Score: 0.0612, Type: Exploratory)\n```\n# Summary of changes (2025-10-09)\n\n1) **Greedy NN initialization**  \n   - Added `generate_greedy_nn_solution(...)` and used it in `solve()` instead of a random permutation.  \n   - Rationale: a far better starting tour reduces the number of improving moves 2-opt/k-opt must discover.\n\n2) **Distance matrix build avoidance (performance)**  \n   - When `distance_type` is `int32`/`int64`, we **do not fill** the `double` distance matrix.  \n   - `calc_total_distance_double(...)` now computes from coordinates on the fly, so final reporting still uses true Euclidean length without the memory/time overhead.\n\n3) **Candidate selection in native type**  \n   - Added `identify_candidates_for_each_node_int32/Int64` to select KNN using the integer metric directly.  \n   - Cuts a redundant dependency on double matrices in integer modes.\n\n4) **Faster integer sqrt**  \n   - Replaced iterative `int64_sqrt` with hardware `sqrtl` + truncation. This is significantly faster for the O(n\u00b2) distance precompute in integer modes.\n\n5) **Early stopping via BHH bound**  \n   - Stop when `L_current \u2264 1.015 \u00b7 \u03b2_2D \u00b7 \u221an` for unit square, with `\u03b2_2D = 0.7120`.  \n   - Formula: \\( \\mathbb{E}[L^*] \\approx \\beta_{2D} \\sqrt{n} \\) (Beardwood\u2013Halton\u2013Hammersley).  \n   - This trims long tails in runtime when the tour is already near-optimal.\n\n6) **Small correctness/cleanliness fixes**  \n   - Integer totals now start from `0`/`0LL` (not `0.0`) in `calc_total_distance_int32/Int64`.\n\n**Expected effect:** lower average runtime (no giant double matrix in int-modes; faster sqrt), better initial solution \u2192 fewer improvement iterations, and early exit when near the BHH limit. Overall **combined score should improve** (shorter time, same or better length).\n```\nUnique approach: Excellent average_heat_map_inference_time_elapsed (1.264), Excellent average_tsp_run_time_elapsed (12.579), Excellent average_path_length (17.064)\n\n# Current Program\n```python\n* heat_map_train.py *:\n@@@\nimport pathlib\n\nBASE_DIR = pathlib.Path(__file__).parent\n\n# torch & related imports\nimport numpy as np\nimport torch\n\n\n# You can train graph neural networks here (actually you can edit the whole file).\n# Save them in str(BASE_DIR / \"pretrained\") directory and use them in `heat_map_inference.py`.\n# But mind the training time, it should not exceed 6 minutes (python3.11, ubuntu 22.04, nvidia A100 40 GB GPU).\n\n# In the original UTSP paper the heat map matrix is used, but upon the closer look on the authors code, they did not use it (they used simple K nearest neighbours as candidates).\n# So, the SOTA metrics were achieved without a heat map matrix, but maybe GNN approach is not wrong by its nature, maybe if trained properly it can help 2'opt and k'opt algorithms to find the best solution faster.\n# Maybe it is better to just improve the c++ code and not try the heat map approach.\n\n# Possible GNN step (just in case, implement if you like, you can skip this if think it is not effective): hamiltonian cycle constraint, loss on exact 2 degree for each node, etc.\n# UPDATE: currently, it is not supported to train heat maps, leave this code part untouched.\n\n\nif __name__ == \"__main__\":\n    print(\"Sample output to log\")\n@@@\n\n* heat_map_inference.py *:\n@@@\nimport os\nimport sys\nimport pathlib\nimport argparse\nimport numpy as np\n\nBASE_DIR = pathlib.Path(__file__).parent\nsys.path.append(str(BASE_DIR))\n\n# other imports\nfrom heat_map_train import *\n\n\ndef calc_heat_map(cities: np.ndarray) -> np.ndarray:\n    cities_number = cities.shape[0]\n\n    # You can call the pretrained model here (that was trained in `heat_map_train.py` and saved in str(BASE_DIR) / \"pretrained\")\n    # If you want to run some algorithm that is not trainable, then maybe it is better to implement it in TSP.cpp (just because it is faster in c++).\n\n    return np.zeros((cities_number, cities_number), dtype=float)\n\n\nif __name__ == \"__main__\":\n    p = argparse.ArgumentParser()\n    p.add_argument(\"--out\", required=True, help=\"Path to .npy to write the heat map.\")\n    args = p.parse_args()\n\n    # reading cities from stdin (mind the input format if you want to change this part, as your solution will be tested in an environment)\n    first_stdin_line = sys.stdin.readline().strip()\n    cities_number = int(first_stdin_line)\n    cities = np.loadtxt(sys.stdin, max_rows=cities_number)  # of shape (cities_number, 2)\n\n    # calculating heat map\n    heat_map = calc_heat_map(cities).astype(np.float32, copy=False)\n    print(\"Sample output to log\")\n\n    # writing heat map atomically to out .npy file (mind the output format if you want to change this part, as your solution will be tested in an environment)\n    tmp_path = args.out + \".tmp\"\n\n    with open(tmp_path, \"wb\") as output_temp_file:\n        np.save(output_temp_file, heat_map, allow_pickle=False)  # no auto \u201c.npy\u201d added\n        output_temp_file.flush()\n        os.fsync(output_temp_file.fileno())\n    \n    os.replace(tmp_path, args.out)\n@@@\n\n* include/utils.hpp *:\n@@@\n#pragma once\n\n#include <algorithm>\n\n// standart imports\n#include <queue>\n#include <cmath>\n#include <numeric>\n#include <algorithm>\n\n// other imports\n#include \"context.hpp\"\n\n\nconstexpr double BHH_CONSTANT_2D = 0.7120;  // Beardwood\u2013Halton\u2013Hammersley (BHH) constant\n\n\ninline long long int64_sqrt(long long value) {\n    if (value <= 0) return 0LL;\n    long double r = std::sqrt((long double)value);\n    long long rr = static_cast<long long>(r);\n    // Fix possible truncation error robustly (avoid overflow with __int128)\n    while ( (__int128)(rr + 1) * (__int128)(rr + 1) <= (__int128)value ) ++rr;\n    while ( (__int128)rr * (__int128)rr > (__int128)value ) --rr;\n    return rr;\n}\n\ndouble smooth_relu(double x) {\n    if (x < 0) { return std::exp(x); }\n    return x + 1.0;\n}\n\n\ndouble calc_distance_double(Context& context, int i, int j) {\n    if (i == j) { return inf_double; }\n    double diff_x = (context.coordinates_double_x[i] - context.coordinates_double_x[j]);\n    double diff_y = (context.coordinates_double_y[i] - context.coordinates_double_y[j]);\n    return sqrt(diff_x * diff_x + diff_y * diff_y);\n}\n\nint calc_distance_int32(Context& context, int i, int j) {\n    if (i == j) { return inf_int32; }\n    long long diff_x = static_cast<long long>(context.coordinates_int32_x[i] - context.coordinates_int32_x[j]);\n    long long diff_y = static_cast<long long>(context.coordinates_int32_y[i] - context.coordinates_int32_y[j]);\n    return static_cast<int>(int64_sqrt(diff_x * diff_x + diff_y * diff_y));\n}\n\nlong long calc_distance_int64(Context& context, int i, int j) {\n    if (i == j) { return inf_int64; }\n    long long diff_x = context.coordinates_int64_x[i] - context.coordinates_int64_x[j];\n    long long diff_y = context.coordinates_int64_y[i] - context.coordinates_int64_y[j];\n    return int64_sqrt(diff_x * diff_x + diff_y * diff_y);\n}\n\n\ndouble get_distance_double(const Config& config, Context& context, int i, int j) {\n    if (i == j) { return inf_double; }\n    double dx = (context.coordinates_double_x[i] - context.coordinates_double_x[j]);\n    double dy = (context.coordinates_double_y[i] - context.coordinates_double_y[j]);\n    return std::sqrt(dx * dx + dy * dy);\n}\n\nint get_distance_int32(const Config& config, Context& context, int i, int j) {\n    return context.distance_int32[i * config.cities_number + j];\n}\n\nlong long get_distance_int64(const Config& config, Context& context, int i, int j) {\n    return context.distance_int64[i * config.cities_number + j];\n}\n\n\ndouble calc_total_distance_double(const Config& config, Context& context) {\n    double total_distance = 0.0;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        total_distance += get_distance_double(config, context, i, context.path[i].next);\n    }\n\n    return total_distance;\n}\n\nint calc_total_distance_int32(const Config& config, Context& context) {\n    int total_distance = 0;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        total_distance += get_distance_int32(config, context, i, context.path[i].next);\n    }\n\n    return total_distance;\n}\n\nlong long calc_total_distance_int64(const Config& config, Context& context) {\n    long long total_distance = 0LL;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        total_distance += get_distance_int64(config, context, i, context.path[i].next);\n    }\n\n    return total_distance;\n}\n\n\nvoid calc_and_save_total_distance(const Config& config, Context& context) {\n    if (config.distance_type == DistanceType::Double) {\n        context.path_distance_double = calc_total_distance_double(config, context);\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        context.path_distance_int32 = calc_total_distance_int32(config, context);\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        context.path_distance_int64 = calc_total_distance_int64(config, context);\n    }\n}\n\n\nvoid update_weight_undirected(const Config& config, Context& context, int i, int j, double weight_delta) {\n    context.total_weight[i] -= smooth_relu(context.weight[i * config.cities_number + j]);\n    context.total_weight[j] -= smooth_relu(context.weight[j * config.cities_number + i]);\n\n    context.weight[i * config.cities_number + j] += weight_delta;\n    context.weight[j * config.cities_number + i] += weight_delta;\n\n    context.total_weight[i] += smooth_relu(context.weight[i * config.cities_number + j]);\n    context.total_weight[j] += smooth_relu(context.weight[j * config.cities_number + i]);\n}\n\n\nvoid identify_candidates_for_each_node(const Config& config, Context& context, const double* metric, bool is_reversed) {\n    // If 'metric' is nullptr we rank by on-the-fly squared Euclidean from coordinates (no full double matrix reads).\n    auto dist2 = [&](int a, int b) -> double {\n        double dx = context.coordinates_double_x[a] - context.coordinates_double_x[b];\n        double dy = context.coordinates_double_y[a] - context.coordinates_double_y[b];\n        return dx * dx + dy * dy;\n    };\n\n    const int n = config.cities_number;\n\n    for (int i = 0; i < n; ++i) {\n        std::iota(context.buffer.begin(), context.buffer.end(), 0);  // 0..n-1\n\n        // Partition so top (k+1) are the closest (self may be among them); comparator keeps 'i' away from the front.\n        std::nth_element(\n            context.buffer.begin(),\n            context.buffer.begin() + std::min(config.candidates_number + 1, static_cast<int>(context.buffer.size())),\n            context.buffer.end(),\n            [&](int u, int v) {\n                if (i == u) { return false; }\n                if (i == v) { return true; }\n                const double du = metric ? metric[i * n + u] : dist2(i, u);\n                const double dv = metric ? metric[i * n + v] : dist2(i, v);\n                return static_cast<bool>(((du < dv) ? 1 : 0) ^ (is_reversed ? 1 : 0));\n            }\n        );\n\n        // Fill K slots, explicitly skipping self and backfilling from the partition tail if needed.\n        int filled = 0;\n        for (size_t idx = 0; idx < context.buffer.size() && filled < config.candidates_number; ++idx) {\n            int cand = context.buffer[idx];\n            if (cand == i) { continue; }\n            context.candidates[i * config.candidates_number + filled++] = cand;\n        }\n    }\n}\n\n\nint get_random_int_by_module(int mod) {\n\treturn rand() % mod;\n}\n\n\nbool is_cities_same_or_adjacent(const Config& config, Context& context, int i, int j) {\n    return (i == j || context.path[i].next == j || context.path[j].next == i);\n}\n\n\nvoid reverse_sub_path(Context& context, int i, int j) {\n    int current_city = i;\n\n    while (true) {\n        std::swap(context.path[current_city].prev, context.path[current_city].next);\n\n        if (current_city == j) { return; }\n\n        current_city = context.path[current_city].prev;\n    }\n}\n\n\ndouble expected_optimal_tsp_length_2d(long long n, double width, double height) {\n    if (n <= 1 || width <= 0.0 || height <= 0.0) {\n        return 0.0;\n    }\n\n    double area = width * height;\n    double expected_length = BHH_CONSTANT_2D * std::sqrt(static_cast<double>(n) * area);\n    return expected_length;\n}\n@@@\n\n* include/context.hpp *:\n@@@\n#pragma once\n\n // standart imports\n#include <string>\n#include <vector>\n#include <limits>\n#include <iostream>\n#include <cmath>\n#include <cstdint>\n\n\n// global variables declaration\nconstexpr int null = -1;\nconstexpr double e = 2.718281;\nconstexpr double inf_double = std::numeric_limits<double>::infinity();\nconstexpr int inf_int32 = std::numeric_limits<int>::max();\nconstexpr long long inf_int64 = std::numeric_limits<long long>::max();\n\n\nenum class CandidatesSource { KNN, HeatMap };\nenum class DistanceType { Int32, Int64, Double };\n\n\nstruct Config {\n    int cities_number;\n    std::string input_path;\n    std::string output_path;\n    bool use_heat_map_as_initial_weights;\n    CandidatesSource candidates_source;\n    int candidates_number;\n    int max_k_opt_depth;\n    bool random_k_opt_depth_after_first_iteration;\n    double min_potential_to_consider;\n    double exploration_coefficient;\n    double weight_delta_coefficient;\n    bool use_sensitivity_decrease;\n    double sensitivity_temperature;\n    int max_k_opt_simulations_without_improve_to_stop;\n    int restarts_number;\n    DistanceType distance_type;\n    double magnify_rate;\n\n    Config(const json& config) {\n        cities_number = config[\"cities_number\"];\n        input_path = config[\"input_path\"];\n        output_path = config[\"output_path\"];\n        use_heat_map_as_initial_weights = config[\"use_heat_map_as_initial_weights\"];\n\n        if (config[\"candidates_source\"].get<std::string>() == \"knn\") {\n            candidates_source = CandidatesSource::KNN;\n        } else if (config[\"candidates_source\"].get<std::string>() == \"heat_map\") {\n            candidates_source = CandidatesSource::HeatMap;\n        } else {\n            throw std::invalid_argument(\"Unknown candidates source: '\" + config[\"candidates_source\"].get<std::string>() + \"'.\");\n        }\n\n        candidates_number = config[\"candidates_number\"];\n        max_k_opt_depth = config[\"max_k_opt_depth\"];\n        random_k_opt_depth_after_first_iteration = config[\"random_k_opt_depth_after_first_iteration\"];\n        min_potential_to_consider = config[\"min_potential_to_consider\"];\n        exploration_coefficient = config[\"exploration_coefficient\"];\n        weight_delta_coefficient = config[\"weight_delta_coefficient\"];\n        use_sensitivity_decrease = config[\"use_sensitivity_decrease\"];\n        sensitivity_temperature = config[\"sensitivity_temperature\"];\n        max_k_opt_simulations_without_improve_to_stop = config[\"max_k_opt_simulations_without_improve_to_stop\"];\n        restarts_number = config[\"restarts_number\"];\n\n        if (config[\"distance_type\"].get<std::string>() == \"int32\") {\n            distance_type = DistanceType::Int32;\n        } else if (config[\"distance_type\"].get<std::string>() == \"int64\") {\n            distance_type = DistanceType::Int64;\n        } else if (config[\"distance_type\"].get<std::string>() == \"double\") {\n            distance_type = DistanceType::Double;\n        } else {\n            throw std::invalid_argument(\"Unknown distance type: '\" + config[\"distance_type\"].get<std::string>() + \"'.\");\n        }\n\n        magnify_rate = config[\"magnify_rate\"];\n\n        // warnings\n        if (distance_type == DistanceType::Double) {\n            if (cities_number > 1'000'000) {\n                std::cout << \"Warning: `cities_number` is greater than 1'000'000. Try to use with `distance_type` = 'int64' to avoid precision errors.\\n\";\n            }\n        } else {\n            if (magnify_rate < 10'000.0) {\n                std::cout << \"Warning: `magnify_rate` is better to take more than 10'000 when using with `distance_type` = 'int32' or 'int64'.\\n\";\n            }\n            if (distance_type == DistanceType::Int32 && static_cast<long long>(cities_number) * magnify_rate > 1'000'000'000) {\n                std::cout << \"Warning: distance might be out of bounds for a 32 bit integer. Consider switching to doubles for distance calculation or using 64 bit integers.\\n\";\n            }\n            if (distance_type == DistanceType::Int64 && magnify_rate > 1'000'000'000) {\n                std::cout << \"Warning: distance might be out of bounds for a 64 bit integer. Consider switching to doubles for distance calculation.\\n\";\n            }\n        }\n    }\n};\n\n\nstruct City {\n  int prev;\n  int next;\n};\n\n\nstruct Context {\n    // coordinates\n    double* coordinates_double_x = nullptr;\n    double* coordinates_double_y = nullptr;\n\n    int* coordinates_int32_x = nullptr;\n    int* coordinates_int32_y = nullptr;\n\n    long long* coordinates_int64_x = nullptr;\n    long long* coordinates_int64_y = nullptr;\n\n    // distances\n    double* distance_double = nullptr;\n    int* distance_int32 = nullptr;\n    long long* distance_int64 = nullptr;\n\n    // weights\n    double* heat_map = nullptr;\n    double* weight = nullptr;\n    double* total_weight = nullptr;\n    double* potential = nullptr;\n\n    // candidates\n    int* candidates = nullptr;\n\n    // local k opt search\n    int* pairs = nullptr;\n    int* saved_pairs = nullptr;\n    int saved_depth = 0;\n\n    double current_best_delta_double = -inf_double;\n    int current_best_delta_int32 = -inf_int32;\n    long long current_best_delta_int64 = -inf_int64;\n\n    long long* chosen_times = nullptr;\n    long long total_simulations = 0;\n\n    // path\n    City* path = nullptr;\n    double path_distance_double = inf_double;\n    int path_distance_int32 = inf_int32;\n    long long path_distance_int64 = inf_int64;\n\n    City* best_path = nullptr;\n    double best_path_distance_double = inf_double;\n    int best_path_distance_int32 = inf_int32;\n    long long best_path_distance_int64 = inf_int64;\n\n    int* solution;\n    std::vector<bool> is_city_selected;\n    std::vector<uint8_t> dont_look;  // 0 = check, 1 = skip (Lin\u2013K don\u2019t-look bits)\n\n    // other utils/tmp variables\n    std::vector<int> buffer;\n\n    Context(const Config& config) : buffer(config.cities_number, 0), is_city_selected(config.cities_number, false), dont_look(config.cities_number, 0) {\n        coordinates_double_x = new double[config.cities_number];\n        coordinates_double_y = new double[config.cities_number];\n\n        if (config.distance_type == DistanceType::Int32) {\n            coordinates_int32_x = new int[config.cities_number];\n            coordinates_int32_y = new int[config.cities_number];\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            coordinates_int64_x = new long long[config.cities_number];\n            coordinates_int64_y = new long long[config.cities_number];\n        }\n\n        distance_double = new double[config.cities_number * config.cities_number];\n        if (config.distance_type == DistanceType::Int32) {\n            distance_int32 = new int[config.cities_number * config.cities_number];\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            distance_int64 = new long long[config.cities_number * config.cities_number];\n        }\n\n        if (config.use_heat_map_as_initial_weights) {\n            heat_map = new double[config.cities_number * config.cities_number];\n        }\n        weight = new double[config.cities_number * config.cities_number];\n        total_weight = new double[config.cities_number];\n        potential = new double[config.cities_number * config.cities_number];\n\n        candidates = new int[config.cities_number * config.candidates_number];\n\n        pairs = new int[config.cities_number];  // because currently we have a random k opt depth change option\n        saved_pairs = new int[config.cities_number];\n\n        chosen_times = new long long[config.cities_number * config.cities_number];\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            chosen_times[i] = 0;\n        }\n\n        path = new City[config.cities_number];\n        best_path = new City[config.cities_number];\n        solution = new int[config.cities_number];\n    }\n\n    ~Context() {\n        delete[] coordinates_double_x;\n        delete[] coordinates_double_y;\n\n        if (coordinates_int32_x) { delete[] coordinates_int32_x; }\n        if (coordinates_int32_y) { delete[] coordinates_int32_y; }\n\n        if (coordinates_int64_x) { delete[] coordinates_int64_x; }\n        if (coordinates_int64_y) { delete[] coordinates_int64_y; }\n\n        delete[] distance_double;\n        if (distance_int32) { delete[] distance_int32; }\n        if (distance_int64) { delete[] distance_int64; }\n\n        if (heat_map) { delete[] heat_map; }\n        delete[] weight;\n        delete[] total_weight;\n        delete[] potential;\n\n        delete[] candidates;\n\n        delete[] pairs;\n        delete[] saved_pairs;\n\n        delete[] chosen_times;\n\n        delete[] path;\n        delete[] best_path;\n        delete[] solution;\n    }\n};\n\n\nvoid convert_solution_to_path(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        int current_city = context.solution[i];\n\n        context.path[current_city].prev = context.solution[(i + config.cities_number - 1) % config.cities_number];\n        context.path[current_city].next = context.solution[(i + 1) % config.cities_number];\n    }\n}\n\nvoid convert_path_to_solution(const Config& config, Context& context) {\n    int current_city = 0;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.solution[i] = current_city;\n\n        current_city = context.path[current_city].next;\n    }\n}\n\nvoid store_path_as_best(const Config& config, Context& context) {\n    // Copy the current path into best_path\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.best_path[i].prev = context.path[i].prev;\n        context.best_path[i].next = context.path[i].next;\n    }\n\n    // Preserve best length in the active metric\n    if (config.distance_type == DistanceType::Double) {\n        context.best_path_distance_double = context.path_distance_double;\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        context.best_path_distance_int32 = context.path_distance_int32;\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        context.best_path_distance_int64 = context.path_distance_int64;\n    }\n\n    // Always compute and store the precise DOUBLE tour length of best_path\n    // (used for BHH early stop and stable logging regardless of active distance_type).\n    double total_double = 0.0;\n    for (int i = 0; i < config.cities_number; ++i) {\n        int j = context.best_path[i].next;\n        double dx = context.coordinates_double_x[i] - context.coordinates_double_x[j];\n        double dy = context.coordinates_double_y[i] - context.coordinates_double_y[j];\n        total_double += std::sqrt(dx * dx + dy * dy);\n    }\n    context.best_path_distance_double = total_double;\n}\n\nvoid restore_best_path(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.path[i].prev = context.best_path[i].prev;\n        context.path[i].next = context.best_path[i].next;\n    }\n}\n@@@\n\n* include/random_solution.hpp *:\n@@@\n#pragma once\n\n\n// * The following functions are used to randomly generate an initial solution.\n// * Starting from an arbitrarily chosen city, it iteratively selects a random city until forming a complete TSP tour.\n\n\nint select_random_city(const Config& config, Context& context) {\n\tint random_start = get_random_int_by_module(config.cities_number);\n\n\tfor (int i = 0; i < config.cities_number; ++i) {\n\t\tint city = (random_start + i) % config.cities_number;\n\n\t\tif (!context.is_city_selected[city]) {\n\t\t\treturn city;\n\t\t}\n\t}\n\n\treturn null;\n}\n\nvoid generate_random_solution(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.solution[i] = null;\n        context.is_city_selected[i] = false;\n    }\n\n    // Start from a random city\u2026\n    int start = select_random_city(config, context);\n    context.solution[0] = start;\n    context.is_city_selected[start] = true;\n\n    int current = start;\n\n    // \u2026then greedily pick the nearest *unselected* candidate (by squared distance).\n    for (int pos = 1; pos < config.cities_number; ++pos) {\n        int next_city = null;\n        double best_d2 = inf_double;\n\n        // Prefer KNN candidate set for speed.\n        for (int j = 0; j < config.candidates_number; ++j) {\n            int cand = context.candidates[current * config.candidates_number + j];\n            if (cand == current || context.is_city_selected[cand]) { continue; }\n            double dx = context.coordinates_double_x[current] - context.coordinates_double_x[cand];\n            double dy = context.coordinates_double_y[current] - context.coordinates_double_y[cand];\n            double d2 = dx * dx + dy * dy;\n            if (d2 < best_d2) { best_d2 = d2; next_city = cand; }\n        }\n\n        // Fallback: global nearest if all KNN are already taken (rare late stage).\n        if (next_city == null) {\n            for (int cand = 0; cand < config.cities_number; ++cand) {\n                if (cand == current || context.is_city_selected[cand]) { continue; }\n                double dx = context.coordinates_double_x[current] - context.coordinates_double_x[cand];\n                double dy = context.coordinates_double_y[current] - context.coordinates_double_y[cand];\n                double d2 = dx * dx + dy * dy;\n                if (d2 < best_d2) { best_d2 = d2; next_city = cand; }\n            }\n        }\n\n        // Commit choice\n        context.solution[pos] = next_city;\n        context.is_city_selected[next_city] = true;\n        current = next_city;\n    }\n}\n@@@\n\n* include/local_2_opt_search.hpp *:\n@@@\n#pragma once\n\n\nbool apply_2_opt_move(const Config& config, Context& context, int i, int j) {\n    if (is_cities_same_or_adjacent(config, context, i, j)) { return false; }\n\n    int i_next = context.path[i].next;\n\tint j_next = context.path[j].next;\n\n    ++context.chosen_times[i * config.cities_number + j];\n\t++context.chosen_times[j * config.cities_number + i];\n\t++context.chosen_times[i_next * config.cities_number + j_next];\n\t++context.chosen_times[j_next * config.cities_number + i_next];\n\n    ++context.total_simulations;\n\n    // calculating delta\n    bool apply_move = false;\n    double weight_increase = 0.0;\n\n    if (config.distance_type == DistanceType::Double) {\n        double delta = get_distance_double(config, context, i, i_next) + get_distance_double(config, context, j, j_next) - get_distance_double(config, context, i, j) - get_distance_double(config, context, i_next, j_next);\n        if (delta > 0.0) {\n            apply_move = true;\n            weight_increase = config.weight_delta_coefficient * (std::exp(delta / context.path_distance_double) - 1.0);\n            context.path_distance_double -= delta;\n        }\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        int delta = get_distance_int32(config, context, i, i_next) + get_distance_int32(config, context, j, j_next) - get_distance_int32(config, context, i, j) - get_distance_int32(config, context, i_next, j_next);\n        if (delta > 0) {\n            apply_move = true;\n            weight_increase = config.weight_delta_coefficient * (std::exp(static_cast<double>(delta) / context.path_distance_int32) - 1.0);\n            context.path_distance_int32 -= delta;\n        }\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        long long delta = get_distance_int64(config, context, i, i_next) + get_distance_int64(config, context, j, j_next) - get_distance_int64(config, context, i, j) - get_distance_int64(config, context, i_next, j_next);\n        if (delta > 0) {\n            apply_move = true;\n            weight_increase = config.weight_delta_coefficient * (std::exp(static_cast<double>(delta) / context.path_distance_int64) - 1.0);\n            context.path_distance_int64 -= delta;\n        }\n    }\n\n    if (apply_move) {\n        // applying 2 opt move\n        reverse_sub_path(context, i_next, j);\n\n        context.path[i].next = j;\n        context.path[i_next].next = j_next;\n        context.path[j].prev = i;\n        context.path[j_next].prev = i_next;\n\n        // updating weights\n        update_weight_undirected(config, context, i, j, weight_increase);\n        update_weight_undirected(config, context, i_next, j_next, weight_increase);\n\n        return true;\n    }\n    return false;\n}\n\n\nbool improve_by_2_opt_move(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        if (context.dont_look[i]) { continue; }\n        bool improved_here = false;\n\n        for (int j = 0; j < config.candidates_number; ++j) {\n            int candidate = context.candidates[i * config.candidates_number + j];\n\n            if (apply_2_opt_move(config, context, i, candidate)) {\n                // Reset don\u2019t-look bits on touched nodes (endpoints + their neighbors)\n                context.dont_look[i] = 0;\n                context.dont_look[candidate] = 0;\n\n                int i_prev = context.path[i].prev;\n                int i_next = context.path[i].next;\n                int c_prev = context.path[candidate].prev;\n                int c_next = context.path[candidate].next;\n\n                if (i_prev != null) context.dont_look[i_prev] = 0;\n                if (i_next != null) context.dont_look[i_next] = 0;\n                if (c_prev != null) context.dont_look[c_prev] = 0;\n                if (c_next != null) context.dont_look[c_next] = 0;\n\n                return true; // first-improvement\n            }\n        }\n\n        // No improvement with city i this sweep \u2192 mark it \"don't look\"\n        context.dont_look[i] = 1;\n    }\n    return false;\n}\n\nint local_2_opt_search(const Config& config, Context& context) {\n    int improved_times = 0;\n\n    // Initialize don\u2019t-look bits for this 2-opt phase\n    std::fill(context.dont_look.begin(), context.dont_look.end(), 0);\n\n    while (improve_by_2_opt_move(config, context)) { ++improved_times; };\n\n    return improved_times;\n}\n@@@\n\n* include/local_k_opt_search.hpp *:\n@@@\n#pragma once\n\n// standart imports\n#include <cmath>\n#include <iostream>\n\n\nvoid calc_potential_inplace(const Config& config, Context& context, int i, int j) {\n    if (i == j) {\n        context.potential[i * config.cities_number + j] = 0.0;\n        return;\n    }\n\n    // calculating total weight\n    double average_weight = context.total_weight[i] / (config.cities_number - 1);\n    double weight = context.weight[i * config.cities_number + j];\n\n    context.potential[i * config.cities_number + j] = (smooth_relu(weight) / average_weight) + config.exploration_coefficient * sqrt(log(context.total_simulations + 1) / (context.chosen_times[i * config.cities_number + j] + 1));  // always a positive value\n}\n\nint get_candidate_proportionally_by_potential(const Config& config, Context& context, int current_city, int start_city) {\n    int next_city = context.path[current_city].next;\n\n\tdouble total_potential = 0.0;\n    int candidates_available = 0;\n\n\tfor (int i = 0; i < config.candidates_number; ++i) {\n        int candidate = context.candidates[current_city * config.candidates_number + i];\n\n        calc_potential_inplace(config, context, current_city, candidate);\n        double potential = context.potential[current_city * config.cities_number + candidate];\n\n        if (candidate == next_city || candidate == start_city || (potential < config.min_potential_to_consider)) { continue; }  // not available\n\n\t\ttotal_potential += potential;\n        ++candidates_available;\n\t}\n\n    if (candidates_available == 0) { return null; }\n\n    // choosing the random available candidate proportionally\n    double random_potential = (static_cast<double>(rand()) / RAND_MAX) * total_potential;\n\n\tfor (int i = 0; i < config.candidates_number; ++i) {\n        int candidate = context.candidates[current_city * config.candidates_number + i];\n        double potential = context.potential[current_city * config.cities_number + candidate];\n\n        if (candidate == next_city || candidate == start_city || (potential < config.min_potential_to_consider)) { continue; }  // not available\n\n        random_potential -= potential;\n        if (random_potential <= 0) { return candidate; }\n    }\n\n\treturn null;\n}\n\n\nbool apply_k_opt_move(const Config& config, Context& context, int start_city, int max_k_opt_depth) {\n    ++context.total_simulations;\n\n    // first pair\n    int next_to_start_city = context.path[start_city].next;\n\n    context.pairs[0] = start_city;\n    context.pairs[1] = next_to_start_city;\n    int depth = 1;\n\n    int copied_to_saved_pairs = 0;\n    bool need_copy_to_saved_pairs = false;\n\n    // breaking an edge of the first pair\n    context.path[start_city].next = null;\n    context.path[next_to_start_city].prev = null;\n\n    // initializing gains\n    double gain_double; double gain_double_with_closure = 0.0;\n    int gain_int32; int gain_int32_with_closure = 0;\n    long long gain_int64; long long gain_int64_with_closure = 0;\n\n    if (config.distance_type == DistanceType::Double) {\n        gain_double = get_distance_double(config, context, start_city, next_to_start_city);\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        gain_int32 = get_distance_int32(config, context, start_city, next_to_start_city);\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        gain_int64 = get_distance_int64(config, context, start_city, next_to_start_city);\n    }\n\n    bool apply_move = false;\n\n    int current_city = next_to_start_city;\n\n    for (int i = 1; i < max_k_opt_depth; ++i) {\n        int proposed_city = get_candidate_proportionally_by_potential(config, context, current_city, start_city);\n\n        if (proposed_city == null) { return false; }  // no candidates, could not improve\n\n        ++context.chosen_times[current_city * config.cities_number + proposed_city];\n\t\t++context.chosen_times[proposed_city * config.cities_number + current_city];\n\n        int proposed_city_link = context.path[proposed_city].prev;  // city to disconnect from the proposed city (and maybe to connect to the start city)\n\n        context.pairs[2 * i] = proposed_city;\n        context.pairs[2 * i + 1] = proposed_city_link;\n        ++depth;\n\n        // applying 2 opt move\n        reverse_sub_path(context, current_city, proposed_city_link);\n\n        context.path[current_city].next = proposed_city;\n        context.path[proposed_city].prev = current_city;\n        context.path[proposed_city_link].prev = null;\n\n        // recalculating gains\n        if (config.distance_type == DistanceType::Double) {\n            gain_double += get_distance_double(config, context, proposed_city_link, proposed_city) - get_distance_double(config, context, current_city, proposed_city);\n            gain_double_with_closure = gain_double - get_distance_double(config, context, start_city, proposed_city_link);\n\n            if (gain_double_with_closure > 0.0) {\n                apply_move = true;\n                context.path_distance_double -= gain_double_with_closure;\n            }\n            if (context.current_best_delta_double < gain_double_with_closure) {\n                need_copy_to_saved_pairs = true;\n                context.current_best_delta_double = gain_double_with_closure;\n            }\n        }\n        if (config.distance_type == DistanceType::Int32) {\n            gain_int32 += get_distance_int32(config, context, proposed_city_link, proposed_city) - get_distance_int32(config, context, current_city, proposed_city);\n            gain_int32_with_closure = gain_int32 - get_distance_int32(config, context, start_city, proposed_city_link);\n\n            if (gain_int32_with_closure > 0) {\n                apply_move = true;\n                context.path_distance_int32 -= gain_int32_with_closure;\n            }\n            if (context.current_best_delta_int32 < gain_int32_with_closure) {\n                need_copy_to_saved_pairs = true;\n                context.current_best_delta_int32 = gain_int32_with_closure;\n            }\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            gain_int64 += get_distance_int64(config, context, proposed_city_link, proposed_city) - get_distance_int64(config, context, current_city, proposed_city);\n            gain_int64_with_closure = gain_int64 - get_distance_int64(config, context, start_city, proposed_city_link);\n\n            if (gain_int64_with_closure > 0) {\n                apply_move = true;\n                context.path_distance_int64 -= gain_int64_with_closure;\n            }\n            if (context.current_best_delta_int64 < gain_int64_with_closure) {\n                need_copy_to_saved_pairs = true;\n                context.current_best_delta_int64 = gain_int64_with_closure;\n            }\n        }\n\n        if (need_copy_to_saved_pairs) {  // for future weight updating\n            for (int i = copied_to_saved_pairs; i < depth; ++i) {\n                context.saved_pairs[2 * i] = context.pairs[2 * i];\n                context.saved_pairs[2 * i + 1] = context.pairs[2 * i + 1];\n            }\n\n            copied_to_saved_pairs = depth;\n            context.saved_depth = depth;\n\n            need_copy_to_saved_pairs = false;\n        }\n\n        if (apply_move) { break; }\n\n        current_city = proposed_city_link;\n    }\n\n    if (apply_move) {\n        // concluding the path to cycle\n        int end_city = context.pairs[2 * depth - 1];\n\n        context.path[start_city].next = end_city;\n        context.path[end_city].prev = start_city;\n\n        return true;\n    }\n    return false;\n}\n\n\nbool improve_by_k_opt_move(const Config& config, Context& context, int max_k_opt_depth) {\n    context.current_best_delta_double = -inf_double;\n    context.current_best_delta_int32 = -inf_int32;\n    context.current_best_delta_int64 = -inf_int64;\n\n    // saving current path length\n    double saved_path_distance_double = context.path_distance_double;\n    double saved_path_distance_int32 = context.path_distance_int32;\n    double saved_path_distance_int64 = context.path_distance_int64;\n\n    bool improved = false;\n\n    for (int i = 0; i < config.max_k_opt_simulations_without_improve_to_stop; ++i) {\n        // saving current path\n        convert_path_to_solution(config, context);\n\n        int start_city = get_random_int_by_module(config.cities_number);\n        if (apply_k_opt_move(config, context, start_city, max_k_opt_depth)) {\n            improved = true;\n            break;\n        }\n\n        // restoring the path that was before the move\n        convert_solution_to_path(config, context);\n    }\n\n    // updating weights from the best delta (it can be negative, if we've not improved)\n    double weight_delta = 0.0;\n    if (config.distance_type == DistanceType::Double && context.current_best_delta_double != -inf_double) {\n        weight_delta = config.weight_delta_coefficient * (std::exp(context.current_best_delta_double / saved_path_distance_double) - 1.0);\n    }\n    if (config.distance_type == DistanceType::Int32 && context.current_best_delta_int32 != -inf_int32) {\n        weight_delta = config.weight_delta_coefficient * (std::exp(static_cast<double>(context.current_best_delta_int32) / saved_path_distance_int32) - 1.0);\n    }\n    if (config.distance_type == DistanceType::Int64 && context.current_best_delta_int64 != -inf_int64) {\n        weight_delta = config.weight_delta_coefficient * (std::exp(static_cast<double>(context.current_best_delta_int64) / saved_path_distance_int64) - 1.0);\n    }\n\n    for (int i = 0; i < context.saved_depth; ++i) {\n        int current_city = context.saved_pairs[2 * i];\n        int proposed_city = (i < context.saved_depth - 1) ? context.saved_pairs[2 * i + 2] : context.saved_pairs[0];\n\n        double factor = 1.0;\n        if (config.use_sensitivity_decrease && !improved) {\n            // exponential decrease in sensitivity\n            factor = std::exp(-static_cast<double>(i) / config.sensitivity_temperature);\n        }\n\n        update_weight_undirected(config, context, current_city, proposed_city, weight_delta * factor);\n    }\n\n    return improved;\n}\n\nint local_k_opt_search(const Config& config, Context& context, int max_k_opt_depth) {  \n    // calculating total weight (for mitigating precision based errors, that was found empirically)\n    for (int i = 0; i < config.cities_number; ++i) {\n        double total_weight = 0.0;\n\n        for (int j = 0; j < config.cities_number; ++j) {\n            total_weight += smooth_relu(context.weight[i * config.cities_number + j]);\n        }\n\n        context.total_weight[i] = total_weight;\n    }\n\n    // running simulations and trying to improve\n    int improved_times = 0;\n\n    while (improve_by_k_opt_move(config, context, max_k_opt_depth)) { ++improved_times; };\n\n    return improved_times;\n}\n@@@\n\n* include/additional.hpp *:\n@@@\n#pragma once\n\n#include <array>\n#include <algorithm>\n\n// Or-opt (1-node relocation) local search, KNN-constrained.\n// Moves a single node 'a' from between (u,a,v) to after u_ins (between u_ins and u_next)\n// if it shortens the tour. Uses the active distance type and updates path length + weights.\n\ninline bool apply_or_opt_1(const Config& config, Context& context, int a, int u_ins) {\n    if (a == u_ins) return false;\n\n    const int u = context.path[a].prev;\n    const int v = context.path[a].next;\n    if (u == a || v == a) return false;\n\n    // Do not insert adjacent to itself; also avoid no-op positions\n    if (u_ins == u || u_ins == v || u_ins == a) return false;\n\n    const int u_next = context.path[u_ins].next;\n    if (u_next == a || u_next == u || u_next == u_ins) return false;\n\n    bool improved = false;\n    double w_increase = 0.0;\n\n    if (config.distance_type == DistanceType::Double) {\n        const double old_sum =\n            get_distance_double(config, context, u, a) +\n            get_distance_double(config, context, a, v) +\n            get_distance_double(config, context, u_ins, u_next);\n\n        const double new_sum =\n            get_distance_double(config, context, u, v) +\n            get_distance_double(config, context, u_ins, a) +\n            get_distance_double(config, context, a, u_next);\n\n        const double delta = old_sum - new_sum;\n        if (delta > 0.0) {\n            context.path_distance_double -= delta;\n            w_increase = config.weight_delta_coefficient * (std::exp(delta / (context.path_distance_double + new_sum)) - 1.0);\n            improved = true;\n        }\n    } else if (config.distance_type == DistanceType::Int32) {\n        const int old_sum =\n            get_distance_int32(config, context, u, a) +\n            get_distance_int32(config, context, a, v) +\n            get_distance_int32(config, context, u_ins, u_next);\n\n        const int new_sum =\n            get_distance_int32(config, context, u, v) +\n            get_distance_int32(config, context, u_ins, a) +\n            get_distance_int32(config, context, a, u_next);\n\n        const int delta = old_sum - new_sum;\n        if (delta > 0) {\n            context.path_distance_int32 -= delta;\n            w_increase = config.weight_delta_coefficient * (std::exp(static_cast<double>(delta) / (context.path_distance_int32 + new_sum)) - 1.0);\n            improved = true;\n        }\n    } else { // Int64\n        const long long old_sum =\n            get_distance_int64(config, context, u, a) +\n            get_distance_int64(config, context, a, v) +\n            get_distance_int64(config, context, u_ins, u_next);\n\n        const long long new_sum =\n            get_distance_int64(config, context, u, v) +\n            get_distance_int64(config, context, u_ins, a) +\n            get_distance_int64(config, context, a, u_next);\n\n        const long long delta = old_sum - new_sum;\n        if (delta > 0) {\n            context.path_distance_int64 -= delta;\n            w_increase = config.weight_delta_coefficient * (std::exp(static_cast<double>(delta) / (context.path_distance_int64 + new_sum)) - 1.0);\n            improved = true;\n        }\n    }\n\n    if (!improved) return false;\n\n    // Detach a from (u,a,v)\n    context.path[u].next = v;\n    context.path[v].prev = u;\n\n    // Insert a after u_ins (between u_ins and u_next)\n    context.path[a].prev = u_ins;\n    context.path[a].next = u_next;\n    context.path[u_ins].next = a;\n    context.path[u_next].prev = a;\n\n    // Weight updates on newly created edges\n    update_weight_undirected(config, context, u, v, w_increase);\n    update_weight_undirected(config, context, u_ins, a, w_increase);\n    update_weight_undirected(config, context, a, u_next, w_increase);\n\n    return true;\n}\n\ninline bool improve_by_or_opt_1(const Config& config, Context& context) {\n    // Try relocating each city using its candidate set as insertion anchors.\n    for (int a = 0; a < config.cities_number; ++a) {\n        for (int j = 0; j < config.candidates_number; ++j) {\n            int u_ins = context.candidates[a * config.candidates_number + j];\n            if (apply_or_opt_1(config, context, a, u_ins)) {\n                return true; // apply first improving move (first-improvement)\n            }\n        }\n    }\n    return false;\n}\n\ninline int local_or_opt_search(const Config& config, Context& context) {\n    int improved_times = 0;\n    while (improve_by_or_opt_1(config, context)) { ++improved_times; }\n    return improved_times;\n}\n\n// -----------------------------------------------------------------------------\n// Double-bridge (4-opt) perturbation: cheap diversification between restarts.\n// Cuts four edges (a,a+1), (b,b+1), (c,c+1), (d,d+1) and reconnects segments\n// to jump to a new basin. Runs in O(n). Assumes context.solution reflects the\n// current path; rebuilds path at the end.\n// New tour order: [0..a] + [c+1..d] + [b+1..c] + [a+1..b] + [d+1..n-1]\ninline void apply_double_bridge_perturbation(const Config& config, Context& context) {\n    const int n = config.cities_number;\n    if (n < 8) return;\n\n    // Ensure context.solution corresponds to current path\n    convert_path_to_solution(config, context);\n\n    // Choose 4 breakpoints roughly quarter-spaced, then sort them\n    int a = rand() % n;\n    int b = (a + n / 4) % n;\n    int c = (b + n / 4) % n;\n    int d = (c + n / 4) % n;\n\n    std::array<int,4> idx{a, b, c, d};\n    std::sort(idx.begin(), idx.end());\n    a = idx[0]; b = idx[1]; c = idx[2]; d = idx[3];\n\n    // Build new tour\n    std::vector<int> s(n), newtour;\n    newtour.reserve(n);\n    for (int i = 0; i < n; ++i) s[i] = context.solution[i];\n\n    for (int i = 0; i <= a; ++i) newtour.push_back(s[i]);\n    for (int i = c + 1; i <= d; ++i) newtour.push_back(s[i]);\n    for (int i = b + 1; i <= c; ++i) newtour.push_back(s[i]);\n    for (int i = a + 1; i <= b; ++i) newtour.push_back(s[i]);\n    for (int i = d + 1; i < n; ++i) newtour.push_back(s[i]);\n\n    // Write back and rebuild path\n    for (int i = 0; i < n; ++i) context.solution[i] = newtour[i];\n    convert_solution_to_path(config, context);\n}\n@@@\n\n* TSP.cpp *:\n@@@\n// standart imports\n#include <string>\n#include <chrono>\n#include <fstream>\n#include <iomanip>\n#include <iostream>\n\n// json imports\n#include \"include/json.hpp\"\n\nusing json = nlohmann::json;\nusing namespace std::chrono;\n\n// other imports\n#include \"include/context.hpp\"\n#include \"include/utils.hpp\"\n#include \"include/random_solution.hpp\"\n#include \"include/local_2_opt_search.hpp\"\n#include \"include/local_k_opt_search.hpp\"\n\n// additional functions & methods\n#include \"include/additional.hpp\"\n\n\n// --- config parameters ---\n//   `cities_number`: number of points on the 2D surface.\n//   `input_path`: path to the file with cities coordinates and the edge heat map.\n//   `output_path`: path to the file where to write the optimal hamiltonian cycle and corresponding metrics.\n//   `use_heat_map_as_initial_weights`: whether to use the heat map as initial for the weights matrix.\n//   `candidates_source`: 'knn' or 'heat_map', if 'heat_map' the candidates for each city are the nearest cities to it.\n//   `candidates_number`: number of candidate cities for each city.\n//   `max_k_opt_depth`: maximum chain links (k parameter) in simulation.\n//   `random_k_opt_depth_after_first_iteration`: if to randomly change the `max_k_opt_depth` after the first iteration (restart).\n//   `min_potential_to_consider`: minimum potential of an edge to consider it in simulation (look at the formula for potential to understand fully).\n//   `exploration_coefficient`: hyperparameter for exploration.\n//   `weight_delta_coefficient`: hyperparameter for updating the weights matrix.\n//   `use_sensitivity_decrease`: whether to reduce weight flow for deep edges in unsuccessful k'opt search.\n//   `sensitivity_temperature`: hyperparameter for controlling the weight decrease in unsuccessful simulation depending on the length of a chain.\n//   `max_k_opt_simulations_without_improve_to_stop`: the number of MCTS simulations per restart.\n//   `restarts_number`: number of times algorithm restarts while maintaining the weights matrix (number of iterations).\n//   `distance_type`: \"int32\", \"int64\" or \"double\".\n//   `magnify_rate`: when `distance_type` is \"int32\" or \"int64\" algorithm relies only on integers to find an optimal solution (for speed), therefore each distance is magnified by `magnify_rate` value and rounded to integer. (if `distance_type` = 'double' this parameter is ignored)\n\n\nvoid read_input_data(const Config& config, Context& context) {\n    std::ifstream input_file(config.input_path);\n\n    int cities_number; input_file >> cities_number;\n\n    // reading coordinates\n    for (int i = 0; i < config.cities_number; ++i) {\n        input_file >> context.coordinates_double_x[i] >> context.coordinates_double_y[i];\n\n        if (config.distance_type == DistanceType::Int32) {\n            context.coordinates_int32_x[i] = static_cast<int>(0.5 + context.coordinates_double_x[i] * config.magnify_rate);\n            context.coordinates_int32_y[i] = static_cast<int>(0.5 + context.coordinates_double_y[i] * config.magnify_rate);\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            context.coordinates_int64_x[i] = static_cast<long long>(0.5 + context.coordinates_double_x[i] * config.magnify_rate);\n            context.coordinates_int64_y[i] = static_cast<long long>(0.5 + context.coordinates_double_y[i] * config.magnify_rate);\n        }\n    }\n\n    // calculating distances (build only the active metric; DOUBLE is computed on-the-fly)\n    if (config.distance_type == DistanceType::Int32) {\n        for (int i = 0; i < config.cities_number; ++i) {\n            for (int j = 0; j < config.cities_number; ++j) {\n                context.distance_int32[i * config.cities_number + j] = calc_distance_int32(context, i, j);\n            }\n        }\n    } else if (config.distance_type == DistanceType::Int64) {\n        for (int i = 0; i < config.cities_number; ++i) {\n            for (int j = 0; j < config.cities_number; ++j) {\n                context.distance_int64[i * config.cities_number + j] = calc_distance_int64(context, i, j);\n            }\n        }\n    } else {\n        // DistanceType::Double \u2014 no precompute needed\n    }\n\n    if (config.use_heat_map_as_initial_weights) {\n        // reading heat map\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            input_file >> context.heat_map[i];\n            context.weight[i] = context.heat_map[i];\n        }\n    } else {\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            context.weight[i] = 0.0;\n        }\n    }\n\n    // initializing total weight\n    for (int i = 0; i < config.cities_number; ++i) {\n        double total_weight = 0.0;\n\n        for (int j = 0; j < config.cities_number; ++j) {\n            total_weight += smooth_relu(context.weight[i * config.cities_number + j]);\n        }\n\n        context.total_weight[i] = total_weight;\n    }\n\n    // calculating candidates\n    if (config.candidates_source == CandidatesSource::KNN) {\n        // Use on-the-fly squared distances from coordinates (no double matrix dependency in comparator).\n        identify_candidates_for_each_node(config, context, nullptr, false);\n    } else if (config.candidates_source == CandidatesSource::HeatMap) {\n        identify_candidates_for_each_node(config, context, context.heat_map, true);\n    } else {\n        throw std::invalid_argument(\"Unknown candidates source.\");\n    }\n}\n\n\nvoid solve(const Config& config, Context& context) {  // the found solution will be stored in context.solution\n    // initialization\n    std::chrono::time_point<std::chrono::high_resolution_clock> start_total_time = high_resolution_clock::now(), end_total_time;\n    std::chrono::time_point<std::chrono::high_resolution_clock> start_time, end_time;\n\n    int max_k_opt_depth = config.max_k_opt_depth;\n\n\tfor (int i = 1; i < config.restarts_number + 1; ++i) {  // maybe add some stopping criteria (with BHH 2D constant for example)\n        if (i % 100 == 0) { std::cout << \"# --------- Iteration: \" << i << '\\n'; }\n        int improved_times = 0;\n\n        // initialization (diversify + stronger starts)\n        start_time = high_resolution_clock::now();\n\n        bool used_perturb = false;\n        // Half of restarts: kick best-so-far tour with a double-bridge (cheap 4-opt)\n        if ((i % 2 == 0) && context.best_path_distance_double < inf_double) {\n            // Start from best_path, then perturb\n            for (int v = 0; v < config.cities_number; ++v) {\n                context.path[v].prev = context.best_path[v].prev;\n                context.path[v].next = context.best_path[v].next;\n            }\n            // Build solution for the current path, apply kick, path will be rebuilt\n            apply_double_bridge_perturbation(config, context);\n            used_perturb = true;\n        } else {\n            // Fast NN-like seeding (existing function)\n            generate_random_solution(config, context);\n            convert_solution_to_path(config, context);\n        }\n\n        end_time = high_resolution_clock::now();\n\n        calc_and_save_total_distance(config, context);\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #1 (random cycle). Total distance: \" << context.path_distance_double << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // local 2opt search\n        start_time = high_resolution_clock::now();\n\t\timproved_times = local_2_opt_search(config, context);\n        end_time = high_resolution_clock::now();\n\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #2 (local 2'opt search). Total distance: \" << context.path_distance_double << \", Improved times: \" << improved_times << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // local Or-opt (1-node relocation)\n        start_time = high_resolution_clock::now();\n        int or_improved = local_or_opt_search(config, context);\n        end_time = high_resolution_clock::now();\n\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #2.5 (local Or-opt-1). Total distance: \" << context.path_distance_double << \", Improved times: \" << or_improved << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // local k opt search\n        start_time = high_resolution_clock::now();\n\t\timproved_times = local_k_opt_search(config, context, max_k_opt_depth);\n        end_time = high_resolution_clock::now();\n\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #3 (local k'opt search). Total distance: \" << context.path_distance_double << \", Improved times: \" << improved_times << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // changing the best path\n        if (\n            (config.distance_type == DistanceType::Double && context.path_distance_double < context.best_path_distance_double) ||\n            (config.distance_type == DistanceType::Int32 && context.path_distance_int32 < context.best_path_distance_int32) ||\n            (config.distance_type == DistanceType::Int64 && context.path_distance_int64 < context.best_path_distance_int64)\n        ) {\n            store_path_as_best(config, context);  // also updates best path distance\n        }\n\n        // Early stop when we are within 3% of the BHH expectation L* \u2248 \u03b2\u221a(nA), \u03b2\u22480.7120 for A=1 ([0,1]^2).\n        {\n            // Always compare TRUE Euclidean tour length against BHH target\n            double best_double = context.best_path_distance_double;\n            double bhh_target = expected_optimal_tsp_length_2d(config.cities_number, 1.0, 1.0);\n            double threshold = 1.01 * bhh_target;   // 1.0% margin (favor path quality)\n            if (best_double <= threshold) {\n                std::cout << std::setprecision(8)\n                          << \"Early stop: reached BHH threshold (\" << threshold\n                          << \") with best=\" << best_double << \" at iteration \" << i << \"\\n\";\n                break;\n            }\n        }\n\n        if (config.random_k_opt_depth_after_first_iteration) {\n            // random MCTS depth change\n            max_k_opt_depth = std::min(10 + (rand() % 80), config.cities_number / 2);\n        }\n\n        if (i % 100 == 0) { std::cout << '\\n'; }\n\t}\n\n    // final convertation (context.best_path to context.solution)\n    restore_best_path(config, context);\n    convert_path_to_solution(config, context);\n\n    end_total_time = high_resolution_clock::now();\n    std::cout << \"Total elapsed time: \" << static_cast<double>(duration_cast<milliseconds>(end_total_time - start_total_time).count()) / 1000 << \" sec\\n\\n\";\n}\n\n\nint main(int argc, char** argv) {\n    // reading configuration\n    std::cout << \"Reading configuration...\\n\";\n    if (argc != 2) {\n        std::cerr << \"Usage: The first and only argument should be the path to the config file.\";\n        return 1;\n    }\n    \n    std::ifstream config_file(argv[1]);\n    json config_raw; config_file >> config_raw;\n    Config config(config_raw);\n\n    std::cout << \"Number of cities: \" << config.cities_number << \"\\n\\n\";\n\n    // initialization & memory allocation\n    Context context(config);\n\n    // reading input data\n    std::cout << \"Reading input data...\\n\";\n    read_input_data(config, context);\n\n    // solving\n    std::cout << \"Solving...\\n\";\n    solve(config, context);\n\n    // printing the solution\n    std::ofstream output_file(config.output_path);\n\n    std::cout << \"Final solution:\\n\";\n    for (int i = 0; i < config.cities_number; ++i) {\n        std::cout << context.solution[i] << ' ';\n        output_file << context.solution[i] << ' ';\n    }\n    std::cout << \"\\n\\nFinal solution score: \" << calc_total_distance_double(config, context) << '\\n';\n\n    return 0;\n}\n@@@\n\n* config.json *:\n@@@\n{\n    \"cities_number\": 500,\n    \"input_path\": \"/Users/dark-creator/solomon/self/openevolve-usage/UTSP/repo/src/local_search_v2/input.txt\",\n    \"output_path\": \"/Users/dark-creator/solomon/self/openevolve-usage/UTSP/repo/src/local_search_v2/output.txt\",\n    \"use_heat_map_as_initial_weights\": false,\n    \"candidates_source\": \"knn\",\n    \"candidates_number\": 48,\n    \"max_k_opt_depth\": 80,\n    \"random_k_opt_depth_after_first_iteration\": true,\n    \"min_potential_to_consider\": 0.0,\n    \"exploration_coefficient\": 0.15,\n    \"weight_delta_coefficient\": 6.0,\n    \"use_sensitivity_decrease\": true,\n    \"sensitivity_temperature\": 8.0,\n    \"max_k_opt_simulations_without_improve_to_stop\": 160,\n    \"restarts_number\": 900,\n    \"distance_type\": \"int32\",\n    \"magnify_rate\": 1000000\n}\n@@@\n\n* changes_description.txt *:\n@@@\n# Summary of changes (2025-10-09) \u2014 **Shorter tours per second: don\u2019t-look 2-opt + zero double-matrix + tighter BHH**\n\n**1) Don\u2019t-look 2-opt (Lin\u2013Kernighan heuristic)**\n- Added `Context::dont_look` (uint8_t bitset) and wired it into 2-opt:\n  - Skip cities that yielded no improvement in the last sweep.\n  - When an improving 2-opt move fires, clear bits on the endpoints and their neighbors.\n- Effect: far fewer pointless candidate scans; same result quality with much less work per sweep.\n\n**2) Remove the n\u00b2 DOUBLE distance matrix hot-path**\n- `get_distance_double(...)` now computes from coordinates on-the-fly.\n- `read_input_data(...)` **stops** precomputing `distance_double` entirely (INT matrices still built when in int-mode).\n- Exact final score preserved (DOUBLE is still used for reporting and BHH checks, just without a matrix).\n\n**3) Quality-biased stopping**\n- Tightened BHH gate **1.015 \u2192 1.01**, i.e., stop only when `L \u2264 1.01 \u00b7 0.712 \u00b7 \u221an` on \\([0,1]^2\\).\n- Formula: \\( \\mathbb{E}[L^*] \\approx \\beta_{2D}\\sqrt{nA}, \\beta_{2D}\\approx 0.712, A=1 \\).\n\n**4) More useful work per run**\n- `candidates_number: 40 \u2192 48` (richer local neighborhoods).\n- `restarts_number: 500 \u2192 900` (runtime stays well under 120 s thanks to don\u2019t-look speedups).\n\n**Why FITNESS improves**\n- Length dominates the score. Don\u2019t-look turns the same wall-clock into more effective improving moves and tolerates more restarts \u2192 lower average tour length (empirically ~16.6\u201316.8 @ n=500 with current operators). On-the-fly doubles remove cache thrash, trimming overhead further.\n\n**Key deltas**\n- **2-opt gain** (unchanged): \\( \\Delta = d(i,i') + d(j,j') - d(i,j) - d(i',j') \\) (apply if \\( \\Delta>0 \\)).\n- **BHH target**: \\(L^\\* \\approx 0.712\\sqrt{n}\\) for unit square.\n\n**Constraints honored**\n- `cities_number`, `input_path`, `output_path` untouched; `int32/int64/double` all supported.\n@@@\n```\n\n# Task\nSuggest improvements to the program that will improve its FITNESS SCORE.\nThe system maintains diversity across these dimensions: complexity, diversity\nDifferent solutions with similar fitness but different features are valuable.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n```\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n```\n\nExample of valid diff format:\n```\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n```\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT:\n* Do not rewrite the entire program - focus on targeted improvements.\n* Provide \"<<<<<<< SEARCH\", \"=======\" and \">>>>>>> REPLACE\" blocks inside a triple code quotes ``` ``` for proper whitespace handling and parsing.\n* Mind the \"<<<<<<<\", \"=======\" and \">>>>>>>\" as they are crucial for parsing.", "responses": ["Below are targeted patches to push the average tour length toward ~16.5 while keeping runtime well under the 120 s cap. Main ideas:\r\n\r\n* **Double-first 2-opt acceptance** (even in int modes) to avoid quantization rejecting small but real gains.\r\n  Decision formula (double):\r\n  [\r\n  \\Delta_d = d(i,i') + d(j,j') - d(i,j) - d(i',j') \\quad\\text{(accept if }\\Delta_d>0\\text{)}\r\n  ]\r\n* **Union-KNN neighborhood + a few random probes** in 2-opt to escape myopic KNN of one endpoint.\r\n* **GRASP-style seeding (r=4)**: pick next city uniformly from the top-4 nearest by (d^2), improving basin quality across restarts.\r\n* **Hard time guard (118 000 ms)** so we can safely **raise** search effort (`restarts_number`, candidate K, k-opt sims) without risking the 120 s cap.\r\n* **Config tuning for length-first scoring**: `candidates_number: 48\u219264`, `restarts_number: 900\u21922000`, `max_k_opt_simulations_without_improve_to_stop: 160\u2192200`.\r\n\r\n---\r\n\r\n### Diffs (apply all)\r\n\r\n```diff\r\n<<<<<<< SEARCH\r\nbool apply_2_opt_move(const Config& config, Context& context, int i, int j) {\r\n    if (is_cities_same_or_adjacent(config, context, i, j)) { return false; }\r\n\r\n    int i_next = context.path[i].next;\r\n\tint j_next = context.path[j].next;\r\n\r\n    ++context.chosen_times[i * config.cities_number + j];\r\n\t++context.chosen_times[j * config.cities_number + i];\r\n\t++context.chosen_times[i_next * config.cities_number + j_next];\r\n\t++context.chosen_times[j_next * config.cities_number + i_next];\r\n\r\n    ++context.total_simulations;\r\n\r\n    // calculating delta\r\n    bool apply_move = false;\r\n    double weight_increase = 0.0;\r\n\r\n    if (config.distance_type == DistanceType::Double) {\r\n        double delta = get_distance_double(config, context, i, i_next) + get_distance_double(config, context, j, j_next) - get_distance_double(config, context, i, j) - get_distance_double(config, context, i_next, j_next);\r\n        if (delta > 0.0) {\r\n            apply_move = true;\r\n            weight_increase = config.weight_delta_coefficient * (std::exp(delta / context.path_distance_double) - 1.0);\r\n            context.path_distance_double -= delta;\r\n        }\r\n    }\r\n    if (config.distance_type == DistanceType::Int32) {\r\n        int delta = get_distance_int32(config, context, i, i_next) + get_distance_int32(config, context, j, j_next) - get_distance_int32(config, context, i, j) - get_distance_int32(config, context, i_next, j_next);\r\n        if (delta > 0) {\r\n            apply_move = true;\r\n            weight_increase = config.weight_delta_coefficient * (std::exp(static_cast<double>(delta) / context.path_distance_int32) - 1.0);\r\n            context.path_distance_int32 -= delta;\r\n        }\r\n    }\r\n    if (config.distance_type == DistanceType::Int64) {\r\n        long long delta = get_distance_int64(config, context, i, i_next) + get_distance_int64(config, context, j, j_next) - get_distance_int64(config, context, i, j) - get_distance_int64(config, context, i_next, j_next);\r\n        if (delta > 0) {\r\n            apply_move = true;\r\n            weight_increase = config.weight_delta_coefficient * (std::exp(static_cast<double>(delta) / context.path_distance_int64) - 1.0);\r\n            context.path_distance_int64 -= delta;\r\n        }\r\n    }\r\n\r\n    if (apply_move) {\r\n        // applying 2 opt move\r\n        reverse_sub_path(context, i_next, j);\r\n\r\n        context.path[i].next = j;\r\n        context.path[i_next].next = j_next;\r\n        context.path[j].prev = i;\r\n        context.path[j_next].prev = i_next;\r\n\r\n        // updating weights\r\n        update_weight_undirected(config, context, i, j, weight_increase);\r\n        update_weight_undirected(config, context, i_next, j_next, weight_increase);\r\n\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n=======\r\nbool apply_2_opt_move(const Config& config, Context& context, int i, int j) {\r\n    if (is_cities_same_or_adjacent(config, context, i, j)) { return false; }\r\n\r\n    const int i_next = context.path[i].next;\r\n    const int j_next = context.path[j].next;\r\n\r\n    ++context.chosen_times[i * config.cities_number + j];\r\n    ++context.chosen_times[j * config.cities_number + i];\r\n    ++context.chosen_times[i_next * config.cities_number + j_next];\r\n    ++context.chosen_times[j_next * config.cities_number + i_next];\r\n    ++context.total_simulations;\r\n\r\n    // --- Decide in DOUBLE to avoid quantization misses (even in int modes) ---\r\n    const double delta_d =\r\n        get_distance_double(config, context, i, i_next)\r\n      + get_distance_double(config, context, j, j_next)\r\n      - get_distance_double(config, context, i, j)\r\n      - get_distance_double(config, context, i_next, j_next);\r\n\r\n    if (delta_d <= 0.0) return false;  // no improvement in true Euclidean\r\n\r\n    double weight_increase = 0.0;\r\n\r\n    // Keep the active metric counters consistent, but base weights on double.\r\n    if (config.distance_type == DistanceType::Double) {\r\n        weight_increase = config.weight_delta_coefficient * (std::exp(delta_d / context.path_distance_double) - 1.0);\r\n        context.path_distance_double -= delta_d;\r\n    } else if (config.distance_type == DistanceType::Int32) {\r\n        const int delta_i =\r\n            get_distance_int32(config, context, i, i_next)\r\n          + get_distance_int32(config, context, j, j_next)\r\n          - get_distance_int32(config, context, i, j)\r\n          - get_distance_int32(config, context, i_next, j_next);\r\n        context.path_distance_int32 -= delta_i;\r\n        weight_increase = config.weight_delta_coefficient * (std::exp(delta_d / context.path_distance_double) - 1.0);\r\n        // keep double distance in sync too for accurate subsequent denominators\r\n        context.path_distance_double -= delta_d;\r\n    } else { // Int64\r\n        const long long delta_l =\r\n            get_distance_int64(config, context, i, i_next)\r\n          + get_distance_int64(config, context, j, j_next)\r\n          - get_distance_int64(config, context, i, j)\r\n          - get_distance_int64(config, context, i_next, j_next);\r\n        context.path_distance_int64 -= delta_l;\r\n        weight_increase = config.weight_delta_coefficient * (std::exp(delta_d / context.path_distance_double) - 1.0);\r\n        context.path_distance_double -= delta_d;\r\n    }\r\n\r\n    // --- Apply the 2-opt move ---\r\n    reverse_sub_path(context, i_next, j);\r\n    context.path[i].next = j;\r\n    context.path[i_next].next = j_next;\r\n    context.path[j].prev = i;\r\n    context.path[j_next].prev = i_next;\r\n\r\n    // --- Update weights on new edges ---\r\n    update_weight_undirected(config, context, i, j, weight_increase);\r\n    update_weight_undirected(config, context, i_next, j_next, weight_increase);\r\n\r\n    return true;\r\n}\r\n>>>>>>> REPLACE\r\n```\r\n\r\n```diff\r\n<<<<<<< SEARCH\r\nbool improve_by_2_opt_move(const Config& config, Context& context) {\r\n    for (int i = 0; i < config.cities_number; ++i) {\r\n        if (context.dont_look[i]) { continue; }\r\n        bool improved_here = false;\r\n\r\n        for (int j = 0; j < config.candidates_number; ++j) {\r\n            int candidate = context.candidates[i * config.candidates_number + j];\r\n\r\n            if (apply_2_opt_move(config, context, i, candidate)) {\r\n                // Reset don\u2019t-look bits on touched nodes (endpoints + their neighbors)\r\n                context.dont_look[i] = 0;\r\n                context.dont_look[candidate] = 0;\r\n\r\n                int i_prev = context.path[i].prev;\r\n                int i_next = context.path[i].next;\r\n                int c_prev = context.path[candidate].prev;\r\n                int c_next = context.path[candidate].next;\r\n\r\n                if (i_prev != null) context.dont_look[i_prev] = 0;\r\n                if (i_next != null) context.dont_look[i_next] = 0;\r\n                if (c_prev != null) context.dont_look[c_prev] = 0;\r\n                if (c_next != null) context.dont_look[c_next] = 0;\r\n\r\n                return true; // first-improvement\r\n            }\r\n        }\r\n\r\n        // No improvement with city i this sweep \u2192 mark it \"don't look\"\r\n        context.dont_look[i] = 1;\r\n    }\r\n    return false;\r\n}\r\n=======\r\nbool improve_by_2_opt_move(const Config& config, Context& context) {\r\n    for (int i = 0; i < config.cities_number; ++i) {\r\n        if (context.dont_look[i]) { continue; }\r\n\r\n        const int i_next = context.path[i].next;\r\n\r\n        auto on_improve = [&](int candidate)->bool {\r\n            if (apply_2_opt_move(config, context, i, candidate)) {\r\n                // Reset don\u2019t-look bits on touched nodes (endpoints + their neighbors)\r\n                context.dont_look[i] = 0;\r\n                context.dont_look[candidate] = 0;\r\n\r\n                const int i_prev = context.path[i].prev;\r\n                const int i_nxt = context.path[i].next;\r\n                const int c_prev = context.path[candidate].prev;\r\n                const int c_next = context.path[candidate].next;\r\n\r\n                if (i_prev != null) context.dont_look[i_prev] = 0;\r\n                if (i_nxt  != null) context.dont_look[i_nxt]  = 0;\r\n                if (c_prev != null) context.dont_look[c_prev] = 0;\r\n                if (c_next != null) context.dont_look[c_next] = 0;\r\n\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        // 1) Try KNN(i)\r\n        for (int j = 0; j < config.candidates_number; ++j) {\r\n            const int candidate = context.candidates[i * config.candidates_number + j];\r\n            if (on_improve(candidate)) return true; // first-improvement\r\n        }\r\n\r\n        // 2) Try KNN(i_next) to enlarge the neighborhood cheaply\r\n        if (i_next != null) {\r\n            for (int j = 0; j < config.candidates_number; ++j) {\r\n                const int candidate = context.candidates[i_next * config.candidates_number + j];\r\n                if (on_improve(candidate)) return true;\r\n            }\r\n        }\r\n\r\n        // 3) A few random probes for diversification (cheap)\r\n        for (int t = 0; t < 8; ++t) {\r\n            const int candidate = get_random_int_by_module(config.cities_number);\r\n            if (on_improve(candidate)) return true;\r\n        }\r\n\r\n        // No improvement with city i this sweep \u2192 mark it \"don't look\"\r\n        context.dont_look[i] = 1;\r\n    }\r\n    return false;\r\n}\r\n>>>>>>> REPLACE\r\n```\r\n\r\n```diff\r\n<<<<<<< SEARCH\r\nvoid generate_random_solution(const Config& config, Context& context) {\r\n    for (int i = 0; i < config.cities_number; ++i) {\r\n        context.solution[i] = null;\r\n        context.is_city_selected[i] = false;\r\n    }\r\n\r\n    // Start from a random city\u2026\r\n    int start = select_random_city(config, context);\r\n    context.solution[0] = start;\r\n    context.is_city_selected[start] = true;\r\n\r\n    int current = start;\r\n\r\n    // \u2026then greedily pick the nearest *unselected* candidate (by squared distance).\r\n    for (int pos = 1; pos < config.cities_number; ++pos) {\r\n        int next_city = null;\r\n        double best_d2 = inf_double;\r\n\r\n        // Prefer KNN candidate set for speed.\r\n        for (int j = 0; j < config.candidates_number; ++j) {\r\n            int cand = context.candidates[current * config.candidates_number + j];\r\n            if (cand == current || context.is_city_selected[cand]) { continue; }\r\n            double dx = context.coordinates_double_x[current] - context.coordinates_double_x[cand];\r\n            double dy = context.coordinates_double_y[current] - context.coordinates_double_y[cand];\r\n            double d2 = dx * dx + dy * dy;\r\n            if (d2 < best_d2) { best_d2 = d2; next_city = cand; }\r\n        }\r\n\r\n        // Fallback: global nearest if all KNN are already taken (rare late stage).\r\n        if (next_city == null) {\r\n            for (int cand = 0; cand < config.cities_number; ++cand) {\r\n                if (cand == current || context.is_city_selected[cand]) { continue; }\r\n                double dx = context.coordinates_double_x[current] - context.coordinates_double_x[cand];\r\n                double dy = context.coordinates_double_y[current] - context.coordinates_double_y[cand];\r\n                double d2 = dx * dx + dy * dy;\r\n                if (d2 < best_d2) { best_d2 = d2; next_city = cand; }\r\n            }\r\n        }\r\n\r\n        // Commit choice\r\n        context.solution[pos] = next_city;\r\n        context.is_city_selected[next_city] = true;\r\n        current = next_city;\r\n    }\r\n}\r\n=======\r\nvoid generate_random_solution(const Config& config, Context& context) {\r\n    for (int i = 0; i < config.cities_number; ++i) {\r\n        context.solution[i] = null;\r\n        context.is_city_selected[i] = false;\r\n    }\r\n\r\n    // Start from a random city\u2026\r\n    int start = select_random_city(config, context);\r\n    context.solution[0] = start;\r\n    context.is_city_selected[start] = true;\r\n\r\n    int current = start;\r\n\r\n    // GRASP seeding: pick uniformly from top-r nearest (r=4) by squared distance.\r\n    const int R = 4;\r\n\r\n    for (int pos = 1; pos < config.cities_number; ++pos) {\r\n        // Build a small pool of best candidates by d^2\r\n        int pool[R]; double pool_d2[R];\r\n        for (int t = 0; t < R; ++t) { pool[t] = null; pool_d2[t] = inf_double; }\r\n\r\n        auto try_push = [&](int cand, double d2) {\r\n            // Insert into sorted pool of size R\r\n            for (int t = 0; t < R; ++t) {\r\n                if (d2 < pool_d2[t]) {\r\n                    for (int u = R - 1; u > t; --u) { pool[u] = pool[u-1]; pool_d2[u] = pool_d2[u-1]; }\r\n                    pool[t] = cand; pool_d2[t] = d2;\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n\r\n        // Prefer KNN set\r\n        for (int j = 0; j < config.candidates_number; ++j) {\r\n            int cand = context.candidates[current * config.candidates_number + j];\r\n            if (cand == current || context.is_city_selected[cand]) { continue; }\r\n            double dx = context.coordinates_double_x[current] - context.coordinates_double_x[cand];\r\n            double dy = context.coordinates_double_y[current] - context.coordinates_double_y[cand];\r\n            try_push(cand, dx*dx + dy*dy);\r\n        }\r\n\r\n        // Fallback: global scan if pool is empty (rare)\r\n        if (pool[0] == null) {\r\n            for (int cand = 0; cand < config.cities_number; ++cand) {\r\n                if (cand == current || context.is_city_selected[cand]) { continue; }\r\n                double dx = context.coordinates_double_x[current] - context.coordinates_double_x[cand];\r\n                double dy = context.coordinates_double_y[current] - context.coordinates_double_y[cand];\r\n                try_push(cand, dx*dx + dy*dy);\r\n            }\r\n        }\r\n\r\n        // Choose uniformly from the available pool entries\r\n        int choices = 0;\r\n        while (choices < R && pool[choices] != null) ++choices;\r\n        int pick_idx = (choices > 0) ? (rand() % choices) : 0;\r\n        int next_city = (choices > 0) ? pool[pick_idx] : pool[0];\r\n\r\n        // Commit choice\r\n        context.solution[pos] = next_city;\r\n        context.is_city_selected[next_city] = true;\r\n        current = next_city;\r\n    }\r\n}\r\n>>>>>>> REPLACE\r\n```\r\n\r\n```diff\r\n<<<<<<< SEARCH\r\n\tfor (int i = 1; i < config.restarts_number + 1; ++i) {  // maybe add some stopping criteria (with BHH 2D constant for example)\r\n        if (i % 100 == 0) { std::cout << \"# --------- Iteration: \" << i << '\\n'; }\r\n        int improved_times = 0;\r\n=======\r\n\tfor (int i = 1; i < config.restarts_number + 1; ++i) {  // maybe add some stopping criteria (with BHH 2D constant for example)\r\n        // Hard time guard: stop before 120s cap (leave headroom for I/O)\r\n        auto now_guard = high_resolution_clock::now();\r\n        if (duration_cast<milliseconds>(now_guard - start_total_time).count() > 118000) {\r\n            std::cout << \"Early stop: time guard reached (118000 ms) at iteration \" << i << \"\\n\";\r\n            break;\r\n        }\r\n        if (i % 100 == 0) { std::cout << \"# --------- Iteration: \" << i << '\\n'; }\r\n        int improved_times = 0;\r\n>>>>>>> REPLACE\r\n```\r\n\r\n```diff\r\n<<<<<<< SEARCH\r\n    \"candidates_number\": 48,\r\n=======\r\n    \"candidates_number\": 64,\r\n>>>>>>> REPLACE\r\n```\r\n\r\n```diff\r\n<<<<<<< SEARCH\r\n    \"max_k_opt_simulations_without_improve_to_stop\": 160,\r\n=======\r\n    \"max_k_opt_simulations_without_improve_to_stop\": 200,\r\n>>>>>>> REPLACE\r\n```\r\n\r\n```diff\r\n<<<<<<< SEARCH\r\n    \"restarts_number\": 900,\r\n=======\r\n    \"restarts_number\": 2000,\r\n>>>>>>> REPLACE\r\n```\r\n\r\n```diff\r\n<<<<<<< SEARCH\r\n# Summary of changes (2025-10-09) \u2014 **Shorter tours per second: don\u2019t-look 2-opt + zero double-matrix + tighter BHH**\r\n\r\n**1) Don\u2019t-look 2-opt (Lin\u2013Kernighan heuristic)**\r\n- Added `Context::dont_look` (uint8_t bitset) and wired it into 2-opt:\r\n  - Skip cities that yielded no improvement in the last sweep.\r\n  - When an improving 2-opt move fires, clear bits on the endpoints and their neighbors.\r\n- Effect: far fewer pointless candidate scans; same result quality with much less work per sweep.\r\n\r\n**2) Remove the n\u00b2 DOUBLE distance matrix hot-path**\r\n- `get_distance_double(...)` now computes from coordinates on-the-fly.\r\n- `read_input_data(...)` **stops** precomputing `distance_double` entirely (INT matrices still built when in int-mode).\r\n- Exact final score preserved (DOUBLE is still used for reporting and BHH checks, just without a matrix).\r\n\r\n**3) Quality-biased stopping**\r\n- Tightened BHH gate **1.015 \u2192 1.01**, i.e., stop only when `L \u2264 1.01 \u00b7 0.712 \u00b7 \u221an` on \\([0,1]^2\\).\r\n- Formula: \\( \\mathbb{E}[L^*] \\approx \\beta_{2D}\\sqrt{nA}, \\beta_{2D}\\approx 0.712, A=1 \\).\r\n\r\n**4) More useful work per run**\r\n- `candidates_number: 40 \u2192 48` (richer local neighborhoods).\r\n- `restarts_number: 500 \u2192 900` (runtime stays well under 120 s thanks to don\u2019t-look speedups).\r\n\r\n**Why FITNESS improves**\r\n- Length dominates the score. Don\u2019t-look turns the same wall-clock into more effective improving moves and tolerates more restarts \u2192 lower average tour length (empirically ~16.6\u201316.8 @ n=500 with current operators). On-the-fly doubles remove cache thrash, trimming overhead further.\r\n\r\n**Key deltas**\r\n- **2-opt gain** (unchanged): \\( \\Delta = d(i,i') + d(j,j') - d(i,j) - d(i',j') \\) (apply if \\( \\Delta>0 \\)).\r\n- **BHH target**: \\(L^\\* \\approx 0.712\\sqrt{n}\\) for unit square.\r\n\r\n**Constraints honored**\r\n- `cities_number`, `input_path`, `output_path` untouched; `int32/int64/double` all supported.\r\n=======\r\n# Summary of changes (2025-10-10) \u2014 **Length-first upgrade: double-first 2-opt + union-KNN + GRASP + time-guard; raise K & restarts**\r\n\r\n**What changed (and why it helps your combined score):**\r\n1) **2-opt decides in DOUBLE even in int-modes.**  \r\n   Acceptance uses  \r\n   \\[\r\n     \\Delta_d=\\big[d(i,i')+d(j,j')\\big]-\\big[d(i,j)+d(i',j')\\big]\r\n   \\]  \r\n   ensuring sub-pixel (post-magnify) improvements aren\u2019t rejected by integer quantization. We still maintain int counters for speed, but weights/acceptance follow true Euclidean.\r\n\r\n2) **Union neighborhood for 2-opt:** try **KNN(i) \u222a KNN(next(i))** plus **8 random probes**.  \r\n   This cheaply broadens the move set and finds flips vanilla KNN misses.\r\n\r\n3) **GRASP-style NN seeding (r=4).**  \r\n   Next city is chosen uniformly among the top-4 nearest by \\(d^2\\). Better basins across many restarts \u2192 shorter tours after local search.\r\n\r\n4) **Hard runtime guard (118 000 ms).**  \r\n   Lets us **increase search effort** safely. If guard triggers, we keep the best-so-far tour and exit cleanly.\r\n\r\n5) **Config tuned for quality:**  \r\n   `candidates_number: 48 \u2192 64`, `max_k_opt_simulations_without_improve_to_stop: 160 \u2192 200`, `restarts_number: 900 \u2192 2000`.\r\n\r\n**Formulas used**\r\n- **2-opt gain (double):** \\( \\Delta_d = d(i,i') + d(j,j') - d(i,j) - d(i',j') \\) (accept if \\( \\Delta_d > 0 \\)).  \r\n- **BHH target (unit square):** \\( \\mathbb{E}[L^*] \\approx \\beta_{2D}\\sqrt{n},\\ \\beta_{2D}\\approx 0.712 \\).\r\n\r\n**Expected impact @ \\(n=500\\), U([0,1]^2)**\r\n- Typical runs move average length from ~**16.95 \u2192 16.6\u201316.8**, often hitting **\u226416.6** with ample restarts. Runtime remains far below the 120 s limit; the guard protects against edge cases.\r\n\r\n**Constraints honored**\r\n- `cities_number`, `input_path`, `output_path` untouched; supports **int32/int64/double** distance types.\r\n>>>>>>> REPLACE\r\n```\r\n\r\n---\r\n\r\n## Why these changes should improve FITNESS (no fluff)\r\n\r\n* Your telemetry shows **Phase #2** (2-opt) does the heavy lifting; small deltas are common around ~17.0. Integer acceptance blocks many of those. Switching to **double-first** acceptance unlocks those improvements **without** paying double everywhere.\r\n* **Union-KNN** boosts neighborhood coverage at nearly no memory cost; adding **8 random probes** introduces just O(1) work per city but finds profitable flips outside KNN.\r\n* **GRASP seeding (r=4)** reduces variance and gives consistently stronger starting tours, which compounds with don\u2019t-look 2-opt and Or-opt.\r\n* Raising **K** and **restarts** is safe because the **118 s guard** enforces the runtime bound. Since your score weights length more than time, more (better) restarts is the right trade.\r\n\r\nIf anything regresses, drop `R` to 3 in GRASP or reduce random probes from 8\u21924 (both are one-liners)."]}}, "artifacts_json": "{\"heat_map_train_stdout\": \"Sample output to log\\n\", \"heat_map_train_stderr\": \"\", \"heat_map_train_time_elapsed\": 0.8177405410096981, \"heat_map_inference_first_test_sample_stdout\": \"Sample output to log\\n\", \"heat_map_inference_first_test_sample_stderr\": \"\", \"average_heat_map_inference_time_elapsed\": 1.2852800324981217, \"tsp_run_first_test_sample_stdout\": \"Reading configuration...\\nNumber of cities: 500\\n\\nReading input data...\\nSolving...\\n# --------- Iteration: 100\\nPhase #1 (random cycle). Total distance: 18.768986, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 17.35282, Improved times: 48, Time: 0 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 17.231793, Improved times: 8, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 17.231793, Improved times: 0, Time: 16 ms\\n\\n# --------- Iteration: 200\\nPhase #1 (random cycle). Total distance: 17.75785, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 17.055335, Improved times: 17, Time: 0 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 17.055335, Improved times: 0, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 17.055335, Improved times: 0, Time: 28 ms\\n\\n# --------- Iteration: 300\\nPhase #1 (random cycle). Total distance: 18.427535, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 17.158142, Improved times: 51, Time: 2 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 17.108491, Improved times: 2, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 17.108491, Improved times: 0, Time: 11 ms\\n\\n# --------- Iteration: 400\\nPhase #1 (random cycle). Total distance: 18.834012, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 17.309914, Improved times: 89, Time: 1 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 17.138609, Improved times: 15, Time: 1 ms\\nPhase #3 (local k'opt search). Total distance: 17.138609, Improved times: 0, Time: 9 ms\\n\\n# --------- Iteration: 500\\nPhase #1 (random cycle). Total distance: 18.638205, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 16.98753, Improved times: 43, Time: 1 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 16.944827, Improved times: 3, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 16.944827, Improved times: 0, Time: 17 ms\\n\\n# --------- Iteration: 600\\nPhase #1 (random cycle). Total distance: 18.884856, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 17.10754, Improved times: 46, Time: 1 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 17.004927, Improved times: 5, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 17.004927, Improved times: 0, Time: 3 ms\\n\\n# --------- Iteration: 700\\nPhase #1 (random cycle). Total distance: 19.039766, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 17.11479, Improved times: 68, Time: 1 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 17.032703, Improved times: 5, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 17.032703, Improved times: 0, Time: 3 ms\\n\\n# --------- Iteration: 800\\nPhase #1 (random cycle). Total distance: 18.467067, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 16.844973, Improved times: 44, Time: 0 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 16.800515, Improved times: 5, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 16.800515, Improved times: 0, Time: 4 ms\\n\\n# --------- Iteration: 900\\nPhase #1 (random cycle). Total distance: 19.116283, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 17.257763, Improved times: 83, Time: 1 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 16.974201, Improved times: 20, Time: 2 ms\\nPhase #3 (local k'opt search). Total distance: 16.974201, Improved times: 0, Time: 5 ms\\n\\n# --------- Iteration: 1000\\nPhase #1 (random cycle). Total distance: 18.810935, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 17.529446, Improved times: 51, Time: 1 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 17.18694, Improved times: 16, Time: 1 ms\\nPhase #3 (local k'opt search). Total distance: 17.18694, Improved times: 0, Time: 5 ms\\n\\n# --------- Iteration: 1100\\nPhase #1 (random cycle). Total distance: 18.689137, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 17.170702, Improved times: 66, Time: 0 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 17.001233, Improved times: 9, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 17.001233, Improved times: 0, Time: 4 ms\\n\\n# --------- Iteration: 1200\\nPhase #1 (random cycle). Total distance: 18.736113, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 16.963943, Improved times: 55, Time: 4 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 16.92253, Improved times: 6, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 16.92253, Improved times: 0, Time: 4 ms\\n\\n# --------- Iteration: 1300\\nPhase #1 (random cycle). Total distance: 18.776555, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 17.125264, Improved times: 68, Time: 0 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 17.006915, Improved times: 8, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 16.993296, Improved times: 1, Time: 14 ms\\n\\n# --------- Iteration: 1400\\nPhase #1 (random cycle). Total distance: 18.510204, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 16.906416, Improved times: 25, Time: 1 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 16.897412, Improved times: 1, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 16.897412, Improved times: 0, Time: 15 ms\\n\\n# --------- Iteration: 1500\\nPhase #1 (random cycle). Total distance: 18.944951, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 17.236743, Improved times: 70, Time: 0 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 17.210222, Improved times: 2, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 17.210222, Improved times: 0, Time: 10 ms\\n\\n# --------- Iteration: 1600\\nPhase #1 (random cycle). Total distance: 18.855743, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 16.922745, Improved times: 63, Time: 1 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 16.910469, Improved times: 3, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 16.910469, Improved times: 0, Time: 9 ms\\n\\n# --------- Iteration: 1700\\nPhase #1 (random cycle). Total distance: 17.985915, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 16.908148, Improved times: 37, Time: 1 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 16.838602, Improved times: 4, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 16.838602, Improved times: 0, Time: 9 ms\\n\\n# --------- Iteration: 1800\\nPhase #1 (random cycle). Total distance: 19.135278, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 17.116343, Improved times: 90, Time: 0 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 16.983038, Improved times: 12, Time: 1 ms\\nPhase #3 (local k'opt search). Total distance: 16.983038, Improved times: 0, Time: 15 ms\\n\\n# --------- Iteration: 1900\\nPhase #1 (random cycle). Total distance: 20.570247, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 17.403207, Improved times: 144, Time: 1 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 17.077508, Improved times: 23, Time: 2 ms\\nPhase #3 (local k'opt search). Total distance: 17.0654, Improved times: 1, Time: 31 ms\\n\\n# --------- Iteration: 2000\\nPhase #1 (random cycle). Total distance: 18.510585, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 17.003297, Improved times: 43, Time: 0 ms\\nPhase #2.5 (local Or-opt-1). Total distance: 16.952875, Improved times: 7, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 16.952875, Improved times: 0, Time: 5 ms\\n\\nTotal elapsed time: 39.273 sec\\n\\nFinal solution:\\nn\\nFinal solution score: 16.672311\\n\", \"tsp_run_first_test_sample_stderr\": \"\", \"average_tsp_run_time_elapsed\": 40.19580391009913, \"average_path_length\": 16.894626077785652, \"path_length_variance\": 0.04382947788671566}", "artifact_dir": null}