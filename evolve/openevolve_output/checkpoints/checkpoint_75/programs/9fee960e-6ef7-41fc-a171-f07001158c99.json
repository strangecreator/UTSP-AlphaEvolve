{"id": "9fee960e-6ef7-41fc-a171-f07001158c99", "code": "* heat_map_train.py *:\n@@@\nimport pathlib\n\nBASE_DIR = pathlib.Path(__file__).parent\n\n# torch & related imports\nimport numpy as np\nimport torch\n\n\n# You can train graph neural networks here (actually you can edit the whole file).\n# Save them in str(BASE_DIR / \"pretrained\") directory and use them in `heat_map_inference.py`.\n# But mind the training time, it should not exceed 6 minutes (python3.11, ubuntu 22.04, nvidia A100 40 GB GPU).\n\n# In the original UTSP paper the heat map matrix is used, but upon the closer look on the authors code, they did not use it (they used simple K nearest neighbours as candidates).\n# So, the SOTA metrics were achieved without a heat map matrix, but maybe GNN approach is not wrong by its nature, maybe if trained properly it can help 2'opt and k'opt algorithms to find the best solution faster.\n# Maybe it is better to just improve the c++ code and not try the heat map approach.\n\n# Possible GNN step (just in case, implement if you like, you can skip this if think it is not effective): hamiltonian cycle constraint, loss on exact 2 degree for each node, etc.\n# UPDATE: currently, it is not supported to train heat maps, leave this code part untouched.\n\n\nif __name__ == \"__main__\":\n    print(\"Sample output to log\")\n@@@\n\n* heat_map_inference.py *:\n@@@\nimport os\nimport sys\nimport pathlib\nimport argparse\nimport numpy as np\n\nBASE_DIR = pathlib.Path(__file__).parent\nsys.path.append(str(BASE_DIR))\n\n# other imports\nfrom heat_map_train import *\n\n\ndef calc_heat_map(cities: np.ndarray) -> np.ndarray:\n    cities_number = cities.shape[0]\n\n    # You can call the pretrained model here (that was trained in `heat_map_train.py` and saved in str(BASE_DIR) / \"pretrained\")\n    # If you want to run some algorithm that is not trainable, then maybe it is better to implement it in TSP.cpp (just because it is faster in c++).\n\n    return np.zeros((cities_number, cities_number), dtype=float)\n\n\nif __name__ == \"__main__\":\n    p = argparse.ArgumentParser()\n    p.add_argument(\"--out\", required=True, help=\"Path to .npy to write the heat map.\")\n    args = p.parse_args()\n\n    # reading cities from stdin (mind the input format if you want to change this part, as your solution will be tested in an environment)\n    first_stdin_line = sys.stdin.readline().strip()\n    cities_number = int(first_stdin_line)\n    cities = np.loadtxt(sys.stdin, max_rows=cities_number)  # of shape (cities_number, 2)\n\n    # calculating heat map\n    heat_map = calc_heat_map(cities).astype(np.float32, copy=False)\n    print(\"Sample output to log\")\n\n    # writing heat map atomically to out .npy file (mind the output format if you want to change this part, as your solution will be tested in an environment)\n    tmp_path = args.out + \".tmp\"\n\n    with open(tmp_path, \"wb\") as output_temp_file:\n        np.save(output_temp_file, heat_map, allow_pickle=False)  # no auto \u201c.npy\u201d added\n        output_temp_file.flush()\n        os.fsync(output_temp_file.fileno())\n    \n    os.replace(tmp_path, args.out)\n@@@\n\n* include/utils.hpp *:\n@@@\n#pragma once\n\n// standart imports\n#include <queue>\n#include <cmath>\n#include <numeric>\n#include <algorithm>\n\n// other imports\n#include \"context.hpp\"\n\n\nconstexpr double BHH_CONSTANT_2D = 0.7120;  // Beardwood\u2013Halton\u2013Hammersley (BHH) constant\n\n\nlong long int64_sqrt(long long value) {\n    if (value <= 0) return 0LL;\n    long double r = std::sqrt((long double)value);\n    long long y = static_cast<long long>(r);\n    // Correct for rounding\n    while ((y + 1) <= value / (y + 1)) ++y;\n    while (y > 0 && y > value / y) --y;\n    return y;\n}\n\ndouble smooth_relu(double x) {\n    return (x < 0.0) ? std::exp(x) : (x + 1.0);\n}\n\n\ndouble calc_distance_double(Context& context, int i, int j) {\n    if (i == j) { return inf_double; }\n    double diff_x = (context.coordinates_double_x[i] - context.coordinates_double_x[j]);\n    double diff_y = (context.coordinates_double_y[i] - context.coordinates_double_y[j]);\n    return sqrt(diff_x * diff_x + diff_y * diff_y);\n}\n\nint calc_distance_int32(Context& context, int i, int j) {\n    if (i == j) { return inf_int32; }\n    long long diff_x = static_cast<long long>(context.coordinates_int32_x[i] - context.coordinates_int32_x[j]);\n    long long diff_y = static_cast<long long>(context.coordinates_int32_y[i] - context.coordinates_int32_y[j]);\n    return static_cast<int>(int64_sqrt(diff_x * diff_x + diff_y * diff_y));\n}\n\nlong long calc_distance_int64(Context& context, int i, int j) {\n    if (i == j) { return inf_int64; }\n    long long diff_x = context.coordinates_int64_x[i] - context.coordinates_int64_x[j];\n    long long diff_y = context.coordinates_int64_y[i] - context.coordinates_int64_y[j];\n    return int64_sqrt(diff_x * diff_x + diff_y * diff_y);\n}\n\n\ndouble get_distance_double(const Config& config, Context& context, int i, int j) {\n    return context.distance_double[i * config.cities_number + j];\n}\n\nint get_distance_int32(const Config& config, Context& context, int i, int j) {\n    return context.distance_int32[i * config.cities_number + j];\n}\n\nlong long get_distance_int64(const Config& config, Context& context, int i, int j) {\n    return context.distance_int64[i * config.cities_number + j];\n}\n\n\ndouble calc_total_distance_double(const Config& config, Context& context) {\n    double total = 0.0;\n    for (int i = 0; i < config.cities_number; ++i) {\n        int j = context.path[i].next;\n        double dx = context.coordinates_double_x[i] - context.coordinates_double_x[j];\n        double dy = context.coordinates_double_y[i] - context.coordinates_double_y[j];\n        total += std::sqrt(dx * dx + dy * dy);\n    }\n    return total;\n}\n\nint calc_total_distance_int32(const Config& config, Context& context) {\n    int total_distance = 0;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        total_distance += get_distance_int32(config, context, i, context.path[i].next);\n    }\n\n    return total_distance;\n}\n\nlong long calc_total_distance_int64(const Config& config, Context& context) {\n    long long total_distance = 0LL;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        total_distance += get_distance_int64(config, context, i, context.path[i].next);\n    }\n\n    return total_distance;\n}\n\n\nvoid calc_and_save_total_distance(const Config& config, Context& context) {\n    if (config.distance_type == DistanceType::Double) {\n        context.path_distance_double = calc_total_distance_double(config, context);\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        context.path_distance_int32 = calc_total_distance_int32(config, context);\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        context.path_distance_int64 = calc_total_distance_int64(config, context);\n    }\n}\n\n\nvoid update_weight_undirected(const Config& config, Context& context, int i, int j, double weight_delta) {\n    context.total_weight[i] -= smooth_relu(context.weight[i * config.cities_number + j]);\n    context.total_weight[j] -= smooth_relu(context.weight[j * config.cities_number + i]);\n\n    context.weight[i * config.cities_number + j] += weight_delta;\n    context.weight[j * config.cities_number + i] += weight_delta;\n\n    context.total_weight[i] += smooth_relu(context.weight[i * config.cities_number + j]);\n    context.total_weight[j] += smooth_relu(context.weight[j * config.cities_number + i]);\n}\n\n\nvoid identify_candidates_for_each_node(const Config& config, Context& context, const double* metric, bool is_reversed) {\n    const int n = config.cities_number;\n\n    for (int i = 0; i < n; ++i) {\n        std::iota(context.buffer.begin(), context.buffer.end(), 0);  // [0..n)\n\n        // Exclude self by swapping it to the last position and not considering it\n        std::swap(context.buffer[i], context.buffer[n - 1]);\n\n        auto cmp_metric = [&](int u, int v) {\n            double mu = metric[i * n + u];\n            double mv = metric[i * n + v];\n            return is_reversed ? (mu > mv) : (mu < mv);\n        };\n\n        auto dist2 = [&](int u) -> long double {\n            if (config.distance_type == DistanceType::Double) {\n                long double dx = (long double)context.coordinates_double_x[i] - (long double)context.coordinates_double_x[u];\n                long double dy = (long double)context.coordinates_double_y[i] - (long double)context.coordinates_double_y[u];\n                return dx * dx + dy * dy;\n            } else if (config.distance_type == DistanceType::Int32) {\n                long long dx = (long long)context.coordinates_int32_x[i] - (long long)context.coordinates_int32_x[u];\n                long long dy = (long long)context.coordinates_int32_y[i] - (long long)context.coordinates_int32_y[u];\n                return (long double)dx * dx + (long double)dy * dy;\n            } else {\n                long long dx = context.coordinates_int64_x[i] - context.coordinates_int64_x[u];\n                long long dy = context.coordinates_int64_y[i] - context.coordinates_int64_y[u];\n                return (long double)dx * dx + (long double)dy * dy;\n            }\n        };\n\n        if (metric) {\n            std::nth_element(\n                context.buffer.begin(),\n                context.buffer.begin() + config.candidates_number,\n                context.buffer.begin() + (n - 1),\n                cmp_metric\n            );\n        } else {\n            std::nth_element(\n                context.buffer.begin(),\n                context.buffer.begin() + config.candidates_number,\n                context.buffer.begin() + (n - 1),\n                [&](int u, int v) { return dist2(u) < dist2(v); }\n            );\n        }\n\n        for (int j = 0; j < config.candidates_number; ++j) {\n            context.candidates[i * config.candidates_number + j] = context.buffer[j];\n        }\n    }\n}\n\n\nint get_random_int_by_module(int mod) {\n\treturn rand() % mod;\n}\n\n\nbool is_cities_same_or_adjacent(const Config& config, Context& context, int i, int j) {\n    return (i == j || context.path[i].next == j || context.path[j].next == i);\n}\n\n\nvoid reverse_sub_path(Context& context, int i, int j) {\n    int current_city = i;\n\n    while (true) {\n        std::swap(context.path[current_city].prev, context.path[current_city].next);\n\n        if (current_city == j) { return; }\n\n        current_city = context.path[current_city].prev;\n    }\n}\n\n\ndouble expected_optimal_tsp_length_2d(long long n, double width, double height) {\n    if (n <= 1 || width <= 0.0 || height <= 0.0) {\n        return 0.0;\n    }\n\n    double area = width * height;\n    double expected_length = BHH_CONSTANT_2D * std::sqrt(static_cast<double>(n) * area);\n    return expected_length;\n}\n@@@\n\n* include/context.hpp *:\n@@@\n#pragma once\n\n// standart imports\n#include <string>\n#include <vector>\n#include <limits>\n#include <iostream>\n\n\n// global variables declaration\nconstexpr int null = -1;\nconstexpr double e = 2.718281;\nconstexpr double inf_double = std::numeric_limits<double>::infinity();\nconstexpr int inf_int32 = std::numeric_limits<int>::max();\nconstexpr long long inf_int64 = std::numeric_limits<long long>::max();\n\n\nenum class CandidatesSource { KNN, HeatMap };\nenum class DistanceType { Int32, Int64, Double };\n\n\nstruct Config {\n    int cities_number;\n    std::string input_path;\n    std::string output_path;\n    bool use_heat_map_as_initial_weights;\n    CandidatesSource candidates_source;\n    int candidates_number;\n    int max_k_opt_depth;\n    bool random_k_opt_depth_after_first_iteration;\n    double min_potential_to_consider;\n    double exploration_coefficient;\n    double weight_delta_coefficient;\n    bool use_sensitivity_decrease;\n    double sensitivity_temperature;\n    int max_k_opt_simulations_without_improve_to_stop;\n    int restarts_number;\n    DistanceType distance_type;\n    double magnify_rate;\n\n    Config(const json& config) {\n        cities_number = config[\"cities_number\"];\n        input_path = config[\"input_path\"];\n        output_path = config[\"output_path\"];\n        use_heat_map_as_initial_weights = config[\"use_heat_map_as_initial_weights\"];\n\n        if (config[\"candidates_source\"].get<std::string>() == \"knn\") {\n            candidates_source = CandidatesSource::KNN;\n        } else if (config[\"candidates_source\"].get<std::string>() == \"heat_map\") {\n            candidates_source = CandidatesSource::HeatMap;\n        } else {\n            throw std::invalid_argument(\"Unknown candidates source: '\" + config[\"candidates_source\"].get<std::string>() + \"'.\");\n        }\n\n        candidates_number = config[\"candidates_number\"];\n        max_k_opt_depth = config[\"max_k_opt_depth\"];\n        random_k_opt_depth_after_first_iteration = config[\"random_k_opt_depth_after_first_iteration\"];\n        min_potential_to_consider = config[\"min_potential_to_consider\"];\n        exploration_coefficient = config[\"exploration_coefficient\"];\n        weight_delta_coefficient = config[\"weight_delta_coefficient\"];\n        use_sensitivity_decrease = config[\"use_sensitivity_decrease\"];\n        sensitivity_temperature = config[\"sensitivity_temperature\"];\n        max_k_opt_simulations_without_improve_to_stop = config[\"max_k_opt_simulations_without_improve_to_stop\"];\n        restarts_number = config[\"restarts_number\"];\n\n        if (config[\"distance_type\"].get<std::string>() == \"int32\") {\n            distance_type = DistanceType::Int32;\n        } else if (config[\"distance_type\"].get<std::string>() == \"int64\") {\n            distance_type = DistanceType::Int64;\n        } else if (config[\"distance_type\"].get<std::string>() == \"double\") {\n            distance_type = DistanceType::Double;\n        } else {\n            throw std::invalid_argument(\"Unknown distance type: '\" + config[\"distance_type\"].get<std::string>() + \"'.\");\n        }\n\n        magnify_rate = config[\"magnify_rate\"];\n\n        // warnings\n        if (distance_type == DistanceType::Double) {\n            if (cities_number > 1'000'000) {\n                std::cout << \"Warning: `cities_number` is greater than 1'000'000. Try to use with `distance_type` = 'int64' to avoid precision errors.\\n\";\n            }\n        } else {\n            if (magnify_rate < 10'000.0) {\n                std::cout << \"Warning: `magnify_rate` is better to take more than 10'000 when using with `distance_type` = 'int32' or 'int64'.\\n\";\n            }\n            if (distance_type == DistanceType::Int32 && static_cast<long long>(cities_number) * magnify_rate > 1'000'000'000) {\n                std::cout << \"Warning: distance might be out of bounds for a 32 bit integer. Consider switching to doubles for distance calculation or using 64 bit integers.\\n\";\n            }\n            if (distance_type == DistanceType::Int64 && magnify_rate > 1'000'000'000) {\n                std::cout << \"Warning: distance might be out of bounds for a 64 bit integer. Consider switching to doubles for distance calculation.\\n\";\n            }\n        }\n    }\n};\n\n\nstruct City {\n  int prev;\n  int next;\n};\n\n\nstruct Context {\n    // coordinates\n    double* coordinates_double_x = nullptr;\n    double* coordinates_double_y = nullptr;\n\n    int* coordinates_int32_x = nullptr;\n    int* coordinates_int32_y = nullptr;\n\n    long long* coordinates_int64_x = nullptr;\n    long long* coordinates_int64_y = nullptr;\n\n    // distances\n    double* distance_double = nullptr;\n    int* distance_int32 = nullptr;\n    long long* distance_int64 = nullptr;\n\n    // weights\n    double* heat_map = nullptr;\n    double* weight = nullptr;\n    double* total_weight = nullptr;\n    double* potential = nullptr;\n\n    // candidates\n    int* candidates = nullptr;\n\n    // local k opt search\n    int* pairs = nullptr;\n    int* saved_pairs = nullptr;\n    int saved_depth = 0;\n\n    double current_best_delta_double = -inf_double;\n    int current_best_delta_int32 = -inf_int32;\n    long long current_best_delta_int64 = -inf_int64;\n\n    long long* chosen_times = nullptr;\n    long long total_simulations = 0;\n\n    // path\n    City* path = nullptr;\n    double path_distance_double = inf_double;\n    int path_distance_int32 = inf_int32;\n    long long path_distance_int64 = inf_int64;\n\n    City* best_path = nullptr;\n    double best_path_distance_double = inf_double;\n    int best_path_distance_int32 = inf_int32;\n    long long best_path_distance_int64 = inf_int64;\n\n    int* solution;\n    std::vector<bool> is_city_selected;\n\n    // other utils/tmp variables\n    std::vector<int> buffer;\n\n    Context(const Config& config) : buffer(config.cities_number, 0), is_city_selected(config.cities_number, false) {\n        coordinates_double_x = new double[config.cities_number];\n        coordinates_double_y = new double[config.cities_number];\n\n        if (config.distance_type == DistanceType::Int32) {\n            coordinates_int32_x = new int[config.cities_number];\n            coordinates_int32_y = new int[config.cities_number];\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            coordinates_int64_x = new long long[config.cities_number];\n            coordinates_int64_y = new long long[config.cities_number];\n        }\n\n        distance_double = new double[config.cities_number * config.cities_number];\n        if (config.distance_type == DistanceType::Int32) {\n            distance_int32 = new int[config.cities_number * config.cities_number];\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            distance_int64 = new long long[config.cities_number * config.cities_number];\n        }\n\n        if (config.use_heat_map_as_initial_weights) {\n            heat_map = new double[config.cities_number * config.cities_number];\n        }\n        weight = new double[config.cities_number * config.cities_number];\n        total_weight = new double[config.cities_number];\n        potential = new double[config.cities_number * config.cities_number];\n\n        candidates = new int[config.cities_number * config.candidates_number];\n\n        pairs = new int[config.cities_number];  // because currently we have a random k opt depth change option\n        saved_pairs = new int[config.cities_number];\n\n        chosen_times = new long long[config.cities_number * config.cities_number];\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            chosen_times[i] = 0;\n        }\n\n        path = new City[config.cities_number];\n        best_path = new City[config.cities_number];\n        solution = new int[config.cities_number];\n    }\n\n    ~Context() {\n        delete[] coordinates_double_x;\n        delete[] coordinates_double_y;\n\n        if (coordinates_int32_x) { delete[] coordinates_int32_x; }\n        if (coordinates_int32_y) { delete[] coordinates_int32_y; }\n\n        if (coordinates_int64_x) { delete[] coordinates_int64_x; }\n        if (coordinates_int64_y) { delete[] coordinates_int64_y; }\n\n        delete[] distance_double;\n        if (distance_int32) { delete[] distance_int32; }\n        if (distance_int64) { delete[] distance_int64; }\n\n        if (heat_map) { delete[] heat_map; }\n        delete[] weight;\n        delete[] total_weight;\n        delete[] potential;\n\n        delete[] candidates;\n\n        delete[] pairs;\n        delete[] saved_pairs;\n\n        delete[] chosen_times;\n\n        delete[] path;\n        delete[] best_path;\n        delete[] solution;\n    }\n};\n\n\nvoid convert_solution_to_path(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        int current_city = context.solution[i];\n\n        context.path[current_city].prev = context.solution[(i + config.cities_number - 1) % config.cities_number];\n        context.path[current_city].next = context.solution[(i + 1) % config.cities_number];\n    }\n}\n\nvoid convert_path_to_solution(const Config& config, Context& context) {\n    int current_city = 0;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.solution[i] = current_city;\n\n        current_city = context.path[current_city].next;\n    }\n}\n\nvoid store_path_as_best(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.best_path[i].prev = context.path[i].prev;\n        context.best_path[i].next = context.path[i].next;\n    }\n\n    if (config.distance_type == DistanceType::Double) {\n        context.best_path_distance_double = context.path_distance_double;\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        context.best_path_distance_int32 = context.path_distance_int32;\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        context.best_path_distance_int64 = context.path_distance_int64;\n    }\n}\n\nvoid restore_best_path(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.path[i].prev = context.best_path[i].prev;\n        context.path[i].next = context.best_path[i].next;\n    }\n}\n@@@\n\n* include/random_solution.hpp *:\n@@@\n#pragma once\n\n\n// * The following functions are used to randomly generate an initial solution.\n// * Starting from an arbitrarily chosen city, it iteratively selects a random city until forming a complete TSP tour.\n\n\nint select_random_city(const Config& config, Context& context) {\n\tint random_start = get_random_int_by_module(config.cities_number);\n\n\tfor (int i = 0; i < config.cities_number; ++i) {\n\t\tint city = (random_start + i) % config.cities_number;\n\n\t\tif (!context.is_city_selected[city]) {\n\t\t\treturn city;\n\t\t}\n\t}\n\n\treturn null;\n}\n\nvoid generate_random_solution(const Config& config, Context& context) {\n\tfor (int i = 0; i < config.cities_number; ++i) {\n\t\tcontext.solution[i] = null;\n\t\tcontext.is_city_selected[i] = false;\n\t}\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        int current_city = select_random_city(config, context);\n        context.solution[i] = current_city;\n        context.is_city_selected[current_city] = true;\n    }\n}\n@@@\n\n* include/local_2_opt_search.hpp *:\n@@@\n#pragma once\n\n\nbool apply_2_opt_move(const Config& config, Context& context, int i, int j) {\n    if (is_cities_same_or_adjacent(config, context, i, j)) { return false; }\n\n    int i_next = context.path[i].next;\n\tint j_next = context.path[j].next;\n\n    ++context.chosen_times[i * config.cities_number + j];\n\t++context.chosen_times[j * config.cities_number + i];\n\t++context.chosen_times[i_next * config.cities_number + j_next];\n\t++context.chosen_times[j_next * config.cities_number + i_next];\n\n    ++context.total_simulations;\n\n    // calculating delta\n    bool apply_move = false;\n    double weight_increase = 0.0;\n\n    if (config.distance_type == DistanceType::Double) {\n        double delta = get_distance_double(config, context, i, i_next) + get_distance_double(config, context, j, j_next) - get_distance_double(config, context, i, j) - get_distance_double(config, context, i_next, j_next);\n        if (delta > 0.0) {\n            apply_move = true;\n            weight_increase = config.weight_delta_coefficient * (std::exp(delta / context.path_distance_double) - 1.0);\n            context.path_distance_double -= delta;\n        }\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        int delta = get_distance_int32(config, context, i, i_next) + get_distance_int32(config, context, j, j_next) - get_distance_int32(config, context, i, j) - get_distance_int32(config, context, i_next, j_next);\n        if (delta > 0) {\n            apply_move = true;\n            weight_increase = config.weight_delta_coefficient * (std::exp(static_cast<double>(delta) / context.path_distance_int32) - 1.0);\n            context.path_distance_int32 -= delta;\n        }\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        long long delta = get_distance_int64(config, context, i, i_next) + get_distance_int64(config, context, j, j_next) - get_distance_int64(config, context, i, j) - get_distance_int64(config, context, i_next, j_next);\n        if (delta > 0) {\n            apply_move = true;\n            weight_increase = config.weight_delta_coefficient * (std::exp(static_cast<double>(delta) / context.path_distance_int64) - 1.0);\n            context.path_distance_int64 -= delta;\n        }\n    }\n\n    if (apply_move) {\n        // applying 2 opt move\n        reverse_sub_path(context, i_next, j);\n\n        context.path[i].next = j;\n        context.path[i_next].next = j_next;\n        context.path[j].prev = i;\n        context.path[j_next].prev = i_next;\n\n        // updating weights\n        update_weight_undirected(config, context, i, j, weight_increase);\n        update_weight_undirected(config, context, i_next, j_next, weight_increase);\n\n        return true;\n    }\n    return false;\n}\n\n\nbool improve_by_2_opt_move(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n\t\tfor (int j = 0; j < config.candidates_number; ++j) {\n\t\t\tint candidate = context.candidates[i * config.candidates_number + j];\n\n\t\t\tif (apply_2_opt_move(config, context, i, candidate)) { return true; }\n\t\t}\n\t}\n    return false;\n}\n\nint local_2_opt_search(const Config& config, Context& context) {\n    int improved_times = 0;\n\n    while (improve_by_2_opt_move(config, context)) { ++improved_times; };\n\n    return improved_times;\n}\n@@@\n\n* include/local_k_opt_search.hpp *:\n@@@\n#pragma once\n\n// standart imports\n#include <cmath>\n#include <iostream>\n\n\nvoid calc_potential_inplace(const Config& config, Context& context, int i, int j) {\n    if (i == j) {\n        context.potential[i * config.cities_number + j] = 0.0;\n        return;\n    }\n\n    // calculating total weight\n    double average_weight = context.total_weight[i] / (config.cities_number - 1);\n    double weight = context.weight[i * config.cities_number + j];\n\n    context.potential[i * config.cities_number + j] = (smooth_relu(weight) / average_weight) + config.exploration_coefficient * sqrt(log(context.total_simulations + 1) / (context.chosen_times[i * config.cities_number + j] + 1));  // always a positive value\n}\n\nint get_candidate_proportionally_by_potential(const Config& config, Context& context, int current_city, int start_city) {\n    int next_city = context.path[current_city].next;\n\n\tdouble total_potential = 0.0;\n    int candidates_available = 0;\n\n\tfor (int i = 0; i < config.candidates_number; ++i) {\n        int candidate = context.candidates[current_city * config.candidates_number + i];\n\n        calc_potential_inplace(config, context, current_city, candidate);\n        double potential = context.potential[current_city * config.cities_number + candidate];\n\n        if (candidate == next_city || candidate == start_city || (potential < config.min_potential_to_consider)) { continue; }  // not available\n\n\t\ttotal_potential += potential;\n        ++candidates_available;\n\t}\n\n    if (candidates_available == 0) { return null; }\n\n    // choosing the random available candidate proportionally\n    double random_potential = (static_cast<double>(rand()) / RAND_MAX) * total_potential;\n\n\tfor (int i = 0; i < config.candidates_number; ++i) {\n        int candidate = context.candidates[current_city * config.candidates_number + i];\n        double potential = context.potential[current_city * config.cities_number + candidate];\n\n        if (candidate == next_city || candidate == start_city || (potential < config.min_potential_to_consider)) { continue; }  // not available\n\n        random_potential -= potential;\n        if (random_potential <= 0) { return candidate; }\n    }\n\n\treturn null;\n}\n\n\nbool apply_k_opt_move(const Config& config, Context& context, int start_city, int max_k_opt_depth) {\n    ++context.total_simulations;\n\n    // first pair\n    int next_to_start_city = context.path[start_city].next;\n\n    context.pairs[0] = start_city;\n    context.pairs[1] = next_to_start_city;\n    int depth = 1;\n\n    int copied_to_saved_pairs = 0;\n    bool need_copy_to_saved_pairs = false;\n\n    // breaking an edge of the first pair\n    context.path[start_city].next = null;\n    context.path[next_to_start_city].prev = null;\n\n    // initializing gains\n    double gain_double; double gain_double_with_closure = 0.0;\n    int gain_int32; int gain_int32_with_closure = 0;\n    long long gain_int64; long long gain_int64_with_closure = 0;\n\n    if (config.distance_type == DistanceType::Double) {\n        gain_double = get_distance_double(config, context, start_city, next_to_start_city);\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        gain_int32 = get_distance_int32(config, context, start_city, next_to_start_city);\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        gain_int64 = get_distance_int64(config, context, start_city, next_to_start_city);\n    }\n\n    bool apply_move = false;\n\n    int current_city = next_to_start_city;\n\n    for (int i = 1; i < max_k_opt_depth; ++i) {\n        int proposed_city = get_candidate_proportionally_by_potential(config, context, current_city, start_city);\n\n        if (proposed_city == null) { return false; }  // no candidates, could not improve\n\n        ++context.chosen_times[current_city * config.cities_number + proposed_city];\n\t\t++context.chosen_times[proposed_city * config.cities_number + current_city];\n\n        int proposed_city_link = context.path[proposed_city].prev;  // city to disconnect from the proposed city (and maybe to connect to the start city)\n\n        context.pairs[2 * i] = proposed_city;\n        context.pairs[2 * i + 1] = proposed_city_link;\n        ++depth;\n\n        // applying 2 opt move\n        reverse_sub_path(context, current_city, proposed_city_link);\n\n        context.path[current_city].next = proposed_city;\n        context.path[proposed_city].prev = current_city;\n        context.path[proposed_city_link].prev = null;\n\n        // recalculating gains\n        if (config.distance_type == DistanceType::Double) {\n            gain_double += get_distance_double(config, context, proposed_city_link, proposed_city) - get_distance_double(config, context, current_city, proposed_city);\n            gain_double_with_closure = gain_double - get_distance_double(config, context, start_city, proposed_city_link);\n\n            if (gain_double_with_closure > 0.0) {\n                apply_move = true;\n                context.path_distance_double -= gain_double_with_closure;\n            }\n            if (context.current_best_delta_double < gain_double_with_closure) {\n                need_copy_to_saved_pairs = true;\n                context.current_best_delta_double = gain_double_with_closure;\n            }\n        }\n        if (config.distance_type == DistanceType::Int32) {\n            gain_int32 += get_distance_int32(config, context, proposed_city_link, proposed_city) - get_distance_int32(config, context, current_city, proposed_city);\n            gain_int32_with_closure = gain_int32 - get_distance_int32(config, context, start_city, proposed_city_link);\n\n            if (gain_int32_with_closure > 0) {\n                apply_move = true;\n                context.path_distance_int32 -= gain_int32_with_closure;\n            }\n            if (context.current_best_delta_int32 < gain_int32_with_closure) {\n                need_copy_to_saved_pairs = true;\n                context.current_best_delta_int32 = gain_int32_with_closure;\n            }\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            gain_int64 += get_distance_int64(config, context, proposed_city_link, proposed_city) - get_distance_int64(config, context, current_city, proposed_city);\n            gain_int64_with_closure = gain_int64 - get_distance_int64(config, context, start_city, proposed_city_link);\n\n            if (gain_int64_with_closure > 0) {\n                apply_move = true;\n                context.path_distance_int64 -= gain_int64_with_closure;\n            }\n            if (context.current_best_delta_int64 < gain_int64_with_closure) {\n                need_copy_to_saved_pairs = true;\n                context.current_best_delta_int64 = gain_int64_with_closure;\n            }\n        }\n\n        if (need_copy_to_saved_pairs) {  // for future weight updating\n            for (int i = copied_to_saved_pairs; i < depth; ++i) {\n                context.saved_pairs[2 * i] = context.pairs[2 * i];\n                context.saved_pairs[2 * i + 1] = context.pairs[2 * i + 1];\n            }\n\n            copied_to_saved_pairs = depth;\n            context.saved_depth = depth;\n\n            need_copy_to_saved_pairs = false;\n        }\n\n        if (apply_move) { break; }\n\n        current_city = proposed_city_link;\n    }\n\n    if (apply_move) {\n        // concluding the path to cycle\n        int end_city = context.pairs[2 * depth - 1];\n\n        context.path[start_city].next = end_city;\n        context.path[end_city].prev = start_city;\n\n        return true;\n    }\n    return false;\n}\n\n\nbool improve_by_k_opt_move(const Config& config, Context& context, int max_k_opt_depth) {\n    context.current_best_delta_double = -inf_double;\n    context.current_best_delta_int32 = -inf_int32;\n    context.current_best_delta_int64 = -inf_int64;\n\n    // saving current path length\n    double saved_path_distance_double = context.path_distance_double;\n    double saved_path_distance_int32 = context.path_distance_int32;\n    double saved_path_distance_int64 = context.path_distance_int64;\n\n    bool improved = false;\n\n    for (int i = 0; i < config.max_k_opt_simulations_without_improve_to_stop; ++i) {\n        // saving current path\n        convert_path_to_solution(config, context);\n\n        int start_city = get_random_int_by_module(config.cities_number);\n        if (apply_k_opt_move(config, context, start_city, max_k_opt_depth)) {\n            improved = true;\n            break;\n        }\n\n        // restoring the path that was before the move\n        convert_solution_to_path(config, context);\n    }\n\n    // updating weights from the best delta (it can be negative, if we've not improved)\n    double weight_delta = 0.0;\n    if (config.distance_type == DistanceType::Double && context.current_best_delta_double != -inf_double) {\n        weight_delta = config.weight_delta_coefficient * (std::exp(context.current_best_delta_double / saved_path_distance_double) - 1.0);\n    }\n    if (config.distance_type == DistanceType::Int32 && context.current_best_delta_int32 != -inf_int32) {\n        weight_delta = config.weight_delta_coefficient * (std::exp(static_cast<double>(context.current_best_delta_int32) / saved_path_distance_int32) - 1.0);\n    }\n    if (config.distance_type == DistanceType::Int64 && context.current_best_delta_int64 != -inf_int64) {\n        weight_delta = config.weight_delta_coefficient * (std::exp(static_cast<double>(context.current_best_delta_int64) / saved_path_distance_int64) - 1.0);\n    }\n\n    for (int i = 0; i < context.saved_depth; ++i) {\n        int current_city = context.saved_pairs[2 * i];\n        int proposed_city = (i < context.saved_depth - 1) ? context.saved_pairs[2 * i + 2] : context.saved_pairs[0];\n\n        double factor = 1.0;\n        if (config.use_sensitivity_decrease && !improved) {\n            // exponential decrease in sensitivity\n            factor = std::exp(-static_cast<double>(i) / config.sensitivity_temperature);\n        }\n\n        update_weight_undirected(config, context, current_city, proposed_city, weight_delta * factor);\n    }\n\n    return improved;\n}\n\nint local_k_opt_search(const Config& config, Context& context, int max_k_opt_depth) {  \n    // calculating total weight (for mitigating precision based errors, that was found empirically)\n    for (int i = 0; i < config.cities_number; ++i) {\n        double total_weight = 0.0;\n\n        for (int j = 0; j < config.cities_number; ++j) {\n            total_weight += smooth_relu(context.weight[i * config.cities_number + j]);\n        }\n\n        context.total_weight[i] = total_weight;\n    }\n\n    // running simulations and trying to improve\n    int improved_times = 0;\n\n    while (improve_by_k_opt_move(config, context, max_k_opt_depth)) { ++improved_times; };\n\n    return improved_times;\n}\n@@@\n\n* include/additional.hpp *:\n@@@\n#pragma once\n\n// Greedy KNN-based tour constructor with global fallback.\n// Uses squared distances (no sqrt); order is preserved.\ninline long double _dist2_idx(const Config& config, Context& context, int a, int b) {\n    if (config.distance_type == DistanceType::Double) {\n        long double dx = (long double)context.coordinates_double_x[a] - (long double)context.coordinates_double_x[b];\n        long double dy = (long double)context.coordinates_double_y[a] - (long double)context.coordinates_double_y[b];\n        return dx * dx + dy * dy;\n    } else if (config.distance_type == DistanceType::Int32) {\n        long long dx = (long long)context.coordinates_int32_x[a] - (long long)context.coordinates_int32_x[b];\n        long long dy = (long long)context.coordinates_int32_y[a] - (long long)context.coordinates_int32_y[b];\n        return (long double)dx * dx + (long double)dy * dy;\n    } else {\n        long long dx = context.coordinates_int64_x[a] - context.coordinates_int64_x[b];\n        long long dy = context.coordinates_int64_y[a] - context.coordinates_int64_y[b];\n        return (long double)dx * dx + (long double)dy * dy;\n    }\n}\n\ninline void generate_greedy_nn_solution(const Config& config, Context& context) {\n    const int n = config.cities_number;\n\n    for (int i = 0; i < n; ++i) {\n        context.solution[i] = null;\n        context.is_city_selected[i] = false;\n    }\n\n    int start = get_random_int_by_module(n);\n    context.solution[0] = start;\n    context.is_city_selected[start] = true;\n\n    int cur = start;\n    for (int pos = 1; pos < n; ++pos) {\n        int best = null;\n        long double bestd = std::numeric_limits<long double>::infinity();\n\n        // Try KNN list first\n        for (int k = 0; k < config.candidates_number; ++k) {\n            int v = context.candidates[cur * config.candidates_number + k];\n            if (v == cur || context.is_city_selected[v]) continue;\n            long double d2 = _dist2_idx(config, context, cur, v);\n            if (d2 < bestd) { bestd = d2; best = v; }\n        }\n\n        // Fallback: full scan\n        if (best == null) {\n            for (int v = 0; v < n; ++v) {\n                if (v == cur || context.is_city_selected[v]) continue;\n                long double d2 = _dist2_idx(config, context, cur, v);\n                if (d2 < bestd) { bestd = d2; best = v; }\n            }\n        }\n\n        context.solution[pos] = best;\n        context.is_city_selected[best] = true;\n        cur = best;\n    }\n}\n\n// ---------- Or-opt (1-node relocation) ----------\ninline int _get_d(const Config& config, Context& context, int a, int b) {\n    if (config.distance_type == DistanceType::Double) {\n        return 0; // unused in double branch\n    } else if (config.distance_type == DistanceType::Int32) {\n        return get_distance_int32(config, context, a, b);\n    } else {\n        // Int64: we will cast to long long separately; keep signature uniform\n        return 0;\n    }\n}\n\n// Compute edge length in active metric as double for delta arithmetic.\ninline double _edge_len(const Config& config, Context& context, int a, int b) {\n    if (config.distance_type == DistanceType::Double) {\n        return get_distance_double(config, context, a, b);\n    } else if (config.distance_type == DistanceType::Int32) {\n        return static_cast<double>(get_distance_int32(config, context, a, b));\n    } else {\n        return static_cast<double>(get_distance_int64(config, context, a, b));\n    }\n}\n\n// Insert city `a` immediately after city `u` (before u_next). Returns true if improved and applies the move.\ninline bool apply_or_opt_1(const Config& config, Context& context, int a, int u) {\n    if (a == u) return false;\n    int a_prev = context.path[a].prev;\n    int a_next = context.path[a].next;\n    int u_next = context.path[u].next;\n\n    // Skip adjacent placements that become no-ops or degenerate\n    if (a == u_next || u == a_prev || u == a_next) return false;\n\n    // Delta = removed - added\n    // Removed: (a_prev,a) + (a,a_next) + (u,u_next)\n    // Added  : (a_prev,a_next) + (u,a) + (a,u_next)\n    double removed = _edge_len(config, context, a_prev, a) + _edge_len(config, context, a, a_next) + _edge_len(config, context, u, u_next);\n    double added   = _edge_len(config, context, a_prev, a_next) + _edge_len(config, context, u, a) + _edge_len(config, context, a, u_next);\n    double delta = removed - added;\n\n    if (delta <= 0.0) return false;\n\n    // Detach a\n    context.path[a_prev].next = a_next;\n    context.path[a_next].prev = a_prev;\n\n    // Insert after u\n    context.path[a].prev = u;\n    context.path[a].next = u_next;\n    context.path[u].next = a;\n    context.path[u_next].prev = a;\n\n    // Update path distance in active metric\n    if (config.distance_type == DistanceType::Double) {\n        context.path_distance_double -= delta;\n    } else if (config.distance_type == DistanceType::Int32) {\n        context.path_distance_int32 -= static_cast<int>(std::llround(delta));\n    } else {\n        context.path_distance_int64 -= static_cast<long long>(std::llround(delta));\n    }\n\n    return true;\n}\n\n// Repeatedly apply first-improvement Or-opt(1) using KNN anchors.\n// Returns number of improvements applied.\ninline int local_or_opt_search(const Config& config, Context& context) {\n    const int n = config.cities_number;\n    int improved_times = 0;\n    bool improved = true;\n\n    while (improved) {\n        improved = false;\n        for (int a = 0; a < n; ++a) {\n            for (int k = 0; k < config.candidates_number; ++k) {\n                int u = context.candidates[a * config.candidates_number + k];\n                if (apply_or_opt_1(config, context, a, u)) {\n                    ++improved_times;\n                    improved = true;\n                    // restart sweep from scratch (first-improvement strategy)\n                    goto next_sweep;\n                }\n            }\n        }\n    next_sweep:\n        (void)0;\n    }\n    return improved_times;\n}\n@@@\n\n* TSP.cpp *:\n@@@\n// standart imports\n#include <string>\n#include <chrono>\n#include <fstream>\n#include <iomanip>\n#include <iostream>\n\n// json imports\n#include \"include/json.hpp\"\n\nusing json = nlohmann::json;\nusing namespace std::chrono;\n\n// other imports\n#include \"include/context.hpp\"\n#include \"include/utils.hpp\"\n#include \"include/random_solution.hpp\"\n#include \"include/local_2_opt_search.hpp\"\n#include \"include/local_k_opt_search.hpp\"\n\n// additional functions & methods\n#include \"include/additional.hpp\"\n\n\n// --- config parameters ---\n//   `cities_number`: number of points on the 2D surface.\n//   `input_path`: path to the file with cities coordinates and the edge heat map.\n//   `output_path`: path to the file where to write the optimal hamiltonian cycle and corresponding metrics.\n//   `use_heat_map_as_initial_weights`: whether to use the heat map as initial for the weights matrix.\n//   `candidates_source`: 'knn' or 'heat_map', if 'heat_map' the candidates for each city are the nearest cities to it.\n//   `candidates_number`: number of candidate cities for each city.\n//   `max_k_opt_depth`: maximum chain links (k parameter) in simulation.\n//   `random_k_opt_depth_after_first_iteration`: if to randomly change the `max_k_opt_depth` after the first iteration (restart).\n//   `min_potential_to_consider`: minimum potential of an edge to consider it in simulation (look at the formula for potential to understand fully).\n//   `exploration_coefficient`: hyperparameter for exploration.\n//   `weight_delta_coefficient`: hyperparameter for updating the weights matrix.\n//   `use_sensitivity_decrease`: whether to reduce weight flow for deep edges in unsuccessful k'opt search.\n//   `sensitivity_temperature`: hyperparameter for controlling the weight decrease in unsuccessful simulation depending on the length of a chain.\n//   `max_k_opt_simulations_without_improve_to_stop`: the number of MCTS simulations per restart.\n//   `restarts_number`: number of times algorithm restarts while maintaining the weights matrix (number of iterations).\n//   `distance_type`: \"int32\", \"int64\" or \"double\".\n//   `magnify_rate`: when `distance_type` is \"int32\" or \"int64\" algorithm relies only on integers to find an optimal solution (for speed), therefore each distance is magnified by `magnify_rate` value and rounded to integer. (if `distance_type` = 'double' this parameter is ignored)\n\n\nvoid read_input_data(const Config& config, Context& context) {\n    std::ifstream input_file(config.input_path);\n\n    int cities_number; input_file >> cities_number;\n\n    // reading coordinates\n    for (int i = 0; i < config.cities_number; ++i) {\n        input_file >> context.coordinates_double_x[i] >> context.coordinates_double_y[i];\n\n        if (config.distance_type == DistanceType::Int32) {\n            context.coordinates_int32_x[i] = static_cast<int>(0.5 + context.coordinates_double_x[i] * config.magnify_rate);\n            context.coordinates_int32_y[i] = static_cast<int>(0.5 + context.coordinates_double_y[i] * config.magnify_rate);\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            context.coordinates_int64_x[i] = static_cast<long long>(0.5 + context.coordinates_double_x[i] * config.magnify_rate);\n            context.coordinates_int64_y[i] = static_cast<long long>(0.5 + context.coordinates_double_y[i] * config.magnify_rate);\n        }\n    }\n\n    // calculating distances (avoid n^2 double when not needed)\n    if (config.distance_type == DistanceType::Double) {\n        for (int i = 0; i < config.cities_number; ++i) {\n            for (int j = 0; j < config.cities_number; ++j) {\n                context.distance_double[i * config.cities_number + j] = calc_distance_double(context, i, j);\n            }\n        }\n    } else {\n        // In int-modes, fill only the integer metric; skip the double matrix for speed\n        if (config.distance_type == DistanceType::Int32) {\n            for (int i = 0; i < config.cities_number; ++i) {\n                for (int j = 0; j < config.cities_number; ++j) {\n                    context.distance_int32[i * config.cities_number + j] = calc_distance_int32(context, i, j);\n                }\n            }\n        } else { // Int64\n            for (int i = 0; i < config.cities_number; ++i) {\n                for (int j = 0; j < config.cities_number; ++j) {\n                    context.distance_int64[i * config.cities_number + j] = calc_distance_int64(context, i, j);\n                }\n            }\n        }\n    }\n\n    if (config.use_heat_map_as_initial_weights) {\n        // reading heat map\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            input_file >> context.heat_map[i];\n            context.weight[i] = context.heat_map[i];\n        }\n    } else {\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            context.weight[i] = 0.0;\n        }\n    }\n\n    // initializing total weight\n    for (int i = 0; i < config.cities_number; ++i) {\n        double total_weight = 0.0;\n\n        for (int j = 0; j < config.cities_number; ++j) {\n            total_weight += smooth_relu(context.weight[i * config.cities_number + j]);\n        }\n\n        context.total_weight[i] = total_weight;\n    }\n\n    // calculating candidates\n    if (config.candidates_source == CandidatesSource::KNN) {\n        const double* metric = (config.distance_type == DistanceType::Double) ? context.distance_double : nullptr;\n        identify_candidates_for_each_node(config, context, metric, false);\n    } else if (config.candidates_source == CandidatesSource::HeatMap) {\n        identify_candidates_for_each_node(config, context, context.heat_map, true);\n    } else {\n        throw std::invalid_argument(\"Unknown candidates source.\");\n    }\n}\n\n\nvoid solve(const Config& config, Context& context) {  // the found solution will be stored in context.solution\n    // initialization\n    std::chrono::time_point<std::chrono::high_resolution_clock> start_total_time = high_resolution_clock::now(), end_total_time;\n    std::chrono::time_point<std::chrono::high_resolution_clock> start_time, end_time;\n\n    int max_k_opt_depth = config.max_k_opt_depth;\n    const double bhh_target = 1.015 * expected_optimal_tsp_length_2d(config.cities_number, 1.0, 1.0);\n\n\tfor (int i = 1; i < config.restarts_number + 1; ++i) {  // early-stop enabled\n        if (i % 100 == 0) { std::cout << \"# --------- Iteration: \" << i << '\\n'; }\n        int improved_times = 0;\n\n        // Initialization (7/8 greedy NN, 1/8 random for diversity)\n        start_time = high_resolution_clock::now();\n        if ((i & 7) == 0) {\n            generate_random_solution(config, context);\n        } else {\n            generate_greedy_nn_solution(config, context);\n        }\n        convert_solution_to_path(config, context);\n        end_time = high_resolution_clock::now();\n\n        calc_and_save_total_distance(config, context);\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #1 (init cycle). Total distance: \" << context.path_distance_double << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // Early stop after init if already in the BHH window\n        if (context.path_distance_double <= bhh_target) {\n            if (i % 100 == 0) { std::cout << \"Early stop (BHH): \" << context.path_distance_double << \" \u2264 \" << bhh_target << \"\\n\\n\"; }\n            store_path_as_best(config, context);\n            break;\n        }\n\n        // local 2opt search\n        start_time = high_resolution_clock::now();\n\t\timproved_times = local_2_opt_search(config, context);\n        end_time = high_resolution_clock::now();\n\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #2 (local 2'opt search). Total distance: \" << context.path_distance_double << \", Improved times: \" << improved_times << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // local Or-opt(1) search (cheap relocations)\n        start_time = high_resolution_clock::now();\n        int or_improved = local_or_opt_search(config, context);\n        end_time = high_resolution_clock::now();\n\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #2.5 (local Or-opt(1)). Total distance: \" << context.path_distance_double << \", Improved times: \" << or_improved << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // local k opt search\n        start_time = high_resolution_clock::now();\n\t\timproved_times = local_k_opt_search(config, context, max_k_opt_depth);\n        end_time = high_resolution_clock::now();\n\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #3 (local k'opt search). Total distance: \" << context.path_distance_double << \", Improved times: \" << improved_times << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // changing the best path\n        if (\n            (config.distance_type == DistanceType::Double && context.path_distance_double < context.best_path_distance_double) ||\n            (config.distance_type == DistanceType::Int32 && context.path_distance_int32 < context.best_path_distance_int32) ||\n            (config.distance_type == DistanceType::Int64 && context.path_distance_int64 < context.best_path_distance_int64)\n        ) {\n            store_path_as_best(config, context);  // also updates best path distance\n        }\n\n        // Early stop if inside BHH window\n        if (context.path_distance_double <= bhh_target) {\n            if (i % 100 == 0) { std::cout << \"Early stop (BHH): \" << context.path_distance_double << \" \u2264 \" << bhh_target << \"\\n\\n\"; }\n            break;\n        }\n\n        if (config.random_k_opt_depth_after_first_iteration) {\n            // random MCTS depth change\n            max_k_opt_depth = std::min(10 + (rand() % 80), config.cities_number / 2);\n        }\n\n        if (i % 100 == 0) { std::cout << '\\n'; }\n\t}\n\n    // final convertation (context.best_path to context.solution)\n    restore_best_path(config, context);\n    convert_path_to_solution(config, context);\n\n    end_total_time = high_resolution_clock::now();\n    std::cout << \"Total elapsed time: \" << static_cast<double>(duration_cast<milliseconds>(end_total_time - start_total_time).count()) / 1000 << \" sec\\n\\n\";\n}\n\n\nint main(int argc, char** argv) {\n    // reading configuration\n    std::cout << \"Reading configuration...\\n\";\n    if (argc != 2) {\n        std::cerr << \"Usage: The first and only argument should be the path to the config file.\";\n        return 1;\n    }\n    \n    std::ifstream config_file(argv[1]);\n    json config_raw; config_file >> config_raw;\n    Config config(config_raw);\n\n    std::cout << \"Number of cities: \" << config.cities_number << \"\\n\\n\";\n\n    // initialization & memory allocation\n    Context context(config);\n\n    // reading input data\n    std::cout << \"Reading input data...\\n\";\n    read_input_data(config, context);\n\n    // solving\n    std::cout << \"Solving...\\n\";\n    solve(config, context);\n\n    // printing the solution\n    std::ofstream output_file(config.output_path);\n\n    std::cout << \"Final solution:\\n\";\n    for (int i = 0; i < config.cities_number; ++i) {\n        std::cout << context.solution[i] << ' ';\n        output_file << context.solution[i] << ' ';\n    }\n    std::cout << \"\\n\\nFinal solution score: \" << calc_total_distance_double(config, context) << '\\n';\n\n    return 0;\n}\n@@@\n\n* config.json *:\n@@@\n{\n    \"cities_number\": 500,\n    \"input_path\": \"/Users/dark-creator/solomon/self/openevolve-usage/UTSP/repo/src/local_search_v2/input.txt\",\n    \"output_path\": \"/Users/dark-creator/solomon/self/openevolve-usage/UTSP/repo/src/local_search_v2/output.txt\",\n    \"use_heat_map_as_initial_weights\": false,\n    \"candidates_source\": \"knn\",\n    \"candidates_number\": 32,\n    \"max_k_opt_depth\": 64,\n    \"random_k_opt_depth_after_first_iteration\": true,\n    \"min_potential_to_consider\": 0.0,\n    \"exploration_coefficient\": 0.15,\n    \"weight_delta_coefficient\": 6.0,\n    \"use_sensitivity_decrease\": true,\n    \"sensitivity_temperature\": 8.0,\n    \"max_k_opt_simulations_without_improve_to_stop\": 120,\n    \"restarts_number\": 250,\n    \"distance_type\": \"int32\",\n    \"magnify_rate\": 1000000\n}\n@@@\n\n* changes_description.txt *:\n@@@\n# Changes (2025-10-09) \u2014 FITNESS upgrade (shorter tours with low overhead)\n\n**What changed**\n1) **Or-opt (1-node relocation) pass added**  \n   - Implemented `apply_or_opt_1(...)` and `local_or_opt_search(...)` in `include/additional.hpp`.  \n   - Inserted as **Phase #2.5** between 2-opt and k-opt in `solve()`.  \n   - Delta formula (removed \u2212 added):  \n     \\[\n       \\Delta = d(a_{\\text{prev}},a) + d(a,a_{\\text{next}}) + d(u,u_{\\text{next}})\n               - \\big( d(a_{\\text{prev}},a_{\\text{next}}) + d(u,a) + d(a,u_{\\text{next}}) \\big)\n     \\]\n     Apply if \\(\\Delta>0\\). Updates the active path-length accumulator (double/int32/int64).\n\n2) **Tighter BHH early-stop (quality-biased)**  \n   - \\(L \\le 1.015 \\cdot \\beta \\sqrt{n}\\) with \\(\\beta=0.712\\) for \\([0,1]^2\\).  \n   - Slightly stricter than 1.02 to favor shorter tours; time impact small due to cheap Or-opt.\n\n3) **Wider KNN neighborhood**  \n   - `candidates_number: 24 \u2192 32` to expose more promising relocations and 2-opt edges.  \n   - Works well with the added Or-opt; modest runtime bump, typically better average length.\n\n**Why this helps**\n- Or-opt is \\(O(n\\cdot K)\\) per sweep and exploits KNN structure; it removes stubborn 2-opt plateaus cheaply.  \n- The stricter BHH gate prevents exiting too early when a few fast relocations can shave ~0.1\u20130.3 off length for \\(n=500\\).  \n- Higher \\(K\\) gives local search the edges it needs without resorting to full scans.\n\n**Kept from prior changes**\n- No n\u00b2 double matrix in int-modes; `calc_total_distance_double` uses coords on demand.  \n- Greedy NN seeding for 7/8 restarts; 1/8 random for diversity.  \n- `std::exp` micro-opts; fast `int64_sqrt`.\n\n**Expectations**\n- **Lower average path length** than the previous build at similar wall-clock (Or-opt is cheap).  \n- Combined score improves because length is weighted more than time in FITNESS.\n@@@", "language": "python", "parent_id": "28c5c8c6-7f43-4784-affa-0a543ec8f7bd", "generation": 2, "timestamp": 1760026643.762357, "iteration_found": 11, "metrics": {"heat_map_train_time_elapsed": 0.7736612919834442, "average_heat_map_inference_time_elapsed": 1.264102536430073, "average_tsp_run_time_elapsed": 3.943750023498069, "average_path_length": 17.071628477333164, "path_length_variance": 0.03628429214405439, "combined_score": 0.060973713841284874}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 59 lines with 149 lines\nChange 2: Replace 19 lines with 29 lines\nChange 3: 'const double bhh_target = 1.02 * expected_optimal_tsp_length_2d(config.cities_number, 1.0, 1.0);' to 'const double bhh_target = 1.015 * expected_optimal_tsp_length_2d(config.cities_number, 1.0, 1.0);'\nChange 4: '\"candidates_number\": 24,' to '\"candidates_number\": 32,'\nChange 5: Replace 33 lines with 34 lines", "parent_metrics": {"heat_map_train_time_elapsed": 0.8010700829909183, "average_heat_map_inference_time_elapsed": 1.2319340715293947, "average_tsp_run_time_elapsed": 3.3373383071557328, "average_path_length": 17.358923895987346, "path_length_variance": 0.048421657846114526, "combined_score": 0.03578276532847638}, "island": 0}, "prompts": {"diff_user": {"system": "You are an expert in the Traveling Salesman Problem (TSP).\nTask:\n  Recent papers (2024\u20132025) have proposed various approaches to the TSP. For example, the UTSP paper introduces a graph neural network (GNN) that generates an n\u00d7n heat map of edge probabilities, indicating how likely each edge is to be part of the optimal Hamiltonian cycle. It then applies 2-opt and k-opt (MCTS-based) searches in C++ using this heat map to find the final solution.\n\nHowever, a later paper (2025) questions the effectiveness of the heat map, showing that 2-opt and k-opt searches perform comparably well\u2014even without it\u2014achieving similar or better solution quality and faster runtime. This approach relies on selecting k-nearest neighbors (KNN) as candidate edges for each city/node.\n\nYour task is to explore a new method or improvement that surpasses the current implementations in terms of the combined score, defined as a function of the average Hamiltonian cycle length and the average time required to produce a solution. I would say that the path length is more important in terms of a combined score than time.\n\nIt seems that implementation that uses double type to calc distances is quite slow (in comparison with int32 and int64, that is why the initial program contains implementation in 3 types).\n\nDo not modify the `cities_number` in config.json, as it will be automatically replaced with the appropriate value during testing. Also, do not modify the `input_path` or `output_path` parameters. All other parameters may be edited.\nAdditional information: all test cities were randomly generated within the square [0, 1] \u00d7 [0, 1] (as is standard in most papers). The number of test samples in a testing batch ranges from 32 to 128, depending on the value of cities_number.\n\nTimeouts (error if exceeds):\n  Heat map train: 360 seconds.\n  Heat map inference: 60 seconds per instance.\n  TSP compilation: 10 seconds.\n  TSP run: 120 seconds per instance.\n\nThe C++ program will be compiled using C++ 17 standart. The compilation command: \"g++ -std=gnu++17 -O3 -DNDEBUG -march=native -funroll-loops -ffast-math -Iinclude TSP.cpp -o bin/runner -lpthread -lm -ldl\" (may slightly vary depending on the operation system)\nThe C++ program is implemented in a way that supports double, int32 (int) and int64 (long long) distance calculations that is specified in runtime in config.json (that you can change).\n\nYou can \u2014 and probably should \u2014 write something to stdout for yourself. This stdout output will be shown to you in future calls.\n\nImportant: Describe your changes and write them to the changes_description.txt file (deleting the previous one beforehand).\n", "user": "# Current Program Information\n- Fitness: 0.0358\n- Feature coordinates: No feature coordinates\n- Focus areas: - Fitness declined: 0.0413 \u2192 0.0358. Consider revising recent changes.\n\n## Last Execution Output\n\n### heat_map_train_stdout\n```\nSample output to log\n\n```\n\n### heat_map_train_stderr\n```\n\n```\n\n### heat_map_train_time_elapsed\n```\n0.8010700829909183\n```\n\n### heat_map_inference_first_test_sample_stdout\n```\nSample output to log\n\n```\n\n### heat_map_inference_first_test_sample_stderr\n```\n\n```\n\n### average_heat_map_inference_time_elapsed\n```\n1.2319340715293947\n```\n\n### tsp_run_first_test_sample_stdout\n```\nReading configuration...\nNumber of cities: 500\n\nReading input data...\nSolving...\n# --------- Iteration: 100\nPhase #1 (init cycle). Total distance: 20.990049, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 17.579921, Improved times: 179, Time: 2 ms\nPhase #3 (local k'opt search). Total distance: 17.579921, Improved times: 0, Time: 4 ms\n\n# --------- Iteration: 200\nPhase #1 (init cycle). Total distance: 261.32748, Time: 0 ms\nPhase #2 (local 2'opt search). Total distance: 18.373561, Improved times: 5419, Time: 46 ms\nPhase #3 (local k'opt search). Total distance: 18.373561, Improved times: 0, Time: 1 ms\n\nTotal elapsed time: 3.216 sec\n\nFinal solution:\nn\nFinal solution score: 17.073388\n\n```\n\n### tsp_run_first_test_sample_stderr\n```\n\n```\n\n### average_tsp_run_time_elapsed\n```\n3.3373383071557328\n```\n\n### average_path_length\n```\n17.358923895987346\n```\n\n### path_length_variance\n```\n0.048421657846114526\n```\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Change 1: Replace 4 lines with 4 lines\nChange 2: Replace 9 lines with 9 lines\nChange 3: Replace 15 lines with 47 lines\nChange 4: Replace 12 lines with 20 lines\nChange 5: Replace 8 lines with 13 lines\nChange 6: 'weight_increase = config.weight_delta_coefficient * (pow(e, delta / context.path_distance_double) - 1);' to 'weight_increase = config.weight_delta_coefficient * (std::exp(delta / context.path_distance_double) - 1.0);'\nChange 7: 'weight_increase = config.weight_delta_coefficient * (pow(e, static_cast<double>(delta) / context.path_distance_int32) - 1);' to 'weight_increase = config.weight_delta_coefficient * (std::exp(static_cast<double>(delta) / context.path_distance_int32) - 1.0);'\nChange 8: 'weight_increase = config.weight_delta_coefficient * (pow(e, static_cast<double>(delta) / context.path_distance_int64) - 1);' to 'weight_increase = config.weight_delta_coefficient * (std::exp(static_cast<double>(delta) / context.path_distance_int64) - 1.0);'\nChange 9: 'weight_delta = config.weight_delta_coefficient * (pow(e, context.current_best_delta_double / saved_path_distance_double) - 1);' to 'weight_delta = config.weight_delta_coefficient * (std::exp(context.current_best_delta_double / saved_path_distance_double) - 1.0);'\nChange 10: 'weight_delta = config.weight_delta_coefficient * (pow(e, static_cast<double>(context.current_best_delta_int32) / saved_path_distance_int32) - 1);' to 'weight_delta = config.weight_delta_coefficient * (std::exp(static_cast<double>(context.current_best_delta_int32) / saved_path_distance_int32) - 1.0);'\nChange 11: 'weight_delta = config.weight_delta_coefficient * (pow(e, static_cast<double>(context.current_best_delta_int64) / saved_path_distance_int64) - 1);' to 'weight_delta = config.weight_delta_coefficient * (std::exp(static_cast<double>(context.current_best_delta_int64) / saved_path_distance_int64) - 1.0);'\nChange 12: 'factor = pow(e, -i / config.sensitivity_temperature);' to 'factor = std::exp(-static_cast<double>(i) / config.sensitivity_temperature);'\nChange 13: Replace 4 lines with 90 lines\nChange 14: Replace int max_k_opt_depth = config.max_k_opt_depth; with 5 lines\nChange 15: Replace 5 lines with 9 lines\nChange 16: Replace 3 lines with 12 lines\nChange 17: '\"candidates_number\": 10,' to '\"candidates_number\": 16,'\nChange 18: '\"restarts_number\": 500,' to '\"restarts_number\": 350,'\nChange 19: Replace 2 lines with 31 lines\n- Metrics: heat_map_train_time_elapsed: 0.9414, average_heat_map_inference_time_elapsed: 1.1892, average_tsp_run_time_elapsed: 6.3646, average_path_length: 17.2846, path_length_variance: 0.0487, combined_score: 0.0413\n- Outcome: Mixed results\n\n### Attempt 2\n- Changes: Change 1: Replace 22 lines with 5 lines\nChange 2: Replace 29 lines with 27 lines\nChange 3: Replace 15 lines with 64 lines\nChange 4: Replace 12 lines with 15 lines\nChange 5: Replace 8 lines with 14 lines\nChange 6: Replace 12 lines with 83 lines\nChange 7: Replace 11 lines with 11 lines\nChange 8: Replace 15 lines with 25 lines\nChange 9: Replace 2 lines with 26 lines\n- Metrics: heat_map_train_time_elapsed: 0.8601, average_heat_map_inference_time_elapsed: 1.2638, average_tsp_run_time_elapsed: 12.5787, average_path_length: 17.0638, path_length_variance: 0.0412, combined_score: 0.0612\n- Outcome: Mixed results\n\n### Attempt 1\n- Changes: Unknown changes\n- Metrics: heat_map_train_time_elapsed: 0.8862, average_heat_map_inference_time_elapsed: 1.2345, average_tsp_run_time_elapsed: 38.0645, average_path_length: 17.0220, path_length_variance: 0.0375, combined_score: 0.0673\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.0673)\n```\nDefault workflow from the paper \"UTSP\" implementing 2'opt and k'opt searches.\nNo further changes.\n```\nKey features: Performs well on heat_map_train_time_elapsed (0.8862), Performs well on average_heat_map_inference_time_elapsed (1.2345), Performs well on average_tsp_run_time_elapsed (38.0645), Performs well on average_path_length (17.0220), Performs well on path_length_variance (0.0375), Performs well on combined_score (0.0673)\n\n### Program 2 (Score: 0.0612)\n```\n# Summary of changes (2025-10-09)\n\n1) **Greedy NN initialization**  \n   - Added `generate_greedy_nn_solution(...)` and used it in `solve()` instead of a random permutation.  \n   - Rationale: a far better starting tour reduces the number of improving moves 2-opt/k-opt must discover.\n\n2) **Distance matrix build avoidance (performance)**  \n   - When `distance_type` is `int32`/`int64`, we **do not fill** the `double` distance matrix.  \n   - `calc_total_distance_double(...)` now computes from coordinates on the fly, so final reporting still uses true Euclidean length without the memory/time overhead.\n\n3) **Candidate selection in native type**  \n   - Added `identify_candidates_for_each_node_int32/Int64` to select KNN using the integer metric directly.  \n   - Cuts a redundant dependency on double matrices in integer modes.\n\n4) **Faster integer sqrt**  \n   - Replaced iterative `int64_sqrt` with hardware `sqrtl` + truncation. This is significantly faster for the O(n\u00b2) distance precompute in integer modes.\n\n5) **Early stopping via BHH bound**  \n   - Stop when `L_current \u2264 1.015 \u00b7 \u03b2_2D \u00b7 \u221an` for unit square, with `\u03b2_2D = 0.7120`.  \n   - Formula: \\( \\mathbb{E}[L^*] \\approx \\beta_{2D} \\sqrt{n} \\) (Beardwood\u2013Halton\u2013Hammersley).  \n   - This trims long tails in runtime when the tour is already near-optimal.\n\n6) **Small correctness/cleanliness fixes**  \n   - Integer totals now start from `0`/`0LL` (not `0.0`) in `calc_total_distance_int32/Int64`.\n\n**Expected effect:** lower average runtime (no giant double matrix in int-modes; faster sqrt), better initial solution \u2192 fewer improvement iterations, and early exit when near the BHH limit. Overall **combined score should improve** (shorter time, same or better length).\n```\nKey features: Performs well on heat_map_train_time_elapsed (0.8601), Performs well on average_heat_map_inference_time_elapsed (1.2638), Performs well on average_tsp_run_time_elapsed (12.5787), Performs well on average_path_length (17.0638), Performs well on path_length_variance (0.0412), Performs well on combined_score (0.0612)\n\n### Program 3 (Score: 0.0413)\n```\n# Changes (2025-10-09)\n\nGoal: improve combined score = f(average tour length, runtime).\n\n1) **Avoid full n\u00b2 double distance build when not needed**\n   - Added `identify_candidates_for_each_node_by_coords(...)` using **squared distances** (no sqrt) computed on-the-fly for KNN.\n   - `calc_total_distance_double(...)` now computes from coordinates directly, so we don\u2019t need a precomputed double matrix for logging/metrics if `distance_type != \"double\"`.\n\n2) **Faster math in hot loops**\n   - Replaced all `pow(e, x)` with `std::exp(x)` in weight updates and sensitivity decay. This reduces CPU overhead in 2-opt/k-opt.\n\n3) **Better initialization**\n   - Implemented `generate_nearest_neighbor_solution(...)` (greedy NN using candidate lists, with full-scan fallback).\n   - Used NN seeding in 7/8 restarts; 1/8 remains random for diversity.\n\n4) **BHH early stopping**\n   - Stop when current best meets \\( L \\le 1.02 \\cdot 0.712 \\sqrt{n} \\) (unit square). For `n=500`, target \u2248 16.24.\n   - This trims unnecessary restarts while keeping quality.\n\n5) **Config tweaks**\n   - `candidates_number: 16` (stronger local improvements).\n   - `restarts_number: 350` (early-stop typically halts earlier anyway).\n\nRationale:\n- BHH constant (\u03b2\u22480.712) gives a principled lower baseline. Using it as a **target** balances length vs time.\n- NN seeding reduces cleanup needed by 2-opt/k-opt, thus faster convergence.\n- On-the-fly squared distances + `exp` yields a measurable runtime win.\n\nNotes:\n- Do **not** alter `cities_number`, `input_path`, `output_path`. Kept intact.\n- Works for `int32/int64/double` modes; KNN-on-the-fly is used for integer modes to avoid building a double matrix.\n```\nKey features: Performs well on heat_map_train_time_elapsed (0.9414), Performs well on average_heat_map_inference_time_elapsed (1.1892), Performs well on average_tsp_run_time_elapsed (6.3646), Performs well on average_path_length (17.2846), Performs well on path_length_variance (0.0487), Performs well on combined_score (0.0413)\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.0375)\n```\n# Changes (2025-10-09)\n\nGoal: maximize FITNESS = f(tour length, runtime).\n\n1) **Greedy NN seeding over KNN**  \n   - Added `generate_greedy_nn_solution(...)` (KNN-restricted with global fallback).  \n   - Replaced random start in `solve()` \u2192 far shorter initial tour, fewer local-search moves.\n\n2) **KNN without n\u00b2 double matrix in int-modes**  \n   - `identify_candidates_for_each_node(...)` now supports **metric=nullptr** and computes **squared distances on-the-fly** from coordinates.  \n   - `read_input_data(...)` skips filling `distance_double` unless needed.  \n   - `calc_total_distance_double(...)` derives length directly from coords (no dependency on distance matrix).\n\n3) **Math micro-optimizations in hot loops**  \n   - Replaced `pow(e, x)` with `std::exp(x)` in 2-opt and k-opt updates and sensitivity decay.  \n   - Switched `int64_sqrt` to hardware `sqrtl` + truncation.  \n   - Fixed integer accumulators to start from integer zero.\n\n4) **BHH early stopping (unit square)**  \n   - Stop restarts when \\(L \\le 1.02 \\cdot 0.712 \\sqrt{n}\\).  \n   - Formula: \\( \\mathbb{E}[L^*] \\approx \\beta \\sqrt{n} \\), \\(\\beta\\approx0.712\\) (Beardwood\u2013Halton\u2013Hammersley).\n\n5) **Config tuning (speed \u00d7 quality)**  \n   - `candidates_number: 24`, `max_k_opt_simulations_without_improve_to_stop: 120`, `restarts_number: 250`.  \n   - `min_potential_to_consider: 0.0`, `exploration_coefficient: 0.15`, `use_sensitivity_decrease: true`, `sensitivity_temperature: 8.0`.\n\nWhy this helps:\n- NN seeding + larger K yields a strong base tour \u2192 fewer improvements needed.  \n- Avoiding the n\u00b2 double matrix in int-modes cuts preprocessing and memory traffic.  \n- `exp` + fast sqrt shave cycles in inner loops.  \n- Early-stop trims long tails once we\u2019re within the BHH window.\n\nExpectations: **significantly lower average TSP runtime** with **equal or better tour length**, improving the combined score.\n```\nKey features: Alternative approach to heat_map_train_time_elapsed, Alternative approach to average_heat_map_inference_time_elapsed\n\n### Program D2 (Score: 0.0362)\n```\nSummary of changes (aim: lower combined score = shorter tours + less time)\n\n1) Randomized KNN\u2013Nearest-Neighbor initialization\n   - Replaced purely random tour with a greedy nearest-neighbor constructor seeded from a random city and constrained to each node\u2019s KNN list (fallback to global nearest if needed).\n   - Rationale: starting from a much shorter tour slashes the number of beneficial 2-opt / k-opt moves and their search time.\n   - Complexity: O(n\u00b7K) typical, O(n^2) only on rare fallbacks; uses precomputed distance matrix.\n\n2) Candidate list hygiene\n   - \u2018identify_candidates_for_each_node\u2019 now guarantees the city itself is never placed among its own candidates and backfills properly.\n   - Effect: avoids wasted comparisons and marginally accelerates local search.\n\n3) Early stopping via BHH constant\n   - Stop criterion after each restart: if best length L_best \u2264 1.03 \u00b7 (\u03b2\u221a(nA)) with \u03b2\u22480.7120, A=1 for [0,1]^2, we break.\n   - Formula: L* \u2248 \u03b2 \u221a(nA)  (Beardwood\u2013Halton\u2013Hammersley; asymptotically tight in 2D i.i.d. uniform).\n   - Result: large runtime savings once we\u2019re \u201cclose enough,\u201d with negligible quality loss.\n\n4) Minor correctness/cleanup\n   - Integer accumulators now initialized with integer literals to avoid implicit float\u2192int conversions.\n\n5) Config tuning for speed\u00d7quality\n   - candidates_number: 10 \u2192 24  (denser, better local improvements without exploding cost)\n   - max_k_opt_depth: 89 \u2192 64 (shallower but adequate with better starts)\n   - exploration_coefficient: 0.0 \u2192 0.15 (mild exploration)\n   - min_potential_to_consider: 1.0 \u2192 0.0 (don\u2019t prematurely prune promising edges)\n   - weight_delta_coefficient: 10.0 \u2192 6.0 (stabler weight dynamics)\n   - use_sensitivity_decrease: false \u2192 true, sensitivity_temperature: 8.0 (scale weight flow by chain depth)\n   - max_k_opt_simulations_without_improve_to_stop: 200 \u2192 120; restarts_number: 500 \u2192 200 (the early-stop makes these more than enough)\n   - distance_type stays \u201cint32\u201d, magnify_rate stays 1e6 (fast & precise enough for the unit square)\n\nWhy this should improve FITNESS:\n- Stronger initialization reduces average tour length fast and lowers the number of improving moves needed.\n- Candidate hygiene eliminates self-edges in candidate slots, improving effective branching.\n- BHH early-stop prevents wasting restarts once we\u2019ve reached the asymptotic target window.\n- Overall: shorter tours with less wall-clock per instance \u2192 better combined score.\n\nNotes:\n- The heat-map path remains no-op (as before). Benefits here are purely from local-search pipeline quality and efficiency.\n```\nKey features: Alternative approach to heat_map_train_time_elapsed, Alternative approach to average_heat_map_inference_time_elapsed\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.0673, Type: Exploratory)\n```\nDefault workflow from the paper \"UTSP\" implementing 2'opt and k'opt searches.\nNo further changes.\n```\nUnique approach: Excellent average_heat_map_inference_time_elapsed (1.235), Excellent average_tsp_run_time_elapsed (38.065), Excellent average_path_length (17.022)\n\n### Inspiration 2 (Score: 0.0362, Type: Exploratory)\n```\nSummary of changes (aim: lower combined score = shorter tours + less time)\n\n1) Randomized KNN\u2013Nearest-Neighbor initialization\n   - Replaced purely random tour with a greedy nearest-neighbor constructor seeded from a random city and constrained to each node\u2019s KNN list (fallback to global nearest if needed).\n   - Rationale: starting from a much shorter tour slashes the number of beneficial 2-opt / k-opt moves and their search time.\n   - Complexity: O(n\u00b7K) typical, O(n^2) only on rare fallbacks; uses precomputed distance matrix.\n\n2) Candidate list hygiene\n   - \u2018identify_candidates_for_each_node\u2019 now guarantees the city itself is never placed among its own candidates and backfills properly.\n   - Effect: avoids wasted comparisons and marginally accelerates local search.\n\n3) Early stopping via BHH constant\n   - Stop criterion after each restart: if best length L_best \u2264 1.03 \u00b7 (\u03b2\u221a(nA)) with \u03b2\u22480.7120, A=1 for [0,1]^2, we break.\n   - Formula: L* \u2248 \u03b2 \u221a(nA)  (Beardwood\u2013Halton\u2013Hammersley; asymptotically tight in 2D i.i.d. uniform).\n   - Result: large runtime savings once we\u2019re \u201cclose enough,\u201d with negligible quality loss.\n\n4) Minor correctness/cleanup\n   - Integer accumulators now initialized with integer literals to avoid implicit float\u2192int conversions.\n\n5) Config tuning for speed\u00d7quality\n   - candidates_number: 10 \u2192 24  (denser, better local improvements without exploding cost)\n   - max_k_opt_depth: 89 \u2192 64 (shallower but adequate with better starts)\n   - exploration_coefficient: 0.0 \u2192 0.15 (mild exploration)\n   - min_potential_to_consider: 1.0 \u2192 0.0 (don\u2019t prematurely prune promising edges)\n   - weight_delta_coefficient: 10.0 \u2192 6.0 (stabler weight dynamics)\n   - use_sensitivity_decrease: false \u2192 true, sensitivity_temperature: 8.0 (scale weight flow by chain depth)\n   - max_k_opt_simulations_without_improve_to_stop: 200 \u2192 120; restarts_number: 500 \u2192 200 (the early-stop makes these more than enough)\n   - distance_type stays \u201cint32\u201d, magnify_rate stays 1e6 (fast & precise enough for the unit square)\n\nWhy this should improve FITNESS:\n- Stronger initialization reduces average tour length fast and lowers the number of improving moves needed.\n- Candidate hygiene eliminates self-edges in candidate slots, improving effective branching.\n- BHH early-stop prevents wasting restarts once we\u2019ve reached the asymptotic target window.\n- Overall: shorter tours with less wall-clock per instance \u2192 better combined score.\n\nNotes:\n- The heat-map path remains no-op (as before). Benefits here are purely from local-search pipeline quality and efficiency.\n```\nUnique approach: Excellent average_heat_map_inference_time_elapsed (1.206), Excellent average_tsp_run_time_elapsed (1.813), Excellent average_path_length (17.345)\n\n### Inspiration 3 (Score: 0.0375, Type: Exploratory)\n```\n# Changes (2025-10-09)\n\nGoal: maximize FITNESS = f(tour length, runtime).\n\n1) **Greedy NN seeding over KNN**  \n   - Added `generate_greedy_nn_solution(...)` (KNN-restricted with global fallback).  \n   - Replaced random start in `solve()` \u2192 far shorter initial tour, fewer local-search moves.\n\n2) **KNN without n\u00b2 double matrix in int-modes**  \n   - `identify_candidates_for_each_node(...)` now supports **metric=nullptr** and computes **squared distances on-the-fly** from coordinates.  \n   - `read_input_data(...)` skips filling `distance_double` unless needed.  \n   - `calc_total_distance_double(...)` derives length directly from coords (no dependency on distance matrix).\n\n3) **Math micro-optimizations in hot loops**  \n   - Replaced `pow(e, x)` with `std::exp(x)` in 2-opt and k-opt updates and sensitivity decay.  \n   - Switched `int64_sqrt` to hardware `sqrtl` + truncation.  \n   - Fixed integer accumulators to start from integer zero.\n\n4) **BHH early stopping (unit square)**  \n   - Stop restarts when \\(L \\le 1.02 \\cdot 0.712 \\sqrt{n}\\).  \n   - Formula: \\( \\mathbb{E}[L^*] \\approx \\beta \\sqrt{n} \\), \\(\\beta\\approx0.712\\) (Beardwood\u2013Halton\u2013Hammersley).\n\n5) **Config tuning (speed \u00d7 quality)**  \n   - `candidates_number: 24`, `max_k_opt_simulations_without_improve_to_stop: 120`, `restarts_number: 250`.  \n   - `min_potential_to_consider: 0.0`, `exploration_coefficient: 0.15`, `use_sensitivity_decrease: true`, `sensitivity_temperature: 8.0`.\n\nWhy this helps:\n- NN seeding + larger K yields a strong base tour \u2192 fewer improvements needed.  \n- Avoiding the n\u00b2 double matrix in int-modes cuts preprocessing and memory traffic.  \n- `exp` + fast sqrt shave cycles in inner loops.  \n- Early-stop trims long tails once we\u2019re within the BHH window.\n\nExpectations: **significantly lower average TSP runtime** with **equal or better tour length**, improving the combined score.\n```\nUnique approach: Excellent average_heat_map_inference_time_elapsed (1.225), Excellent average_tsp_run_time_elapsed (2.121), Excellent average_path_length (17.329)\n\n# Current Program\n```python\n* heat_map_train.py *:\n@@@\nimport pathlib\n\nBASE_DIR = pathlib.Path(__file__).parent\n\n# torch & related imports\nimport numpy as np\nimport torch\n\n\n# You can train graph neural networks here (actually you can edit the whole file).\n# Save them in str(BASE_DIR / \"pretrained\") directory and use them in `heat_map_inference.py`.\n# But mind the training time, it should not exceed 6 minutes (python3.11, ubuntu 22.04, nvidia A100 40 GB GPU).\n\n# In the original UTSP paper the heat map matrix is used, but upon the closer look on the authors code, they did not use it (they used simple K nearest neighbours as candidates).\n# So, the SOTA metrics were achieved without a heat map matrix, but maybe GNN approach is not wrong by its nature, maybe if trained properly it can help 2'opt and k'opt algorithms to find the best solution faster.\n# Maybe it is better to just improve the c++ code and not try the heat map approach.\n\n# Possible GNN step (just in case, implement if you like, you can skip this if think it is not effective): hamiltonian cycle constraint, loss on exact 2 degree for each node, etc.\n# UPDATE: currently, it is not supported to train heat maps, leave this code part untouched.\n\n\nif __name__ == \"__main__\":\n    print(\"Sample output to log\")\n@@@\n\n* heat_map_inference.py *:\n@@@\nimport os\nimport sys\nimport pathlib\nimport argparse\nimport numpy as np\n\nBASE_DIR = pathlib.Path(__file__).parent\nsys.path.append(str(BASE_DIR))\n\n# other imports\nfrom heat_map_train import *\n\n\ndef calc_heat_map(cities: np.ndarray) -> np.ndarray:\n    cities_number = cities.shape[0]\n\n    # You can call the pretrained model here (that was trained in `heat_map_train.py` and saved in str(BASE_DIR) / \"pretrained\")\n    # If you want to run some algorithm that is not trainable, then maybe it is better to implement it in TSP.cpp (just because it is faster in c++).\n\n    return np.zeros((cities_number, cities_number), dtype=float)\n\n\nif __name__ == \"__main__\":\n    p = argparse.ArgumentParser()\n    p.add_argument(\"--out\", required=True, help=\"Path to .npy to write the heat map.\")\n    args = p.parse_args()\n\n    # reading cities from stdin (mind the input format if you want to change this part, as your solution will be tested in an environment)\n    first_stdin_line = sys.stdin.readline().strip()\n    cities_number = int(first_stdin_line)\n    cities = np.loadtxt(sys.stdin, max_rows=cities_number)  # of shape (cities_number, 2)\n\n    # calculating heat map\n    heat_map = calc_heat_map(cities).astype(np.float32, copy=False)\n    print(\"Sample output to log\")\n\n    # writing heat map atomically to out .npy file (mind the output format if you want to change this part, as your solution will be tested in an environment)\n    tmp_path = args.out + \".tmp\"\n\n    with open(tmp_path, \"wb\") as output_temp_file:\n        np.save(output_temp_file, heat_map, allow_pickle=False)  # no auto \u201c.npy\u201d added\n        output_temp_file.flush()\n        os.fsync(output_temp_file.fileno())\n    \n    os.replace(tmp_path, args.out)\n@@@\n\n* include/utils.hpp *:\n@@@\n#pragma once\n\n// standart imports\n#include <queue>\n#include <cmath>\n#include <numeric>\n#include <algorithm>\n\n// other imports\n#include \"context.hpp\"\n\n\nconstexpr double BHH_CONSTANT_2D = 0.7120;  // Beardwood\u2013Halton\u2013Hammersley (BHH) constant\n\n\nlong long int64_sqrt(long long value) {\n    if (value <= 0) return 0LL;\n    long double r = std::sqrt((long double)value);\n    long long y = static_cast<long long>(r);\n    // Correct for rounding\n    while ((y + 1) <= value / (y + 1)) ++y;\n    while (y > 0 && y > value / y) --y;\n    return y;\n}\n\ndouble smooth_relu(double x) {\n    return (x < 0.0) ? std::exp(x) : (x + 1.0);\n}\n\n\ndouble calc_distance_double(Context& context, int i, int j) {\n    if (i == j) { return inf_double; }\n    double diff_x = (context.coordinates_double_x[i] - context.coordinates_double_x[j]);\n    double diff_y = (context.coordinates_double_y[i] - context.coordinates_double_y[j]);\n    return sqrt(diff_x * diff_x + diff_y * diff_y);\n}\n\nint calc_distance_int32(Context& context, int i, int j) {\n    if (i == j) { return inf_int32; }\n    long long diff_x = static_cast<long long>(context.coordinates_int32_x[i] - context.coordinates_int32_x[j]);\n    long long diff_y = static_cast<long long>(context.coordinates_int32_y[i] - context.coordinates_int32_y[j]);\n    return static_cast<int>(int64_sqrt(diff_x * diff_x + diff_y * diff_y));\n}\n\nlong long calc_distance_int64(Context& context, int i, int j) {\n    if (i == j) { return inf_int64; }\n    long long diff_x = context.coordinates_int64_x[i] - context.coordinates_int64_x[j];\n    long long diff_y = context.coordinates_int64_y[i] - context.coordinates_int64_y[j];\n    return int64_sqrt(diff_x * diff_x + diff_y * diff_y);\n}\n\n\ndouble get_distance_double(const Config& config, Context& context, int i, int j) {\n    return context.distance_double[i * config.cities_number + j];\n}\n\nint get_distance_int32(const Config& config, Context& context, int i, int j) {\n    return context.distance_int32[i * config.cities_number + j];\n}\n\nlong long get_distance_int64(const Config& config, Context& context, int i, int j) {\n    return context.distance_int64[i * config.cities_number + j];\n}\n\n\ndouble calc_total_distance_double(const Config& config, Context& context) {\n    double total = 0.0;\n    for (int i = 0; i < config.cities_number; ++i) {\n        int j = context.path[i].next;\n        double dx = context.coordinates_double_x[i] - context.coordinates_double_x[j];\n        double dy = context.coordinates_double_y[i] - context.coordinates_double_y[j];\n        total += std::sqrt(dx * dx + dy * dy);\n    }\n    return total;\n}\n\nint calc_total_distance_int32(const Config& config, Context& context) {\n    int total_distance = 0;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        total_distance += get_distance_int32(config, context, i, context.path[i].next);\n    }\n\n    return total_distance;\n}\n\nlong long calc_total_distance_int64(const Config& config, Context& context) {\n    long long total_distance = 0LL;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        total_distance += get_distance_int64(config, context, i, context.path[i].next);\n    }\n\n    return total_distance;\n}\n\n\nvoid calc_and_save_total_distance(const Config& config, Context& context) {\n    if (config.distance_type == DistanceType::Double) {\n        context.path_distance_double = calc_total_distance_double(config, context);\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        context.path_distance_int32 = calc_total_distance_int32(config, context);\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        context.path_distance_int64 = calc_total_distance_int64(config, context);\n    }\n}\n\n\nvoid update_weight_undirected(const Config& config, Context& context, int i, int j, double weight_delta) {\n    context.total_weight[i] -= smooth_relu(context.weight[i * config.cities_number + j]);\n    context.total_weight[j] -= smooth_relu(context.weight[j * config.cities_number + i]);\n\n    context.weight[i * config.cities_number + j] += weight_delta;\n    context.weight[j * config.cities_number + i] += weight_delta;\n\n    context.total_weight[i] += smooth_relu(context.weight[i * config.cities_number + j]);\n    context.total_weight[j] += smooth_relu(context.weight[j * config.cities_number + i]);\n}\n\n\nvoid identify_candidates_for_each_node(const Config& config, Context& context, const double* metric, bool is_reversed) {\n    const int n = config.cities_number;\n\n    for (int i = 0; i < n; ++i) {\n        std::iota(context.buffer.begin(), context.buffer.end(), 0);  // [0..n)\n\n        // Exclude self by swapping it to the last position and not considering it\n        std::swap(context.buffer[i], context.buffer[n - 1]);\n\n        auto cmp_metric = [&](int u, int v) {\n            double mu = metric[i * n + u];\n            double mv = metric[i * n + v];\n            return is_reversed ? (mu > mv) : (mu < mv);\n        };\n\n        auto dist2 = [&](int u) -> long double {\n            if (config.distance_type == DistanceType::Double) {\n                long double dx = (long double)context.coordinates_double_x[i] - (long double)context.coordinates_double_x[u];\n                long double dy = (long double)context.coordinates_double_y[i] - (long double)context.coordinates_double_y[u];\n                return dx * dx + dy * dy;\n            } else if (config.distance_type == DistanceType::Int32) {\n                long long dx = (long long)context.coordinates_int32_x[i] - (long long)context.coordinates_int32_x[u];\n                long long dy = (long long)context.coordinates_int32_y[i] - (long long)context.coordinates_int32_y[u];\n                return (long double)dx * dx + (long double)dy * dy;\n            } else {\n                long long dx = context.coordinates_int64_x[i] - context.coordinates_int64_x[u];\n                long long dy = context.coordinates_int64_y[i] - context.coordinates_int64_y[u];\n                return (long double)dx * dx + (long double)dy * dy;\n            }\n        };\n\n        if (metric) {\n            std::nth_element(\n                context.buffer.begin(),\n                context.buffer.begin() + config.candidates_number,\n                context.buffer.begin() + (n - 1),\n                cmp_metric\n            );\n        } else {\n            std::nth_element(\n                context.buffer.begin(),\n                context.buffer.begin() + config.candidates_number,\n                context.buffer.begin() + (n - 1),\n                [&](int u, int v) { return dist2(u) < dist2(v); }\n            );\n        }\n\n        for (int j = 0; j < config.candidates_number; ++j) {\n            context.candidates[i * config.candidates_number + j] = context.buffer[j];\n        }\n    }\n}\n\n\nint get_random_int_by_module(int mod) {\n\treturn rand() % mod;\n}\n\n\nbool is_cities_same_or_adjacent(const Config& config, Context& context, int i, int j) {\n    return (i == j || context.path[i].next == j || context.path[j].next == i);\n}\n\n\nvoid reverse_sub_path(Context& context, int i, int j) {\n    int current_city = i;\n\n    while (true) {\n        std::swap(context.path[current_city].prev, context.path[current_city].next);\n\n        if (current_city == j) { return; }\n\n        current_city = context.path[current_city].prev;\n    }\n}\n\n\ndouble expected_optimal_tsp_length_2d(long long n, double width, double height) {\n    if (n <= 1 || width <= 0.0 || height <= 0.0) {\n        return 0.0;\n    }\n\n    double area = width * height;\n    double expected_length = BHH_CONSTANT_2D * std::sqrt(static_cast<double>(n) * area);\n    return expected_length;\n}\n@@@\n\n* include/context.hpp *:\n@@@\n#pragma once\n\n// standart imports\n#include <string>\n#include <vector>\n#include <limits>\n#include <iostream>\n\n\n// global variables declaration\nconstexpr int null = -1;\nconstexpr double e = 2.718281;\nconstexpr double inf_double = std::numeric_limits<double>::infinity();\nconstexpr int inf_int32 = std::numeric_limits<int>::max();\nconstexpr long long inf_int64 = std::numeric_limits<long long>::max();\n\n\nenum class CandidatesSource { KNN, HeatMap };\nenum class DistanceType { Int32, Int64, Double };\n\n\nstruct Config {\n    int cities_number;\n    std::string input_path;\n    std::string output_path;\n    bool use_heat_map_as_initial_weights;\n    CandidatesSource candidates_source;\n    int candidates_number;\n    int max_k_opt_depth;\n    bool random_k_opt_depth_after_first_iteration;\n    double min_potential_to_consider;\n    double exploration_coefficient;\n    double weight_delta_coefficient;\n    bool use_sensitivity_decrease;\n    double sensitivity_temperature;\n    int max_k_opt_simulations_without_improve_to_stop;\n    int restarts_number;\n    DistanceType distance_type;\n    double magnify_rate;\n\n    Config(const json& config) {\n        cities_number = config[\"cities_number\"];\n        input_path = config[\"input_path\"];\n        output_path = config[\"output_path\"];\n        use_heat_map_as_initial_weights = config[\"use_heat_map_as_initial_weights\"];\n\n        if (config[\"candidates_source\"].get<std::string>() == \"knn\") {\n            candidates_source = CandidatesSource::KNN;\n        } else if (config[\"candidates_source\"].get<std::string>() == \"heat_map\") {\n            candidates_source = CandidatesSource::HeatMap;\n        } else {\n            throw std::invalid_argument(\"Unknown candidates source: '\" + config[\"candidates_source\"].get<std::string>() + \"'.\");\n        }\n\n        candidates_number = config[\"candidates_number\"];\n        max_k_opt_depth = config[\"max_k_opt_depth\"];\n        random_k_opt_depth_after_first_iteration = config[\"random_k_opt_depth_after_first_iteration\"];\n        min_potential_to_consider = config[\"min_potential_to_consider\"];\n        exploration_coefficient = config[\"exploration_coefficient\"];\n        weight_delta_coefficient = config[\"weight_delta_coefficient\"];\n        use_sensitivity_decrease = config[\"use_sensitivity_decrease\"];\n        sensitivity_temperature = config[\"sensitivity_temperature\"];\n        max_k_opt_simulations_without_improve_to_stop = config[\"max_k_opt_simulations_without_improve_to_stop\"];\n        restarts_number = config[\"restarts_number\"];\n\n        if (config[\"distance_type\"].get<std::string>() == \"int32\") {\n            distance_type = DistanceType::Int32;\n        } else if (config[\"distance_type\"].get<std::string>() == \"int64\") {\n            distance_type = DistanceType::Int64;\n        } else if (config[\"distance_type\"].get<std::string>() == \"double\") {\n            distance_type = DistanceType::Double;\n        } else {\n            throw std::invalid_argument(\"Unknown distance type: '\" + config[\"distance_type\"].get<std::string>() + \"'.\");\n        }\n\n        magnify_rate = config[\"magnify_rate\"];\n\n        // warnings\n        if (distance_type == DistanceType::Double) {\n            if (cities_number > 1'000'000) {\n                std::cout << \"Warning: `cities_number` is greater than 1'000'000. Try to use with `distance_type` = 'int64' to avoid precision errors.\\n\";\n            }\n        } else {\n            if (magnify_rate < 10'000.0) {\n                std::cout << \"Warning: `magnify_rate` is better to take more than 10'000 when using with `distance_type` = 'int32' or 'int64'.\\n\";\n            }\n            if (distance_type == DistanceType::Int32 && static_cast<long long>(cities_number) * magnify_rate > 1'000'000'000) {\n                std::cout << \"Warning: distance might be out of bounds for a 32 bit integer. Consider switching to doubles for distance calculation or using 64 bit integers.\\n\";\n            }\n            if (distance_type == DistanceType::Int64 && magnify_rate > 1'000'000'000) {\n                std::cout << \"Warning: distance might be out of bounds for a 64 bit integer. Consider switching to doubles for distance calculation.\\n\";\n            }\n        }\n    }\n};\n\n\nstruct City {\n  int prev;\n  int next;\n};\n\n\nstruct Context {\n    // coordinates\n    double* coordinates_double_x = nullptr;\n    double* coordinates_double_y = nullptr;\n\n    int* coordinates_int32_x = nullptr;\n    int* coordinates_int32_y = nullptr;\n\n    long long* coordinates_int64_x = nullptr;\n    long long* coordinates_int64_y = nullptr;\n\n    // distances\n    double* distance_double = nullptr;\n    int* distance_int32 = nullptr;\n    long long* distance_int64 = nullptr;\n\n    // weights\n    double* heat_map = nullptr;\n    double* weight = nullptr;\n    double* total_weight = nullptr;\n    double* potential = nullptr;\n\n    // candidates\n    int* candidates = nullptr;\n\n    // local k opt search\n    int* pairs = nullptr;\n    int* saved_pairs = nullptr;\n    int saved_depth = 0;\n\n    double current_best_delta_double = -inf_double;\n    int current_best_delta_int32 = -inf_int32;\n    long long current_best_delta_int64 = -inf_int64;\n\n    long long* chosen_times = nullptr;\n    long long total_simulations = 0;\n\n    // path\n    City* path = nullptr;\n    double path_distance_double = inf_double;\n    int path_distance_int32 = inf_int32;\n    long long path_distance_int64 = inf_int64;\n\n    City* best_path = nullptr;\n    double best_path_distance_double = inf_double;\n    int best_path_distance_int32 = inf_int32;\n    long long best_path_distance_int64 = inf_int64;\n\n    int* solution;\n    std::vector<bool> is_city_selected;\n\n    // other utils/tmp variables\n    std::vector<int> buffer;\n\n    Context(const Config& config) : buffer(config.cities_number, 0), is_city_selected(config.cities_number, false) {\n        coordinates_double_x = new double[config.cities_number];\n        coordinates_double_y = new double[config.cities_number];\n\n        if (config.distance_type == DistanceType::Int32) {\n            coordinates_int32_x = new int[config.cities_number];\n            coordinates_int32_y = new int[config.cities_number];\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            coordinates_int64_x = new long long[config.cities_number];\n            coordinates_int64_y = new long long[config.cities_number];\n        }\n\n        distance_double = new double[config.cities_number * config.cities_number];\n        if (config.distance_type == DistanceType::Int32) {\n            distance_int32 = new int[config.cities_number * config.cities_number];\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            distance_int64 = new long long[config.cities_number * config.cities_number];\n        }\n\n        if (config.use_heat_map_as_initial_weights) {\n            heat_map = new double[config.cities_number * config.cities_number];\n        }\n        weight = new double[config.cities_number * config.cities_number];\n        total_weight = new double[config.cities_number];\n        potential = new double[config.cities_number * config.cities_number];\n\n        candidates = new int[config.cities_number * config.candidates_number];\n\n        pairs = new int[config.cities_number];  // because currently we have a random k opt depth change option\n        saved_pairs = new int[config.cities_number];\n\n        chosen_times = new long long[config.cities_number * config.cities_number];\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            chosen_times[i] = 0;\n        }\n\n        path = new City[config.cities_number];\n        best_path = new City[config.cities_number];\n        solution = new int[config.cities_number];\n    }\n\n    ~Context() {\n        delete[] coordinates_double_x;\n        delete[] coordinates_double_y;\n\n        if (coordinates_int32_x) { delete[] coordinates_int32_x; }\n        if (coordinates_int32_y) { delete[] coordinates_int32_y; }\n\n        if (coordinates_int64_x) { delete[] coordinates_int64_x; }\n        if (coordinates_int64_y) { delete[] coordinates_int64_y; }\n\n        delete[] distance_double;\n        if (distance_int32) { delete[] distance_int32; }\n        if (distance_int64) { delete[] distance_int64; }\n\n        if (heat_map) { delete[] heat_map; }\n        delete[] weight;\n        delete[] total_weight;\n        delete[] potential;\n\n        delete[] candidates;\n\n        delete[] pairs;\n        delete[] saved_pairs;\n\n        delete[] chosen_times;\n\n        delete[] path;\n        delete[] best_path;\n        delete[] solution;\n    }\n};\n\n\nvoid convert_solution_to_path(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        int current_city = context.solution[i];\n\n        context.path[current_city].prev = context.solution[(i + config.cities_number - 1) % config.cities_number];\n        context.path[current_city].next = context.solution[(i + 1) % config.cities_number];\n    }\n}\n\nvoid convert_path_to_solution(const Config& config, Context& context) {\n    int current_city = 0;\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.solution[i] = current_city;\n\n        current_city = context.path[current_city].next;\n    }\n}\n\nvoid store_path_as_best(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.best_path[i].prev = context.path[i].prev;\n        context.best_path[i].next = context.path[i].next;\n    }\n\n    if (config.distance_type == DistanceType::Double) {\n        context.best_path_distance_double = context.path_distance_double;\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        context.best_path_distance_int32 = context.path_distance_int32;\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        context.best_path_distance_int64 = context.path_distance_int64;\n    }\n}\n\nvoid restore_best_path(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n        context.path[i].prev = context.best_path[i].prev;\n        context.path[i].next = context.best_path[i].next;\n    }\n}\n@@@\n\n* include/random_solution.hpp *:\n@@@\n#pragma once\n\n\n// * The following functions are used to randomly generate an initial solution.\n// * Starting from an arbitrarily chosen city, it iteratively selects a random city until forming a complete TSP tour.\n\n\nint select_random_city(const Config& config, Context& context) {\n\tint random_start = get_random_int_by_module(config.cities_number);\n\n\tfor (int i = 0; i < config.cities_number; ++i) {\n\t\tint city = (random_start + i) % config.cities_number;\n\n\t\tif (!context.is_city_selected[city]) {\n\t\t\treturn city;\n\t\t}\n\t}\n\n\treturn null;\n}\n\nvoid generate_random_solution(const Config& config, Context& context) {\n\tfor (int i = 0; i < config.cities_number; ++i) {\n\t\tcontext.solution[i] = null;\n\t\tcontext.is_city_selected[i] = false;\n\t}\n\n    for (int i = 0; i < config.cities_number; ++i) {\n        int current_city = select_random_city(config, context);\n        context.solution[i] = current_city;\n        context.is_city_selected[current_city] = true;\n    }\n}\n@@@\n\n* include/local_2_opt_search.hpp *:\n@@@\n#pragma once\n\n\nbool apply_2_opt_move(const Config& config, Context& context, int i, int j) {\n    if (is_cities_same_or_adjacent(config, context, i, j)) { return false; }\n\n    int i_next = context.path[i].next;\n\tint j_next = context.path[j].next;\n\n    ++context.chosen_times[i * config.cities_number + j];\n\t++context.chosen_times[j * config.cities_number + i];\n\t++context.chosen_times[i_next * config.cities_number + j_next];\n\t++context.chosen_times[j_next * config.cities_number + i_next];\n\n    ++context.total_simulations;\n\n    // calculating delta\n    bool apply_move = false;\n    double weight_increase = 0.0;\n\n    if (config.distance_type == DistanceType::Double) {\n        double delta = get_distance_double(config, context, i, i_next) + get_distance_double(config, context, j, j_next) - get_distance_double(config, context, i, j) - get_distance_double(config, context, i_next, j_next);\n        if (delta > 0.0) {\n            apply_move = true;\n            weight_increase = config.weight_delta_coefficient * (std::exp(delta / context.path_distance_double) - 1.0);\n            context.path_distance_double -= delta;\n        }\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        int delta = get_distance_int32(config, context, i, i_next) + get_distance_int32(config, context, j, j_next) - get_distance_int32(config, context, i, j) - get_distance_int32(config, context, i_next, j_next);\n        if (delta > 0) {\n            apply_move = true;\n            weight_increase = config.weight_delta_coefficient * (std::exp(static_cast<double>(delta) / context.path_distance_int32) - 1.0);\n            context.path_distance_int32 -= delta;\n        }\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        long long delta = get_distance_int64(config, context, i, i_next) + get_distance_int64(config, context, j, j_next) - get_distance_int64(config, context, i, j) - get_distance_int64(config, context, i_next, j_next);\n        if (delta > 0) {\n            apply_move = true;\n            weight_increase = config.weight_delta_coefficient * (std::exp(static_cast<double>(delta) / context.path_distance_int64) - 1.0);\n            context.path_distance_int64 -= delta;\n        }\n    }\n\n    if (apply_move) {\n        // applying 2 opt move\n        reverse_sub_path(context, i_next, j);\n\n        context.path[i].next = j;\n        context.path[i_next].next = j_next;\n        context.path[j].prev = i;\n        context.path[j_next].prev = i_next;\n\n        // updating weights\n        update_weight_undirected(config, context, i, j, weight_increase);\n        update_weight_undirected(config, context, i_next, j_next, weight_increase);\n\n        return true;\n    }\n    return false;\n}\n\n\nbool improve_by_2_opt_move(const Config& config, Context& context) {\n    for (int i = 0; i < config.cities_number; ++i) {\n\t\tfor (int j = 0; j < config.candidates_number; ++j) {\n\t\t\tint candidate = context.candidates[i * config.candidates_number + j];\n\n\t\t\tif (apply_2_opt_move(config, context, i, candidate)) { return true; }\n\t\t}\n\t}\n    return false;\n}\n\nint local_2_opt_search(const Config& config, Context& context) {\n    int improved_times = 0;\n\n    while (improve_by_2_opt_move(config, context)) { ++improved_times; };\n\n    return improved_times;\n}\n@@@\n\n* include/local_k_opt_search.hpp *:\n@@@\n#pragma once\n\n// standart imports\n#include <cmath>\n#include <iostream>\n\n\nvoid calc_potential_inplace(const Config& config, Context& context, int i, int j) {\n    if (i == j) {\n        context.potential[i * config.cities_number + j] = 0.0;\n        return;\n    }\n\n    // calculating total weight\n    double average_weight = context.total_weight[i] / (config.cities_number - 1);\n    double weight = context.weight[i * config.cities_number + j];\n\n    context.potential[i * config.cities_number + j] = (smooth_relu(weight) / average_weight) + config.exploration_coefficient * sqrt(log(context.total_simulations + 1) / (context.chosen_times[i * config.cities_number + j] + 1));  // always a positive value\n}\n\nint get_candidate_proportionally_by_potential(const Config& config, Context& context, int current_city, int start_city) {\n    int next_city = context.path[current_city].next;\n\n\tdouble total_potential = 0.0;\n    int candidates_available = 0;\n\n\tfor (int i = 0; i < config.candidates_number; ++i) {\n        int candidate = context.candidates[current_city * config.candidates_number + i];\n\n        calc_potential_inplace(config, context, current_city, candidate);\n        double potential = context.potential[current_city * config.cities_number + candidate];\n\n        if (candidate == next_city || candidate == start_city || (potential < config.min_potential_to_consider)) { continue; }  // not available\n\n\t\ttotal_potential += potential;\n        ++candidates_available;\n\t}\n\n    if (candidates_available == 0) { return null; }\n\n    // choosing the random available candidate proportionally\n    double random_potential = (static_cast<double>(rand()) / RAND_MAX) * total_potential;\n\n\tfor (int i = 0; i < config.candidates_number; ++i) {\n        int candidate = context.candidates[current_city * config.candidates_number + i];\n        double potential = context.potential[current_city * config.cities_number + candidate];\n\n        if (candidate == next_city || candidate == start_city || (potential < config.min_potential_to_consider)) { continue; }  // not available\n\n        random_potential -= potential;\n        if (random_potential <= 0) { return candidate; }\n    }\n\n\treturn null;\n}\n\n\nbool apply_k_opt_move(const Config& config, Context& context, int start_city, int max_k_opt_depth) {\n    ++context.total_simulations;\n\n    // first pair\n    int next_to_start_city = context.path[start_city].next;\n\n    context.pairs[0] = start_city;\n    context.pairs[1] = next_to_start_city;\n    int depth = 1;\n\n    int copied_to_saved_pairs = 0;\n    bool need_copy_to_saved_pairs = false;\n\n    // breaking an edge of the first pair\n    context.path[start_city].next = null;\n    context.path[next_to_start_city].prev = null;\n\n    // initializing gains\n    double gain_double; double gain_double_with_closure = 0.0;\n    int gain_int32; int gain_int32_with_closure = 0;\n    long long gain_int64; long long gain_int64_with_closure = 0;\n\n    if (config.distance_type == DistanceType::Double) {\n        gain_double = get_distance_double(config, context, start_city, next_to_start_city);\n    }\n    if (config.distance_type == DistanceType::Int32) {\n        gain_int32 = get_distance_int32(config, context, start_city, next_to_start_city);\n    }\n    if (config.distance_type == DistanceType::Int64) {\n        gain_int64 = get_distance_int64(config, context, start_city, next_to_start_city);\n    }\n\n    bool apply_move = false;\n\n    int current_city = next_to_start_city;\n\n    for (int i = 1; i < max_k_opt_depth; ++i) {\n        int proposed_city = get_candidate_proportionally_by_potential(config, context, current_city, start_city);\n\n        if (proposed_city == null) { return false; }  // no candidates, could not improve\n\n        ++context.chosen_times[current_city * config.cities_number + proposed_city];\n\t\t++context.chosen_times[proposed_city * config.cities_number + current_city];\n\n        int proposed_city_link = context.path[proposed_city].prev;  // city to disconnect from the proposed city (and maybe to connect to the start city)\n\n        context.pairs[2 * i] = proposed_city;\n        context.pairs[2 * i + 1] = proposed_city_link;\n        ++depth;\n\n        // applying 2 opt move\n        reverse_sub_path(context, current_city, proposed_city_link);\n\n        context.path[current_city].next = proposed_city;\n        context.path[proposed_city].prev = current_city;\n        context.path[proposed_city_link].prev = null;\n\n        // recalculating gains\n        if (config.distance_type == DistanceType::Double) {\n            gain_double += get_distance_double(config, context, proposed_city_link, proposed_city) - get_distance_double(config, context, current_city, proposed_city);\n            gain_double_with_closure = gain_double - get_distance_double(config, context, start_city, proposed_city_link);\n\n            if (gain_double_with_closure > 0.0) {\n                apply_move = true;\n                context.path_distance_double -= gain_double_with_closure;\n            }\n            if (context.current_best_delta_double < gain_double_with_closure) {\n                need_copy_to_saved_pairs = true;\n                context.current_best_delta_double = gain_double_with_closure;\n            }\n        }\n        if (config.distance_type == DistanceType::Int32) {\n            gain_int32 += get_distance_int32(config, context, proposed_city_link, proposed_city) - get_distance_int32(config, context, current_city, proposed_city);\n            gain_int32_with_closure = gain_int32 - get_distance_int32(config, context, start_city, proposed_city_link);\n\n            if (gain_int32_with_closure > 0) {\n                apply_move = true;\n                context.path_distance_int32 -= gain_int32_with_closure;\n            }\n            if (context.current_best_delta_int32 < gain_int32_with_closure) {\n                need_copy_to_saved_pairs = true;\n                context.current_best_delta_int32 = gain_int32_with_closure;\n            }\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            gain_int64 += get_distance_int64(config, context, proposed_city_link, proposed_city) - get_distance_int64(config, context, current_city, proposed_city);\n            gain_int64_with_closure = gain_int64 - get_distance_int64(config, context, start_city, proposed_city_link);\n\n            if (gain_int64_with_closure > 0) {\n                apply_move = true;\n                context.path_distance_int64 -= gain_int64_with_closure;\n            }\n            if (context.current_best_delta_int64 < gain_int64_with_closure) {\n                need_copy_to_saved_pairs = true;\n                context.current_best_delta_int64 = gain_int64_with_closure;\n            }\n        }\n\n        if (need_copy_to_saved_pairs) {  // for future weight updating\n            for (int i = copied_to_saved_pairs; i < depth; ++i) {\n                context.saved_pairs[2 * i] = context.pairs[2 * i];\n                context.saved_pairs[2 * i + 1] = context.pairs[2 * i + 1];\n            }\n\n            copied_to_saved_pairs = depth;\n            context.saved_depth = depth;\n\n            need_copy_to_saved_pairs = false;\n        }\n\n        if (apply_move) { break; }\n\n        current_city = proposed_city_link;\n    }\n\n    if (apply_move) {\n        // concluding the path to cycle\n        int end_city = context.pairs[2 * depth - 1];\n\n        context.path[start_city].next = end_city;\n        context.path[end_city].prev = start_city;\n\n        return true;\n    }\n    return false;\n}\n\n\nbool improve_by_k_opt_move(const Config& config, Context& context, int max_k_opt_depth) {\n    context.current_best_delta_double = -inf_double;\n    context.current_best_delta_int32 = -inf_int32;\n    context.current_best_delta_int64 = -inf_int64;\n\n    // saving current path length\n    double saved_path_distance_double = context.path_distance_double;\n    double saved_path_distance_int32 = context.path_distance_int32;\n    double saved_path_distance_int64 = context.path_distance_int64;\n\n    bool improved = false;\n\n    for (int i = 0; i < config.max_k_opt_simulations_without_improve_to_stop; ++i) {\n        // saving current path\n        convert_path_to_solution(config, context);\n\n        int start_city = get_random_int_by_module(config.cities_number);\n        if (apply_k_opt_move(config, context, start_city, max_k_opt_depth)) {\n            improved = true;\n            break;\n        }\n\n        // restoring the path that was before the move\n        convert_solution_to_path(config, context);\n    }\n\n    // updating weights from the best delta (it can be negative, if we've not improved)\n    double weight_delta = 0.0;\n    if (config.distance_type == DistanceType::Double && context.current_best_delta_double != -inf_double) {\n        weight_delta = config.weight_delta_coefficient * (std::exp(context.current_best_delta_double / saved_path_distance_double) - 1.0);\n    }\n    if (config.distance_type == DistanceType::Int32 && context.current_best_delta_int32 != -inf_int32) {\n        weight_delta = config.weight_delta_coefficient * (std::exp(static_cast<double>(context.current_best_delta_int32) / saved_path_distance_int32) - 1.0);\n    }\n    if (config.distance_type == DistanceType::Int64 && context.current_best_delta_int64 != -inf_int64) {\n        weight_delta = config.weight_delta_coefficient * (std::exp(static_cast<double>(context.current_best_delta_int64) / saved_path_distance_int64) - 1.0);\n    }\n\n    for (int i = 0; i < context.saved_depth; ++i) {\n        int current_city = context.saved_pairs[2 * i];\n        int proposed_city = (i < context.saved_depth - 1) ? context.saved_pairs[2 * i + 2] : context.saved_pairs[0];\n\n        double factor = 1.0;\n        if (config.use_sensitivity_decrease && !improved) {\n            // exponential decrease in sensitivity\n            factor = std::exp(-static_cast<double>(i) / config.sensitivity_temperature);\n        }\n\n        update_weight_undirected(config, context, current_city, proposed_city, weight_delta * factor);\n    }\n\n    return improved;\n}\n\nint local_k_opt_search(const Config& config, Context& context, int max_k_opt_depth) {  \n    // calculating total weight (for mitigating precision based errors, that was found empirically)\n    for (int i = 0; i < config.cities_number; ++i) {\n        double total_weight = 0.0;\n\n        for (int j = 0; j < config.cities_number; ++j) {\n            total_weight += smooth_relu(context.weight[i * config.cities_number + j]);\n        }\n\n        context.total_weight[i] = total_weight;\n    }\n\n    // running simulations and trying to improve\n    int improved_times = 0;\n\n    while (improve_by_k_opt_move(config, context, max_k_opt_depth)) { ++improved_times; };\n\n    return improved_times;\n}\n@@@\n\n* include/additional.hpp *:\n@@@\n#pragma once\n\n// Greedy KNN-based tour constructor with global fallback.\n// Uses squared distances (no sqrt); order is preserved.\ninline long double _dist2_idx(const Config& config, Context& context, int a, int b) {\n    if (config.distance_type == DistanceType::Double) {\n        long double dx = (long double)context.coordinates_double_x[a] - (long double)context.coordinates_double_x[b];\n        long double dy = (long double)context.coordinates_double_y[a] - (long double)context.coordinates_double_y[b];\n        return dx * dx + dy * dy;\n    } else if (config.distance_type == DistanceType::Int32) {\n        long long dx = (long long)context.coordinates_int32_x[a] - (long long)context.coordinates_int32_x[b];\n        long long dy = (long long)context.coordinates_int32_y[a] - (long long)context.coordinates_int32_y[b];\n        return (long double)dx * dx + (long double)dy * dy;\n    } else {\n        long long dx = context.coordinates_int64_x[a] - context.coordinates_int64_x[b];\n        long long dy = context.coordinates_int64_y[a] - context.coordinates_int64_y[b];\n        return (long double)dx * dx + (long double)dy * dy;\n    }\n}\n\ninline void generate_greedy_nn_solution(const Config& config, Context& context) {\n    const int n = config.cities_number;\n\n    for (int i = 0; i < n; ++i) {\n        context.solution[i] = null;\n        context.is_city_selected[i] = false;\n    }\n\n    int start = get_random_int_by_module(n);\n    context.solution[0] = start;\n    context.is_city_selected[start] = true;\n\n    int cur = start;\n    for (int pos = 1; pos < n; ++pos) {\n        int best = null;\n        long double bestd = std::numeric_limits<long double>::infinity();\n\n        // Try KNN list first\n        for (int k = 0; k < config.candidates_number; ++k) {\n            int v = context.candidates[cur * config.candidates_number + k];\n            if (v == cur || context.is_city_selected[v]) continue;\n            long double d2 = _dist2_idx(config, context, cur, v);\n            if (d2 < bestd) { bestd = d2; best = v; }\n        }\n\n        // Fallback: full scan\n        if (best == null) {\n            for (int v = 0; v < n; ++v) {\n                if (v == cur || context.is_city_selected[v]) continue;\n                long double d2 = _dist2_idx(config, context, cur, v);\n                if (d2 < bestd) { bestd = d2; best = v; }\n            }\n        }\n\n        context.solution[pos] = best;\n        context.is_city_selected[best] = true;\n        cur = best;\n    }\n}\n@@@\n\n* TSP.cpp *:\n@@@\n// standart imports\n#include <string>\n#include <chrono>\n#include <fstream>\n#include <iomanip>\n#include <iostream>\n\n// json imports\n#include \"include/json.hpp\"\n\nusing json = nlohmann::json;\nusing namespace std::chrono;\n\n// other imports\n#include \"include/context.hpp\"\n#include \"include/utils.hpp\"\n#include \"include/random_solution.hpp\"\n#include \"include/local_2_opt_search.hpp\"\n#include \"include/local_k_opt_search.hpp\"\n\n// additional functions & methods\n#include \"include/additional.hpp\"\n\n\n// --- config parameters ---\n//   `cities_number`: number of points on the 2D surface.\n//   `input_path`: path to the file with cities coordinates and the edge heat map.\n//   `output_path`: path to the file where to write the optimal hamiltonian cycle and corresponding metrics.\n//   `use_heat_map_as_initial_weights`: whether to use the heat map as initial for the weights matrix.\n//   `candidates_source`: 'knn' or 'heat_map', if 'heat_map' the candidates for each city are the nearest cities to it.\n//   `candidates_number`: number of candidate cities for each city.\n//   `max_k_opt_depth`: maximum chain links (k parameter) in simulation.\n//   `random_k_opt_depth_after_first_iteration`: if to randomly change the `max_k_opt_depth` after the first iteration (restart).\n//   `min_potential_to_consider`: minimum potential of an edge to consider it in simulation (look at the formula for potential to understand fully).\n//   `exploration_coefficient`: hyperparameter for exploration.\n//   `weight_delta_coefficient`: hyperparameter for updating the weights matrix.\n//   `use_sensitivity_decrease`: whether to reduce weight flow for deep edges in unsuccessful k'opt search.\n//   `sensitivity_temperature`: hyperparameter for controlling the weight decrease in unsuccessful simulation depending on the length of a chain.\n//   `max_k_opt_simulations_without_improve_to_stop`: the number of MCTS simulations per restart.\n//   `restarts_number`: number of times algorithm restarts while maintaining the weights matrix (number of iterations).\n//   `distance_type`: \"int32\", \"int64\" or \"double\".\n//   `magnify_rate`: when `distance_type` is \"int32\" or \"int64\" algorithm relies only on integers to find an optimal solution (for speed), therefore each distance is magnified by `magnify_rate` value and rounded to integer. (if `distance_type` = 'double' this parameter is ignored)\n\n\nvoid read_input_data(const Config& config, Context& context) {\n    std::ifstream input_file(config.input_path);\n\n    int cities_number; input_file >> cities_number;\n\n    // reading coordinates\n    for (int i = 0; i < config.cities_number; ++i) {\n        input_file >> context.coordinates_double_x[i] >> context.coordinates_double_y[i];\n\n        if (config.distance_type == DistanceType::Int32) {\n            context.coordinates_int32_x[i] = static_cast<int>(0.5 + context.coordinates_double_x[i] * config.magnify_rate);\n            context.coordinates_int32_y[i] = static_cast<int>(0.5 + context.coordinates_double_y[i] * config.magnify_rate);\n        }\n        if (config.distance_type == DistanceType::Int64) {\n            context.coordinates_int64_x[i] = static_cast<long long>(0.5 + context.coordinates_double_x[i] * config.magnify_rate);\n            context.coordinates_int64_y[i] = static_cast<long long>(0.5 + context.coordinates_double_y[i] * config.magnify_rate);\n        }\n    }\n\n    // calculating distances (avoid n^2 double when not needed)\n    if (config.distance_type == DistanceType::Double) {\n        for (int i = 0; i < config.cities_number; ++i) {\n            for (int j = 0; j < config.cities_number; ++j) {\n                context.distance_double[i * config.cities_number + j] = calc_distance_double(context, i, j);\n            }\n        }\n    } else {\n        // In int-modes, fill only the integer metric; skip the double matrix for speed\n        if (config.distance_type == DistanceType::Int32) {\n            for (int i = 0; i < config.cities_number; ++i) {\n                for (int j = 0; j < config.cities_number; ++j) {\n                    context.distance_int32[i * config.cities_number + j] = calc_distance_int32(context, i, j);\n                }\n            }\n        } else { // Int64\n            for (int i = 0; i < config.cities_number; ++i) {\n                for (int j = 0; j < config.cities_number; ++j) {\n                    context.distance_int64[i * config.cities_number + j] = calc_distance_int64(context, i, j);\n                }\n            }\n        }\n    }\n\n    if (config.use_heat_map_as_initial_weights) {\n        // reading heat map\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            input_file >> context.heat_map[i];\n            context.weight[i] = context.heat_map[i];\n        }\n    } else {\n        for (int i = 0; i < config.cities_number * config.cities_number; ++i) {\n            context.weight[i] = 0.0;\n        }\n    }\n\n    // initializing total weight\n    for (int i = 0; i < config.cities_number; ++i) {\n        double total_weight = 0.0;\n\n        for (int j = 0; j < config.cities_number; ++j) {\n            total_weight += smooth_relu(context.weight[i * config.cities_number + j]);\n        }\n\n        context.total_weight[i] = total_weight;\n    }\n\n    // calculating candidates\n    if (config.candidates_source == CandidatesSource::KNN) {\n        const double* metric = (config.distance_type == DistanceType::Double) ? context.distance_double : nullptr;\n        identify_candidates_for_each_node(config, context, metric, false);\n    } else if (config.candidates_source == CandidatesSource::HeatMap) {\n        identify_candidates_for_each_node(config, context, context.heat_map, true);\n    } else {\n        throw std::invalid_argument(\"Unknown candidates source.\");\n    }\n}\n\n\nvoid solve(const Config& config, Context& context) {  // the found solution will be stored in context.solution\n    // initialization\n    std::chrono::time_point<std::chrono::high_resolution_clock> start_total_time = high_resolution_clock::now(), end_total_time;\n    std::chrono::time_point<std::chrono::high_resolution_clock> start_time, end_time;\n\n    int max_k_opt_depth = config.max_k_opt_depth;\n    const double bhh_target = 1.02 * expected_optimal_tsp_length_2d(config.cities_number, 1.0, 1.0);\n\n\tfor (int i = 1; i < config.restarts_number + 1; ++i) {  // early-stop enabled\n        if (i % 100 == 0) { std::cout << \"# --------- Iteration: \" << i << '\\n'; }\n        int improved_times = 0;\n\n        // Initialization (7/8 greedy NN, 1/8 random for diversity)\n        start_time = high_resolution_clock::now();\n        if ((i & 7) == 0) {\n            generate_random_solution(config, context);\n        } else {\n            generate_greedy_nn_solution(config, context);\n        }\n        convert_solution_to_path(config, context);\n        end_time = high_resolution_clock::now();\n\n        calc_and_save_total_distance(config, context);\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #1 (init cycle). Total distance: \" << context.path_distance_double << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // Early stop after init if already in the BHH window\n        if (context.path_distance_double <= bhh_target) {\n            if (i % 100 == 0) { std::cout << \"Early stop (BHH): \" << context.path_distance_double << \" \u2264 \" << bhh_target << \"\\n\\n\"; }\n            store_path_as_best(config, context);\n            break;\n        }\n\n        // local 2opt search\n        start_time = high_resolution_clock::now();\n\t\timproved_times = local_2_opt_search(config, context);\n        end_time = high_resolution_clock::now();\n\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #2 (local 2'opt search). Total distance: \" << context.path_distance_double << \", Improved times: \" << improved_times << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // local k opt search\n        start_time = high_resolution_clock::now();\n\t\timproved_times = local_k_opt_search(config, context, max_k_opt_depth);\n        end_time = high_resolution_clock::now();\n\n        if (config.distance_type != DistanceType::Double) {\n            context.path_distance_double = calc_total_distance_double(config, context);\n        }\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #3 (local k'opt search). Total distance: \" << context.path_distance_double << \", Improved times: \" << improved_times << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\n\n        // changing the best path\n        if (\n            (config.distance_type == DistanceType::Double && context.path_distance_double < context.best_path_distance_double) ||\n            (config.distance_type == DistanceType::Int32 && context.path_distance_int32 < context.best_path_distance_int32) ||\n            (config.distance_type == DistanceType::Int64 && context.path_distance_int64 < context.best_path_distance_int64)\n        ) {\n            store_path_as_best(config, context);  // also updates best path distance\n        }\n\n        // Early stop if inside BHH window\n        if (context.path_distance_double <= bhh_target) {\n            if (i % 100 == 0) { std::cout << \"Early stop (BHH): \" << context.path_distance_double << \" \u2264 \" << bhh_target << \"\\n\\n\"; }\n            break;\n        }\n\n        if (config.random_k_opt_depth_after_first_iteration) {\n            // random MCTS depth change\n            max_k_opt_depth = std::min(10 + (rand() % 80), config.cities_number / 2);\n        }\n\n        if (i % 100 == 0) { std::cout << '\\n'; }\n\t}\n\n    // final convertation (context.best_path to context.solution)\n    restore_best_path(config, context);\n    convert_path_to_solution(config, context);\n\n    end_total_time = high_resolution_clock::now();\n    std::cout << \"Total elapsed time: \" << static_cast<double>(duration_cast<milliseconds>(end_total_time - start_total_time).count()) / 1000 << \" sec\\n\\n\";\n}\n\n\nint main(int argc, char** argv) {\n    // reading configuration\n    std::cout << \"Reading configuration...\\n\";\n    if (argc != 2) {\n        std::cerr << \"Usage: The first and only argument should be the path to the config file.\";\n        return 1;\n    }\n    \n    std::ifstream config_file(argv[1]);\n    json config_raw; config_file >> config_raw;\n    Config config(config_raw);\n\n    std::cout << \"Number of cities: \" << config.cities_number << \"\\n\\n\";\n\n    // initialization & memory allocation\n    Context context(config);\n\n    // reading input data\n    std::cout << \"Reading input data...\\n\";\n    read_input_data(config, context);\n\n    // solving\n    std::cout << \"Solving...\\n\";\n    solve(config, context);\n\n    // printing the solution\n    std::ofstream output_file(config.output_path);\n\n    std::cout << \"Final solution:\\n\";\n    for (int i = 0; i < config.cities_number; ++i) {\n        std::cout << context.solution[i] << ' ';\n        output_file << context.solution[i] << ' ';\n    }\n    std::cout << \"\\n\\nFinal solution score: \" << calc_total_distance_double(config, context) << '\\n';\n\n    return 0;\n}\n@@@\n\n* config.json *:\n@@@\n{\n    \"cities_number\": 500,\n    \"input_path\": \"/Users/dark-creator/solomon/self/openevolve-usage/UTSP/repo/src/local_search_v2/input.txt\",\n    \"output_path\": \"/Users/dark-creator/solomon/self/openevolve-usage/UTSP/repo/src/local_search_v2/output.txt\",\n    \"use_heat_map_as_initial_weights\": false,\n    \"candidates_source\": \"knn\",\n    \"candidates_number\": 24,\n    \"max_k_opt_depth\": 64,\n    \"random_k_opt_depth_after_first_iteration\": true,\n    \"min_potential_to_consider\": 0.0,\n    \"exploration_coefficient\": 0.15,\n    \"weight_delta_coefficient\": 6.0,\n    \"use_sensitivity_decrease\": true,\n    \"sensitivity_temperature\": 8.0,\n    \"max_k_opt_simulations_without_improve_to_stop\": 120,\n    \"restarts_number\": 250,\n    \"distance_type\": \"int32\",\n    \"magnify_rate\": 1000000\n}\n@@@\n\n* changes_description.txt *:\n@@@\n# Changes (2025-10-09) \u2014 FITNESS-focused improvements\n\nGoal: reduce average runtime without sacrificing tour length; prioritize path quality but cut wasted work.\n\n1) **Kill unnecessary n\u00b2 double builds in int-modes**\n   - In `read_input_data`: skip filling `distance_double` unless `distance_type == \"double\"`.\n   - KNN lists are now built from **on-the-fly squared distances** (no sqrt). \n   - Final score uses `calc_total_distance_double` computed **from coords**, no precomputed matrix.\n\n2) **Greedy KNN seeding (with fallback)**\n   - Implemented `generate_greedy_nn_solution(...)` in `include/additional.hpp`.\n   - In `solve()`: 7/8 restarts use greedy NN; 1/8 stays random for diversity.\n\n3) **BHH early stop (unit square)**\n   - Stop when current tour length \\(L \\le 1.02 \\cdot 0.712 \\sqrt{n}\\).\n   - Formula: \\( \\mathbb{E}[L^\\*] \\approx \\beta \\sqrt{n} \\) with \\(\\beta \\approx 0.712\\).\n\n4) **Math micro-opts & correctness**\n   - Replace `pow(e, x)` with `std::exp(x)` in 2-opt/k-opt updates and sensitivity decay.\n   - Faster `int64_sqrt` using `sqrtl` + guards.\n   - Fix integer accumulators to start from integer zeros.\n\n5) **Config tuned for speed \u00d7 quality**\n   - `candidates_number: 24`, `max_k_opt_depth: 64`, `restarts_number: 250`.\n   - `min_potential_to_consider: 0.0`, `exploration_coefficient: 0.15`.\n   - `weight_delta_coefficient: 6.0`, `use_sensitivity_decrease: true`, `sensitivity_temperature: 8.0`.\n   - `max_k_opt_simulations_without_improve_to_stop: 120`.\n\nWhy this improves FITNESS:\n- Less preprocessing (no giant double matrix) and fewer heavy sqrts.\n- Much better initial tours \u2192 fewer improving moves.\n- Early-stop trims long tails once near the asymptotic optimum window.\n- Path length remains strong; runtime drops notably \u2192 higher combined score.\n@@@\n```\n\n# Task\nSuggest improvements to the program that will improve its FITNESS SCORE.\nThe system maintains diversity across these dimensions: complexity, diversity\nDifferent solutions with similar fitness but different features are valuable.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n```\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n```\n\nExample of valid diff format:\n```\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n```\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT:\n* Do not rewrite the entire program - focus on targeted improvements.\n* Provide \"<<<<<<< SEARCH\", \"=======\" and \">>>>>>> REPLACE\" blocks inside a triple code quotes ``` ``` for proper whitespace handling and parsing.\n* Mind the \"<<<<<<<\", \"=======\" and \">>>>>>>\" as they are crucial for parsing.", "responses": ["Here\u2019s how to push your FITNESS up: add a cheap **Or-opt (1-node relocation)** pass between 2-opt and k-opt to cut a chunk of length quickly without heavy runtime, tighten the BHH stop a bit (favor quality), and widen K to 32 to unlock better local improvements. Or-opt uses the same doubly-linked tour, only touches O(K\u00b7n) edges per sweep, and updates the path length in the active metric.\r\n\r\nBelow are targeted diffs. Apply them exactly.\r\n\r\n---\r\n\r\n### 1) Add Or-opt (1-node relocation) implementation\r\n\r\nWe\u2019ll append it to `include/additional.hpp` (keeps compile surface small and reuses existing helpers).\r\n\r\n```diff\r\n<<<<<<< SEARCH\r\n#pragma once\r\n\r\n// Greedy KNN-based tour constructor with global fallback.\r\n// Uses squared distances (no sqrt); order is preserved.\r\ninline long double _dist2_idx(const Config& config, Context& context, int a, int b) {\r\n    if (config.distance_type == DistanceType::Double) {\r\n        long double dx = (long double)context.coordinates_double_x[a] - (long double)context.coordinates_double_x[b];\r\n        long double dy = (long double)context.coordinates_double_y[a] - (long double)context.coordinates_double_y[b];\r\n        return dx * dx + dy * dy;\r\n    } else if (config.distance_type == DistanceType::Int32) {\r\n        long long dx = (long long)context.coordinates_int32_x[a] - (long long)context.coordinates_int32_x[b];\r\n        long long dy = (long long)context.coordinates_int32_y[a] - (long long)context.coordinates_int32_y[b];\r\n        return (long double)dx * dx + (long double)dy * dy;\r\n    } else {\r\n        long long dx = context.coordinates_int64_x[a] - context.coordinates_int64_x[b];\r\n        long long dy = context.coordinates_int64_y[a] - context.coordinates_int64_y[b];\r\n        return (long double)dx * dx + (long double)dy * dy;\r\n    }\r\n}\r\n\r\ninline void generate_greedy_nn_solution(const Config& config, Context& context) {\r\n    const int n = config.cities_number;\r\n\r\n    for (int i = 0; i < n; ++i) {\r\n        context.solution[i] = null;\r\n        context.is_city_selected[i] = false;\r\n    }\r\n\r\n    int start = get_random_int_by_module(n);\r\n    context.solution[0] = start;\r\n    context.is_city_selected[start] = true;\r\n\r\n    int cur = start;\r\n    for (int pos = 1; pos < n; ++pos) {\r\n        int best = null;\r\n        long double bestd = std::numeric_limits<long double>::infinity();\r\n\r\n        // Try KNN list first\r\n        for (int k = 0; k < config.candidates_number; ++k) {\r\n            int v = context.candidates[cur * config.candidates_number + k];\r\n            if (v == cur || context.is_city_selected[v]) continue;\r\n            long double d2 = _dist2_idx(config, context, cur, v);\r\n            if (d2 < bestd) { bestd = d2; best = v; }\r\n        }\r\n\r\n        // Fallback: full scan\r\n        if (best == null) {\r\n            for (int v = 0; v < n; ++v) {\r\n                if (v == cur || context.is_city_selected[v]) continue;\r\n                long double d2 = _dist2_idx(config, context, cur, v);\r\n                if (d2 < bestd) { bestd = d2; best = v; }\r\n            }\r\n        }\r\n\r\n        context.solution[pos] = best;\r\n        context.is_city_selected[best] = true;\r\n        cur = best;\r\n    }\r\n}\r\n=======\r\n#pragma once\r\n\r\n// Greedy KNN-based tour constructor with global fallback.\r\n// Uses squared distances (no sqrt); order is preserved.\r\ninline long double _dist2_idx(const Config& config, Context& context, int a, int b) {\r\n    if (config.distance_type == DistanceType::Double) {\r\n        long double dx = (long double)context.coordinates_double_x[a] - (long double)context.coordinates_double_x[b];\r\n        long double dy = (long double)context.coordinates_double_y[a] - (long double)context.coordinates_double_y[b];\r\n        return dx * dx + dy * dy;\r\n    } else if (config.distance_type == DistanceType::Int32) {\r\n        long long dx = (long long)context.coordinates_int32_x[a] - (long long)context.coordinates_int32_x[b];\r\n        long long dy = (long long)context.coordinates_int32_y[a] - (long long)context.coordinates_int32_y[b];\r\n        return (long double)dx * dx + (long double)dy * dy;\r\n    } else {\r\n        long long dx = context.coordinates_int64_x[a] - context.coordinates_int64_x[b];\r\n        long long dy = context.coordinates_int64_y[a] - context.coordinates_int64_y[b];\r\n        return (long double)dx * dx + (long double)dy * dy;\r\n    }\r\n}\r\n\r\ninline void generate_greedy_nn_solution(const Config& config, Context& context) {\r\n    const int n = config.cities_number;\r\n\r\n    for (int i = 0; i < n; ++i) {\r\n        context.solution[i] = null;\r\n        context.is_city_selected[i] = false;\r\n    }\r\n\r\n    int start = get_random_int_by_module(n);\r\n    context.solution[0] = start;\r\n    context.is_city_selected[start] = true;\r\n\r\n    int cur = start;\r\n    for (int pos = 1; pos < n; ++pos) {\r\n        int best = null;\r\n        long double bestd = std::numeric_limits<long double>::infinity();\r\n\r\n        // Try KNN list first\r\n        for (int k = 0; k < config.candidates_number; ++k) {\r\n            int v = context.candidates[cur * config.candidates_number + k];\r\n            if (v == cur || context.is_city_selected[v]) continue;\r\n            long double d2 = _dist2_idx(config, context, cur, v);\r\n            if (d2 < bestd) { bestd = d2; best = v; }\r\n        }\r\n\r\n        // Fallback: full scan\r\n        if (best == null) {\r\n            for (int v = 0; v < n; ++v) {\r\n                if (v == cur || context.is_city_selected[v]) continue;\r\n                long double d2 = _dist2_idx(config, context, cur, v);\r\n                if (d2 < bestd) { bestd = d2; best = v; }\r\n            }\r\n        }\r\n\r\n        context.solution[pos] = best;\r\n        context.is_city_selected[best] = true;\r\n        cur = best;\r\n    }\r\n}\r\n\r\n// ---------- Or-opt (1-node relocation) ----------\r\ninline int _get_d(const Config& config, Context& context, int a, int b) {\r\n    if (config.distance_type == DistanceType::Double) {\r\n        return 0; // unused in double branch\r\n    } else if (config.distance_type == DistanceType::Int32) {\r\n        return get_distance_int32(config, context, a, b);\r\n    } else {\r\n        // Int64: we will cast to long long separately; keep signature uniform\r\n        return 0;\r\n    }\r\n}\r\n\r\n// Compute edge length in active metric as double for delta arithmetic.\r\ninline double _edge_len(const Config& config, Context& context, int a, int b) {\r\n    if (config.distance_type == DistanceType::Double) {\r\n        return get_distance_double(config, context, a, b);\r\n    } else if (config.distance_type == DistanceType::Int32) {\r\n        return static_cast<double>(get_distance_int32(config, context, a, b));\r\n    } else {\r\n        return static_cast<double>(get_distance_int64(config, context, a, b));\r\n    }\r\n}\r\n\r\n// Insert city `a` immediately after city `u` (before u_next). Returns true if improved and applies the move.\r\ninline bool apply_or_opt_1(const Config& config, Context& context, int a, int u) {\r\n    if (a == u) return false;\r\n    int a_prev = context.path[a].prev;\r\n    int a_next = context.path[a].next;\r\n    int u_next = context.path[u].next;\r\n\r\n    // Skip adjacent placements that become no-ops or degenerate\r\n    if (a == u_next || u == a_prev || u == a_next) return false;\r\n\r\n    // Delta = removed - added\r\n    // Removed: (a_prev,a) + (a,a_next) + (u,u_next)\r\n    // Added  : (a_prev,a_next) + (u,a) + (a,u_next)\r\n    double removed = _edge_len(config, context, a_prev, a) + _edge_len(config, context, a, a_next) + _edge_len(config, context, u, u_next);\r\n    double added   = _edge_len(config, context, a_prev, a_next) + _edge_len(config, context, u, a) + _edge_len(config, context, a, u_next);\r\n    double delta = removed - added;\r\n\r\n    if (delta <= 0.0) return false;\r\n\r\n    // Detach a\r\n    context.path[a_prev].next = a_next;\r\n    context.path[a_next].prev = a_prev;\r\n\r\n    // Insert after u\r\n    context.path[a].prev = u;\r\n    context.path[a].next = u_next;\r\n    context.path[u].next = a;\r\n    context.path[u_next].prev = a;\r\n\r\n    // Update path distance in active metric\r\n    if (config.distance_type == DistanceType::Double) {\r\n        context.path_distance_double -= delta;\r\n    } else if (config.distance_type == DistanceType::Int32) {\r\n        context.path_distance_int32 -= static_cast<int>(std::llround(delta));\r\n    } else {\r\n        context.path_distance_int64 -= static_cast<long long>(std::llround(delta));\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// Repeatedly apply first-improvement Or-opt(1) using KNN anchors.\r\n// Returns number of improvements applied.\r\ninline int local_or_opt_search(const Config& config, Context& context) {\r\n    const int n = config.cities_number;\r\n    int improved_times = 0;\r\n    bool improved = true;\r\n\r\n    while (improved) {\r\n        improved = false;\r\n        for (int a = 0; a < n; ++a) {\r\n            for (int k = 0; k < config.candidates_number; ++k) {\r\n                int u = context.candidates[a * config.candidates_number + k];\r\n                if (apply_or_opt_1(config, context, a, u)) {\r\n                    ++improved_times;\r\n                    improved = true;\r\n                    // restart sweep from scratch (first-improvement strategy)\r\n                    goto next_sweep;\r\n                }\r\n            }\r\n        }\r\n    next_sweep:\r\n        (void)0;\r\n    }\r\n    return improved_times;\r\n}\r\n>>>>>>> REPLACE\r\n```\r\n\r\n---\r\n\r\n### 2) Call Or-opt between 2-opt and k-opt (and log it)\r\n\r\nInsert a new \u201cPhase #2.5\u201d in `TSP.cpp::solve`.\r\n\r\n```diff\r\n<<<<<<< SEARCH\r\n        // local 2opt search\r\n        start_time = high_resolution_clock::now();\r\n\t\timproved_times = local_2_opt_search(config, context);\r\n        end_time = high_resolution_clock::now();\r\n\r\n        if (config.distance_type != DistanceType::Double) {\r\n            context.path_distance_double = calc_total_distance_double(config, context);\r\n        }\r\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #2 (local 2'opt search). Total distance: \" << context.path_distance_double << \", Improved times: \" << improved_times << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\r\n\r\n        // local k opt search\r\n        start_time = high_resolution_clock::now();\r\n\t\timproved_times = local_k_opt_search(config, context, max_k_opt_depth);\r\n        end_time = high_resolution_clock::now();\r\n\r\n        if (config.distance_type != DistanceType::Double) {\r\n            context.path_distance_double = calc_total_distance_double(config, context);\r\n        }\r\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #3 (local k'opt search). Total distance: \" << context.path_distance_double << \", Improved times: \" << improved_times << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\r\n=======\r\n        // local 2opt search\r\n        start_time = high_resolution_clock::now();\r\n\t\timproved_times = local_2_opt_search(config, context);\r\n        end_time = high_resolution_clock::now();\r\n\r\n        if (config.distance_type != DistanceType::Double) {\r\n            context.path_distance_double = calc_total_distance_double(config, context);\r\n        }\r\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #2 (local 2'opt search). Total distance: \" << context.path_distance_double << \", Improved times: \" << improved_times << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\r\n\r\n        // local Or-opt(1) search (cheap relocations)\r\n        start_time = high_resolution_clock::now();\r\n        int or_improved = local_or_opt_search(config, context);\r\n        end_time = high_resolution_clock::now();\r\n\r\n        if (config.distance_type != DistanceType::Double) {\r\n            context.path_distance_double = calc_total_distance_double(config, context);\r\n        }\r\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #2.5 (local Or-opt(1)). Total distance: \" << context.path_distance_double << \", Improved times: \" << or_improved << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\r\n\r\n        // local k opt search\r\n        start_time = high_resolution_clock::now();\r\n\t\timproved_times = local_k_opt_search(config, context, max_k_opt_depth);\r\n        end_time = high_resolution_clock::now();\r\n\r\n        if (config.distance_type != DistanceType::Double) {\r\n            context.path_distance_double = calc_total_distance_double(config, context);\r\n        }\r\n        if (i % 100 == 0) { std::cout << std::setprecision(8) << \"Phase #3 (local k'opt search). Total distance: \" << context.path_distance_double << \", Improved times: \" << improved_times << \", Time: \" << duration_cast<milliseconds>(end_time - start_time).count() << \" ms\\n\"; }\r\n>>>>>>> REPLACE\r\n```\r\n\r\n---\r\n\r\n### 3) Favor path quality slightly more: tighten BHH early-stop\r\n\r\nUse 1.015 instead of 1.02. Keeps runtime sane but nudges tours shorter.\r\n\r\n```diff\r\n<<<<<<< SEARCH\r\n    const double bhh_target = 1.02 * expected_optimal_tsp_length_2d(config.cities_number, 1.0, 1.0);\r\n=======\r\n    const double bhh_target = 1.015 * expected_optimal_tsp_length_2d(config.cities_number, 1.0, 1.0);\r\n>>>>>>> REPLACE\r\n```\r\n\r\n---\r\n\r\n### 4) Let local search see a bit wider neighborhood (K=32)\r\n\r\nThis tends to drop length noticeably with small time impact, especially when paired with Or-opt. Update `config.json`.\r\n\r\n```diff\r\n<<<<<<< SEARCH\r\n    \"candidates_number\": 24,\r\n=======\r\n    \"candidates_number\": 32,\r\n>>>>>>> REPLACE\r\n```\r\n\r\n---\r\n\r\n### 5) Update `changes_description.txt`\r\n\r\nReplace with a precise log of what you changed (deleting the previous content).\r\n\r\n```diff\r\n<<<<<<< SEARCH\r\n# Changes (2025-10-09) \u2014 FITNESS-focused improvements\r\n\r\nGoal: reduce average runtime without sacrificing tour length; prioritize path quality but cut wasted work.\r\n\r\n1) **Kill unnecessary n\u00b2 double builds in int-modes**\r\n   - In `read_input_data`: skip filling `distance_double` unless `distance_type == \"double\"`.\r\n   - KNN lists are now built from **on-the-fly squared distances** (no sqrt). \r\n   - Final score uses `calc_total_distance_double` computed **from coords**, no precomputed matrix.\r\n\r\n2) **Greedy KNN seeding (with fallback)**\r\n   - Implemented `generate_greedy_nn_solution(...)` in `include/additional.hpp`.\r\n   - In `solve()`: 7/8 restarts use greedy NN; 1/8 stays random for diversity.\r\n\r\n3) **BHH early stop (unit square)**\r\n   - Stop when current tour length \\(L \\le 1.02 \\cdot 0.712 \\sqrt{n}\\).\r\n   - Formula: \\( \\mathbb{E}[L^\\*] \\approx \\beta \\sqrt{n} \\) with \\(\\beta \\approx 0.712\\).\r\n\r\n4) **Math micro-opts & correctness**\r\n   - Replace `pow(e, x)` with `std::exp(x)` in 2-opt/k-opt updates and sensitivity decay.\r\n   - Faster `int64_sqrt` using `sqrtl` + guards.\r\n   - Fix integer accumulators to start from integer zeros.\r\n\r\n5) **Config tuned for speed \u00d7 quality**\r\n   - `candidates_number: 24`, `max_k_opt_depth: 64`, `restarts_number: 250`.\r\n   - `min_potential_to_consider: 0.0`, `exploration_coefficient: 0.15`.\r\n   - `weight_delta_coefficient: 6.0`, `use_sensitivity_decrease: true`, `sensitivity_temperature: 8.0`.\r\n   - `max_k_opt_simulations_without_improve_to_stop: 120`.\r\n\r\nWhy this improves FITNESS:\r\n- Less preprocessing (no giant double matrix) and fewer heavy sqrts.\r\n- Much better initial tours \u2192 fewer improving moves.\r\n- Early-stop trims long tails once near the asymptotic optimum window.\r\n- Path length remains strong; runtime drops notably \u2192 higher combined score.\r\n=======\r\n# Changes (2025-10-09) \u2014 FITNESS upgrade (shorter tours with low overhead)\r\n\r\n**What changed**\r\n1) **Or-opt (1-node relocation) pass added**  \r\n   - Implemented `apply_or_opt_1(...)` and `local_or_opt_search(...)` in `include/additional.hpp`.  \r\n   - Inserted as **Phase #2.5** between 2-opt and k-opt in `solve()`.  \r\n   - Delta formula (removed \u2212 added):  \r\n     \\[\r\n       \\Delta = d(a_{\\text{prev}},a) + d(a,a_{\\text{next}}) + d(u,u_{\\text{next}})\r\n               - \\big( d(a_{\\text{prev}},a_{\\text{next}}) + d(u,a) + d(a,u_{\\text{next}}) \\big)\r\n     \\]\r\n     Apply if \\(\\Delta>0\\). Updates the active path-length accumulator (double/int32/int64).\r\n\r\n2) **Tighter BHH early-stop (quality-biased)**  \r\n   - \\(L \\le 1.015 \\cdot \\beta \\sqrt{n}\\) with \\(\\beta=0.712\\) for \\([0,1]^2\\).  \r\n   - Slightly stricter than 1.02 to favor shorter tours; time impact small due to cheap Or-opt.\r\n\r\n3) **Wider KNN neighborhood**  \r\n   - `candidates_number: 24 \u2192 32` to expose more promising relocations and 2-opt edges.  \r\n   - Works well with the added Or-opt; modest runtime bump, typically better average length.\r\n\r\n**Why this helps**\r\n- Or-opt is \\(O(n\\cdot K)\\) per sweep and exploits KNN structure; it removes stubborn 2-opt plateaus cheaply.  \r\n- The stricter BHH gate prevents exiting too early when a few fast relocations can shave ~0.1\u20130.3 off length for \\(n=500\\).  \r\n- Higher \\(K\\) gives local search the edges it needs without resorting to full scans.\r\n\r\n**Kept from prior changes**\r\n- No n\u00b2 double matrix in int-modes; `calc_total_distance_double` uses coords on demand.  \r\n- Greedy NN seeding for 7/8 restarts; 1/8 random for diversity.  \r\n- `std::exp` micro-opts; fast `int64_sqrt`.\r\n\r\n**Expectations**\r\n- **Lower average path length** than the previous build at similar wall-clock (Or-opt is cheap).  \r\n- Combined score improves because length is weighted more than time in FITNESS.\r\n>>>>>>> REPLACE\r\n```\r\n\r\n---\r\n\r\n## Why this combination?\r\n\r\n* **Or-opt** knocks out \u201cone-city detours\u201d that 2-opt sometimes can\u2019t fix without deeper k-moves; it\u2019s the highest ROI move after 2-opt.\r\n* **K=32** is still small enough to be cache-friendly; it materially increases the chance of finding profitable relocations/2-opt pairs.\r\n* **BHH 1.015** biases toward quality as you asked; coupled with the new cheap pass, the runtime hit is minor while length drops.\r\n\r\nIf you want to squeeze even more length later without blowing time, we can add **Or-opt(2)** (moving 2-chains) behind a tiny iteration cap; for now, 1-node is the safest \u201cwins per millisecond\u201d upgrade."]}}, "artifacts_json": "{\"heat_map_train_stdout\": \"Sample output to log\\n\", \"heat_map_train_stderr\": \"\", \"heat_map_train_time_elapsed\": 0.7736612919834442, \"heat_map_inference_first_test_sample_stdout\": \"Sample output to log\\n\", \"heat_map_inference_first_test_sample_stderr\": \"\", \"average_heat_map_inference_time_elapsed\": 1.264102536430073, \"tsp_run_first_test_sample_stdout\": \"Reading configuration...\\nNumber of cities: 500\\n\\nReading input data...\\nSolving...\\n# --------- Iteration: 100\\nPhase #1 (init cycle). Total distance: 20.317117, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 17.413466, Improved times: 146, Time: 2 ms\\nPhase #2.5 (local Or-opt(1)). Total distance: 17.227872, Improved times: 21, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 17.227872, Improved times: 0, Time: 5 ms\\n\\n# --------- Iteration: 200\\nPhase #1 (init cycle). Total distance: 253.10855, Time: 0 ms\\nPhase #2 (local 2'opt search). Total distance: 17.882554, Improved times: 5188, Time: 37 ms\\nPhase #2.5 (local Or-opt(1)). Total distance: 17.516241, Improved times: 31, Time: 0 ms\\nPhase #3 (local k'opt search). Total distance: 17.516241, Improved times: 0, Time: 7 ms\\n\\nTotal elapsed time: 3.858 sec\\n\\nFinal solution:\\n0 222 21 290 198 134 151 463 249 16 57 310 374 1 481 191 180 176 448 160 362 80 476 402 424 274 495 225 257 169 215 440 256 389 61 237 462 28 492 59 124 355 388 326 41 456 253 218 125 205 13 455 490 43 7 430 435 63 120 279 406 302 268 303 469 329 197 75 69 262 426 79 173 283 285 201 467 113 34 447 46 44 350 111 181 400 316 207 74 248 403 335 108 208 322 164 210 449 129 395 9 308 264 145 269 214 92 421 298 166 168 378 211 306 254 420 275 239 136 499 112 51 137 183 340 433 494 93 478 454 369 331 431 327 15 52 386 153 349 115 4 413 324 89 297 243 149 392 133 179 230 407 359 116 130 470 354 347 85 473 56 441 410 261 405 91 174 382 328 445 451 102 309 2 333 101 377 460 422 184 423 187 49 357 270 144 131 391 84 77 3 76 487 107 38 443 294 352 155 86 284 171 53 30 370 305 417 251 404 381 20 482 315 282 318 332 203 103 70 263 399 226 272 390 123 202 32 157 25 170 33 54 444 42 142 175 219 87 186 216 195 474 252 295 459 132 62 24 488 344 353 64 14 245 411 366 358 342 65 401 461 204 393 138 146 277 178 213 109 95 475 47 337 163 39 341 36 236 365 493 206 442 250 259 122 497 379 296 127 483 148 419 480 6 343 119 23 438 128 398 190 465 304 110 114 334 244 409 50 265 167 241 246 371 150 281 287 105 185 118 484 19 300 477 172 242 12 17 255 189 446 299 156 45 5 158 491 434 98 58 18 223 220 339 154 71 360 82 81 31 266 165 427 450 48 367 258 143 319 278 418 221 90 209 8 227 363 380 479 147 194 317 192 97 232 364 273 68 368 73 351 60 37 412 280 235 468 288 182 397 126 88 383 471 291 472 193 238 429 135 188 94 10 416 40 415 346 224 233 464 271 106 104 311 117 22 162 96 330 78 286 466 376 314 385 345 458 217 212 486 177 35 247 408 29 66 260 396 428 325 292 152 139 375 336 289 11 267 83 496 161 72 307 489 372 414 320 159 313 228 231 240 439 99 312 301 26 196 234 338 452 199 394 321 437 140 432 200 425 457 498 348 323 485 436 356 453 229 276 27 387 67 141 384 121 361 100 55 373 293 \\n\\nFinal solution score: 16.844363\\n\", \"tsp_run_first_test_sample_stderr\": \"\", \"average_tsp_run_time_elapsed\": 3.943750023498069, \"average_path_length\": 17.071628477333164, \"path_length_variance\": 0.03628429214405439}", "artifact_dir": null}